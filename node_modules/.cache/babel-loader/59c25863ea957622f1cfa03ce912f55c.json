{"ast":null,"code":"import _createForOfIteratorHelper from \"/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _slicedToArray from \"/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _asyncToGenerator from \"/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _toConsumableArray from \"/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _regeneratorRuntime from \"/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/@babel/runtime/regenerator/index.js\";\nimport { isValidElement, useRef, useState, useCallback, useEffect, useMemo, createContext, useContext, createElement, cloneElement } from 'react';\n\nvar isHTMLElement = function isHTMLElement(value) {\n  return value instanceof HTMLElement;\n};\n\nvar EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input'\n};\nvar VALIDATION_MODE = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all'\n};\nvar SELECT = 'select';\nvar UNDEFINED = 'undefined';\nvar INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate'\n};\n\nfunction attachEventListeners(_ref, shouldAttachChangeEvent, handleChange) {\n  var ref = _ref.ref;\n\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT, handleChange);\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n\nvar isNullOrUndefined = function isNullOrUndefined(value) {\n  return value == null;\n};\n\nvar isObjectType = function isObjectType(value) {\n  return typeof value === 'object';\n};\n\nvar isObject = function isObject(value) {\n  return !isNullOrUndefined(value) && !Array.isArray(value) && isObjectType(value) && !(value instanceof Date);\n};\n\nvar isKey = function isKey(value) {\n  return !Array.isArray(value) && /^\\w*$/.test(value);\n};\n\nvar compact = function compact(value) {\n  return value.filter(Boolean);\n};\n\nvar stringToPath = function stringToPath(input) {\n  return compact(input.replace(/[\"|']/g, '').replace(/\\[/g, '.').replace(/\\]/g, '').split('.'));\n};\n\nfunction set(object, path, value) {\n  var index = -1;\n  var tempPath = isKey(path) ? [path] : stringToPath(path);\n  var length = tempPath.length;\n  var lastIndex = length - 1;\n\n  while (++index < length) {\n    var key = tempPath[index];\n    var newValue = value;\n\n    if (index !== lastIndex) {\n      var objValue = object[key];\n      newValue = isObject(objValue) || Array.isArray(objValue) ? objValue : !isNaN(+tempPath[index + 1]) ? [] : {};\n    }\n\n    object[key] = newValue;\n    object = object[key];\n  }\n\n  return object;\n}\n\nvar transformToNestObject = function transformToNestObject(data) {\n  var value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  for (var key in data) {\n    !isKey(key) ? set(value, key, data[key]) : value[key] = data[key];\n  }\n\n  return value;\n};\n\nvar isUndefined = function isUndefined(val) {\n  return val === undefined;\n};\n\nvar get = function get(obj, path, defaultValue) {\n  var result = compact(path.split(/[,[\\].]+?/)).reduce(function (result, key) {\n    return isNullOrUndefined(result) ? result : result[key];\n  }, obj);\n  return isUndefined(result) || result === obj ? isUndefined(obj[path]) ? defaultValue : obj[path] : result;\n};\n\nvar focusOnErrorField = function focusOnErrorField(fields, fieldErrors) {\n  for (var key in fields) {\n    if (get(fieldErrors, key)) {\n      var field = fields[key];\n\n      if (field) {\n        if (field.ref.focus && isUndefined(field.ref.focus())) {\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n          break;\n        }\n      }\n    }\n  }\n};\n\nvar removeAllEventListeners = function removeAllEventListeners(ref, validateWithStateUpdate) {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n\nvar defaultReturn = {\n  isValid: false,\n  value: ''\n};\n\nvar getRadioValue = function getRadioValue(options) {\n  return Array.isArray(options) ? options.reduce(function (previous, option) {\n    return option && option.ref.checked ? {\n      isValid: true,\n      value: option.ref.value\n    } : previous;\n  }, defaultReturn) : defaultReturn;\n};\n\nvar getMultipleSelectValue = function getMultipleSelectValue(options) {\n  return _toConsumableArray(options).filter(function (_ref2) {\n    var selected = _ref2.selected;\n    return selected;\n  }).map(function (_ref3) {\n    var value = _ref3.value;\n    return value;\n  });\n};\n\nvar isRadioInput = function isRadioInput(element) {\n  return element.type === 'radio';\n};\n\nvar isFileInput = function isFileInput(element) {\n  return element.type === 'file';\n};\n\nvar isCheckBoxInput = function isCheckBoxInput(element) {\n  return element.type === 'checkbox';\n};\n\nvar isMultipleSelect = function isMultipleSelect(element) {\n  return element.type === \"\".concat(SELECT, \"-multiple\");\n};\n\nvar defaultResult = {\n  value: false,\n  isValid: false\n};\nvar validResult = {\n  value: true,\n  isValid: true\n};\n\nvar getCheckboxValue = function getCheckboxValue(options) {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      var values = options.filter(function (option) {\n        return option && option.ref.checked;\n      }).map(function (_ref4) {\n        var value = _ref4.ref.value;\n        return value;\n      });\n      return {\n        value: values,\n        isValid: !!values.length\n      };\n    }\n\n    var _options$0$ref = options[0].ref,\n        checked = _options$0$ref.checked,\n        value = _options$0$ref.value,\n        attributes = _options$0$ref.attributes;\n    return checked ? attributes && !isUndefined(attributes.value) ? isUndefined(value) || value === '' ? validResult : {\n      value: value,\n      isValid: true\n    } : validResult : defaultResult;\n  }\n\n  return defaultResult;\n};\n\nfunction getFieldValue(fieldsRef, name, shallowFieldsStateRef, excludeDisabled) {\n  var field = fieldsRef.current[name];\n\n  if (field) {\n    var _field$ref = field.ref,\n        value = _field$ref.value,\n        disabled = _field$ref.disabled,\n        ref = field.ref;\n\n    if (disabled && excludeDisabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBoxInput(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return value;\n  }\n\n  if (shallowFieldsStateRef) {\n    return get(shallowFieldsStateRef.current, name);\n  }\n}\n\nfunction isDetached(element) {\n  if (!element) {\n    return true;\n  }\n\n  if (!(element instanceof HTMLElement) || element.nodeType === Node.DOCUMENT_NODE) {\n    return false;\n  }\n\n  return isDetached(element.parentNode);\n}\n\nvar isEmptyObject = function isEmptyObject(value) {\n  return isObject(value) && !Object.keys(value).length;\n};\n\nvar isBoolean = function isBoolean(value) {\n  return typeof value === 'boolean';\n};\n\nfunction baseGet(object, updatePath) {\n  var path = updatePath.slice(0, -1);\n  var length = path.length;\n  var index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nfunction unset(object, path) {\n  var updatePath = isKey(path) ? [path] : stringToPath(path);\n  var childObject = updatePath.length == 1 ? object : baseGet(object, updatePath);\n  var key = updatePath[updatePath.length - 1];\n  var previousObjRef = undefined;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (var k = 0; k < updatePath.slice(0, -1).length; k++) {\n    var index = -1;\n    var objectRef = undefined;\n    var currentPaths = updatePath.slice(0, -(k + 1));\n    var currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      var item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (currentPathsLength === index && (isObject(objectRef) && isEmptyObject(objectRef) || Array.isArray(objectRef) && !objectRef.filter(function (data) {\n        return isObject(data) && !isEmptyObject(data) || isBoolean(data);\n      }).length)) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n\nvar isSameRef = function isSameRef(fieldValue, ref) {\n  return fieldValue && fieldValue.ref === ref;\n};\n\nfunction findRemovedFieldAndRemoveListener(fieldsRef, handleChange, field, shallowFieldsStateRef, shouldUnregister, forceDelete) {\n  var ref = field.ref,\n      _field$ref2 = field.ref,\n      name = _field$ref2.name,\n      type = _field$ref2.type;\n  var fieldRef = fieldsRef.current[name];\n\n  if (!shouldUnregister) {\n    var value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n    !isUndefined(value) && set(shallowFieldsStateRef.current, name, value);\n  }\n\n  if (!type) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldRef) {\n    if (Array.isArray(fieldRef.options) && fieldRef.options.length) {\n      compact(fieldRef.options).forEach(function (option, index) {\n        if (option.ref && isDetached(option.ref) && isSameRef(option, option.ref) || forceDelete) {\n          removeAllEventListeners(option.ref, handleChange);\n          unset(fieldRef.options, \"[\".concat(index, \"]\"));\n        }\n      });\n\n      if (fieldRef.options && !compact(fieldRef.options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if (isDetached(ref) && isSameRef(fieldRef, ref) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n    delete fieldsRef.current[name];\n  }\n}\n\nvar isPrimitive = function isPrimitive(value) {\n  return isNullOrUndefined(value) || !isObjectType(value);\n};\n\nfunction deepMerge(target, source) {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (var key in source) {\n    var targetValue = target[key];\n    var sourceValue = source[key];\n\n    try {\n      target[key] = isObject(targetValue) && isObject(sourceValue) || Array.isArray(targetValue) && Array.isArray(sourceValue) ? deepMerge(targetValue, sourceValue) : sourceValue;\n    } catch (_a) {}\n  }\n\n  return target;\n}\n\nfunction setDirtyFields(values, defaultValues, dirtyFields, parentNode, parentName) {\n  var index = -1;\n\n  while (++index < values.length) {\n    for (var key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(values[index][key], get(defaultValues[index] || {}, key, []), dirtyFields[index][key], dirtyFields[index], key);\n      } else {\n        get(defaultValues[index] || {}, key) === values[index][key] ? set(dirtyFields[index] || {}, key) : dirtyFields[index] = Object.assign(Object.assign({}, dirtyFields[index]), _defineProperty({}, key, true));\n      }\n    }\n\n    parentNode && !dirtyFields.length && delete parentNode[parentName];\n  }\n\n  return dirtyFields;\n}\n\nvar setFieldArrayDirtyFields = function setFieldArrayDirtyFields(values, defaultValues, dirtyFields) {\n  return deepMerge(setDirtyFields(values, defaultValues, dirtyFields), setDirtyFields(defaultValues, values, dirtyFields));\n};\n\nvar isString = function isString(value) {\n  return typeof value === 'string';\n};\n\nvar getFieldsValues = function getFieldsValues(fieldsRef, shallowFieldsState, shouldUnregister, excludeDisabled, search) {\n  var output = {};\n\n  var _loop = function _loop(name) {\n    if (isUndefined(search) || (isString(search) ? name.startsWith(search) : Array.isArray(search) && search.find(function (data) {\n      return name.startsWith(data);\n    }))) {\n      output[name] = getFieldValue(fieldsRef, name, undefined, excludeDisabled);\n    }\n  };\n\n  for (var name in fieldsRef.current) {\n    _loop(name);\n  }\n\n  return shouldUnregister ? transformToNestObject(output) : deepMerge(shallowFieldsState, transformToNestObject(output));\n};\n\nfunction deepEqual(object1, object2, isErrorObject) {\n  if (isPrimitive(object1) || isPrimitive(object2) || object1 instanceof Date || object2 instanceof Date) {\n    return object1 === object2;\n  }\n\n  var keys1 = Object.keys(object1);\n  var keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (var _i = 0, _keys = keys1; _i < _keys.length; _i++) {\n    var key = _keys[_i];\n\n    if (!(isErrorObject && ['ref', 'context'].includes(key))) {\n      var val1 = object1[key];\n      var val2 = object2[key];\n\n      if ((isObject(val1) || Array.isArray(val1)) && (isObject(val2) || Array.isArray(val2)) ? !deepEqual(val1, val2, isErrorObject) : val1 !== val2) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction isErrorStateChanged(_ref5) {\n  var errors = _ref5.errors,\n      name = _ref5.name,\n      error = _ref5.error,\n      validFields = _ref5.validFields,\n      fieldsWithValidation = _ref5.fieldsWithValidation;\n  var isValid = isUndefined(error);\n  var previousError = get(errors, name);\n  return isValid && !!previousError || !isValid && !deepEqual(previousError, error, true) || isValid && get(fieldsWithValidation, name) && !get(validFields, name);\n}\n\nvar isRegex = function isRegex(value) {\n  return value instanceof RegExp;\n};\n\nvar getValueAndMessage = function getValueAndMessage(validationData) {\n  return isObject(validationData) && !isRegex(validationData) ? validationData : {\n    value: validationData,\n    message: ''\n  };\n};\n\nvar isFunction = function isFunction(value) {\n  return typeof value === 'function';\n};\n\nvar isMessage = function isMessage(value) {\n  return isString(value) || isObject(value) && isValidElement(value);\n};\n\nfunction getValidateError(result, ref) {\n  var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'validate';\n\n  if (isMessage(result) || isBoolean(result) && !result) {\n    return {\n      type: type,\n      message: isMessage(result) ? result : '',\n      ref: ref\n    };\n  }\n}\n\nvar appendErrors = function appendErrors(name, validateAllFieldCriteria, errors, type, message) {\n  if (validateAllFieldCriteria) {\n    var error = errors[name];\n    return Object.assign(Object.assign({}, error), {\n      types: Object.assign(Object.assign({}, error && error.types ? error.types : {}), _defineProperty({}, type, message || true))\n    });\n  }\n\n  return {};\n};\n\nvar validateField = /*#__PURE__*/function () {\n  var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(fieldsRef, validateAllFieldCriteria, _ref6, shallowFieldsStateRef) {\n    var ref, _ref6$ref, type, value, options, required, maxLength, minLength, min, max, pattern, validate, name, error, isRadio, isCheckBox, isRadioOrCheckbox, isEmpty, appendErrorsCurry, getMinMaxMessage, _ref8, _value, message, exceedMax, exceedMin, maxOutput, minOutput, valueNumber, valueDate, maxLengthOutput, minLengthOutput, _exceedMax, _exceedMin, _getValueAndMessage, patternValue, _message, fieldValue, validateRef, result, validateError, validationResult, _i2, _Object$entries, _Object$entries$_i, key, validateFunction, validateResult, _validateError;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            ref = _ref6.ref, _ref6$ref = _ref6.ref, type = _ref6$ref.type, value = _ref6$ref.value, options = _ref6.options, required = _ref6.required, maxLength = _ref6.maxLength, minLength = _ref6.minLength, min = _ref6.min, max = _ref6.max, pattern = _ref6.pattern, validate = _ref6.validate;\n            name = ref.name;\n            error = {};\n            isRadio = isRadioInput(ref);\n            isCheckBox = isCheckBoxInput(ref);\n            isRadioOrCheckbox = isRadio || isCheckBox;\n            isEmpty = value === '';\n            appendErrorsCurry = appendErrors.bind(null, name, validateAllFieldCriteria, error);\n\n            getMinMaxMessage = function getMinMaxMessage(exceedMax, maxLengthMessage, minLengthMessage) {\n              var maxType = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : INPUT_VALIDATION_RULES.maxLength;\n              var minType = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : INPUT_VALIDATION_RULES.minLength;\n              var message = exceedMax ? maxLengthMessage : minLengthMessage;\n              error[name] = Object.assign({\n                type: exceedMax ? maxType : minType,\n                message: message,\n                ref: ref\n              }, exceedMax ? appendErrorsCurry(maxType, message) : appendErrorsCurry(minType, message));\n            };\n\n            if (!(required && (!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value)) || isBoolean(value) && !value || isCheckBox && !getCheckboxValue(options).isValid || isRadio && !getRadioValue(options).isValid))) {\n              _context.next = 15;\n              break;\n            }\n\n            _ref8 = isMessage(required) ? {\n              value: !!required,\n              message: required\n            } : getValueAndMessage(required), _value = _ref8.value, message = _ref8.message;\n\n            if (!_value) {\n              _context.next = 15;\n              break;\n            }\n\n            error[name] = Object.assign({\n              type: INPUT_VALIDATION_RULES.required,\n              message: message,\n              ref: isRadioOrCheckbox ? ((fieldsRef.current[name].options || [])[0] || {}).ref : ref\n            }, appendErrorsCurry(INPUT_VALIDATION_RULES.required, message));\n\n            if (validateAllFieldCriteria) {\n              _context.next = 15;\n              break;\n            }\n\n            return _context.abrupt(\"return\", error);\n\n          case 15:\n            if (!(!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n              _context.next = 23;\n              break;\n            }\n\n            maxOutput = getValueAndMessage(max);\n            minOutput = getValueAndMessage(min);\n\n            if (type === 'number' || !type && !isNaN(value)) {\n              valueNumber = ref.valueAsNumber || parseFloat(value);\n\n              if (!isNullOrUndefined(maxOutput.value)) {\n                exceedMax = valueNumber > maxOutput.value;\n              }\n\n              if (!isNullOrUndefined(minOutput.value)) {\n                exceedMin = valueNumber < minOutput.value;\n              }\n            } else {\n              valueDate = ref.valueAsDate || new Date(value);\n\n              if (isString(maxOutput.value)) {\n                exceedMax = valueDate > new Date(maxOutput.value);\n              }\n\n              if (isString(minOutput.value)) {\n                exceedMin = valueDate < new Date(minOutput.value);\n              }\n            }\n\n            if (!(exceedMax || exceedMin)) {\n              _context.next = 23;\n              break;\n            }\n\n            getMinMaxMessage(!!exceedMax, maxOutput.message, minOutput.message, INPUT_VALIDATION_RULES.max, INPUT_VALIDATION_RULES.min);\n\n            if (validateAllFieldCriteria) {\n              _context.next = 23;\n              break;\n            }\n\n            return _context.abrupt(\"return\", error);\n\n          case 23:\n            if (!(isString(value) && !isEmpty && (maxLength || minLength))) {\n              _context.next = 32;\n              break;\n            }\n\n            maxLengthOutput = getValueAndMessage(maxLength);\n            minLengthOutput = getValueAndMessage(minLength);\n            _exceedMax = !isNullOrUndefined(maxLengthOutput.value) && value.length > maxLengthOutput.value;\n            _exceedMin = !isNullOrUndefined(minLengthOutput.value) && value.length < minLengthOutput.value;\n\n            if (!(_exceedMax || _exceedMin)) {\n              _context.next = 32;\n              break;\n            }\n\n            getMinMaxMessage(_exceedMax, maxLengthOutput.message, minLengthOutput.message);\n\n            if (validateAllFieldCriteria) {\n              _context.next = 32;\n              break;\n            }\n\n            return _context.abrupt(\"return\", error);\n\n          case 32:\n            if (!(pattern && !isEmpty)) {\n              _context.next = 38;\n              break;\n            }\n\n            _getValueAndMessage = getValueAndMessage(pattern), patternValue = _getValueAndMessage.value, _message = _getValueAndMessage.message;\n\n            if (!(isRegex(patternValue) && !patternValue.test(value))) {\n              _context.next = 38;\n              break;\n            }\n\n            error[name] = Object.assign({\n              type: INPUT_VALIDATION_RULES.pattern,\n              message: _message,\n              ref: ref\n            }, appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, _message));\n\n            if (validateAllFieldCriteria) {\n              _context.next = 38;\n              break;\n            }\n\n            return _context.abrupt(\"return\", error);\n\n          case 38:\n            if (!validate) {\n              _context.next = 71;\n              break;\n            }\n\n            fieldValue = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n            validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n            if (!isFunction(validate)) {\n              _context.next = 52;\n              break;\n            }\n\n            _context.next = 44;\n            return validate(fieldValue);\n\n          case 44:\n            result = _context.sent;\n            validateError = getValidateError(result, validateRef);\n\n            if (!validateError) {\n              _context.next = 50;\n              break;\n            }\n\n            error[name] = Object.assign(Object.assign({}, validateError), appendErrorsCurry(INPUT_VALIDATION_RULES.validate, validateError.message));\n\n            if (validateAllFieldCriteria) {\n              _context.next = 50;\n              break;\n            }\n\n            return _context.abrupt(\"return\", error);\n\n          case 50:\n            _context.next = 71;\n            break;\n\n          case 52:\n            if (!isObject(validate)) {\n              _context.next = 71;\n              break;\n            }\n\n            validationResult = {};\n            _i2 = 0, _Object$entries = Object.entries(validate);\n\n          case 55:\n            if (!(_i2 < _Object$entries.length)) {\n              _context.next = 67;\n              break;\n            }\n\n            _Object$entries$_i = _slicedToArray(_Object$entries[_i2], 2), key = _Object$entries$_i[0], validateFunction = _Object$entries$_i[1];\n\n            if (!(!isEmptyObject(validationResult) && !validateAllFieldCriteria)) {\n              _context.next = 59;\n              break;\n            }\n\n            return _context.abrupt(\"break\", 67);\n\n          case 59:\n            _context.next = 61;\n            return validateFunction(fieldValue);\n\n          case 61:\n            validateResult = _context.sent;\n            _validateError = getValidateError(validateResult, validateRef, key);\n\n            if (_validateError) {\n              validationResult = Object.assign(Object.assign({}, _validateError), appendErrorsCurry(key, _validateError.message));\n\n              if (validateAllFieldCriteria) {\n                error[name] = validationResult;\n              }\n            }\n\n          case 64:\n            _i2++;\n            _context.next = 55;\n            break;\n\n          case 67:\n            if (isEmptyObject(validationResult)) {\n              _context.next = 71;\n              break;\n            }\n\n            error[name] = Object.assign({\n              ref: validateRef\n            }, validationResult);\n\n            if (validateAllFieldCriteria) {\n              _context.next = 71;\n              break;\n            }\n\n            return _context.abrupt(\"return\", error);\n\n          case 71:\n            return _context.abrupt(\"return\", error);\n\n          case 72:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function validateField(_x, _x2, _x3, _x4) {\n    return _ref7.apply(this, arguments);\n  };\n}();\n\nvar getPath = function getPath(path, values) {\n  var getInnerPath = function getInnerPath(key, value, isObject) {\n    var pathWithIndex = isObject ? \"\".concat(path, \".\").concat(key) : \"\".concat(path, \"[\").concat(key, \"]\");\n    return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\n  };\n\n  return Object.entries(values).map(function (_ref9) {\n    var _ref10 = _slicedToArray(_ref9, 2),\n        key = _ref10[0],\n        value = _ref10[1];\n\n    return getInnerPath(key, value, isObject(values));\n  }).flat(Infinity);\n};\n\nvar assignWatchFields = function assignWatchFields(fieldValues, fieldName, watchFields, inputValue, isSingleField) {\n  var value;\n  watchFields.add(fieldName);\n\n  if (isEmptyObject(fieldValues)) {\n    value = undefined;\n  } else {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || Array.isArray(value)) {\n      getPath(fieldName, value).forEach(function (name) {\n        return watchFields.add(name);\n      });\n    }\n  }\n\n  return isUndefined(value) ? isSingleField ? inputValue : get(inputValue, fieldName) : value;\n};\n\nvar skipValidation = function skipValidation(_ref11) {\n  var isOnBlur = _ref11.isOnBlur,\n      isOnChange = _ref11.isOnChange,\n      isOnTouch = _ref11.isOnTouch,\n      isTouched = _ref11.isTouched,\n      isReValidateOnBlur = _ref11.isReValidateOnBlur,\n      isReValidateOnChange = _ref11.isReValidateOnChange,\n      isBlurEvent = _ref11.isBlurEvent,\n      isSubmitted = _ref11.isSubmitted,\n      isOnAll = _ref11.isOnAll;\n\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n\n  return true;\n};\n\nvar getFieldArrayParentName = function getFieldArrayParentName(name) {\n  return name.substring(0, name.indexOf('['));\n};\n\nvar isMatchFieldArrayName = function isMatchFieldArrayName(name, searchName) {\n  return RegExp(\"^\".concat(searchName, \"([|.)\\\\d+\").replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]')).test(name);\n};\n\nvar isNameInFieldArray = function isNameInFieldArray(names, name) {\n  return _toConsumableArray(names).some(function (current) {\n    return isMatchFieldArrayName(name, current);\n  });\n};\n\nvar isSelectInput = function isSelectInput(element) {\n  return element.type === \"\".concat(SELECT, \"-one\");\n};\n\nfunction onDomRemove(fieldsRef, removeFieldEventListenerAndRef) {\n  var observer = new MutationObserver(function () {\n    for (var _i3 = 0, _Object$values = Object.values(fieldsRef.current); _i3 < _Object$values.length; _i3++) {\n      var field = _Object$values[_i3];\n\n      if (field && field.options) {\n        var _iterator = _createForOfIteratorHelper(field.options),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var option = _step.value;\n\n            if (option && option.ref && isDetached(option.ref)) {\n              removeFieldEventListenerAndRef(field);\n            }\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n      } else if (field && isDetached(field.ref)) {\n        removeFieldEventListenerAndRef(field);\n      }\n    }\n  });\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true\n  });\n  return observer;\n}\n\nfunction cloneObject(data) {\n  var isWeb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  var copy;\n\n  if (isPrimitive(data) || isWeb && data instanceof File) {\n    return data;\n  }\n\n  if (data instanceof Date) {\n    copy = new Date(data.getTime());\n    return copy;\n  }\n\n  if (data instanceof Set) {\n    copy = new Set();\n\n    var _iterator2 = _createForOfIteratorHelper(data),\n        _step2;\n\n    try {\n      for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n        var item = _step2.value;\n        copy.add(item);\n      }\n    } catch (err) {\n      _iterator2.e(err);\n    } finally {\n      _iterator2.f();\n    }\n\n    return copy;\n  }\n\n  if (data instanceof Map) {\n    copy = new Map();\n\n    var _iterator3 = _createForOfIteratorHelper(data.keys()),\n        _step3;\n\n    try {\n      for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n        var key = _step3.value;\n        copy.set(key, cloneObject(data.get(key), isWeb));\n      }\n    } catch (err) {\n      _iterator3.e(err);\n    } finally {\n      _iterator3.f();\n    }\n\n    return copy;\n  }\n\n  copy = Array.isArray(data) ? [] : {};\n\n  for (var _key in data) {\n    copy[_key] = cloneObject(data[_key], isWeb);\n  }\n\n  return copy;\n}\n\nvar modeChecker = function modeChecker(mode) {\n  return {\n    isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n    isOnBlur: mode === VALIDATION_MODE.onBlur,\n    isOnChange: mode === VALIDATION_MODE.onChange,\n    isOnAll: mode === VALIDATION_MODE.all,\n    isOnTouch: mode === VALIDATION_MODE.onTouched\n  };\n};\n\nvar isRadioOrCheckboxFunction = function isRadioOrCheckboxFunction(ref) {\n  return isRadioInput(ref) || isCheckBoxInput(ref);\n};\n\nvar isWindowUndefined = typeof window === UNDEFINED;\nvar isWeb = typeof document !== UNDEFINED && !isWindowUndefined && !isUndefined(window.HTMLElement);\nvar isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nfunction useForm() {\n  var _ref12 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n      _ref12$mode = _ref12.mode,\n      mode = _ref12$mode === void 0 ? VALIDATION_MODE.onSubmit : _ref12$mode,\n      _ref12$reValidateMode = _ref12.reValidateMode,\n      reValidateMode = _ref12$reValidateMode === void 0 ? VALIDATION_MODE.onChange : _ref12$reValidateMode,\n      resolver = _ref12.resolver,\n      context = _ref12.context,\n      _ref12$defaultValues = _ref12.defaultValues,\n      defaultValues = _ref12$defaultValues === void 0 ? {} : _ref12$defaultValues,\n      _ref12$shouldFocusErr = _ref12.shouldFocusError,\n      shouldFocusError = _ref12$shouldFocusErr === void 0 ? true : _ref12$shouldFocusErr,\n      _ref12$shouldUnregist = _ref12.shouldUnregister,\n      shouldUnregister = _ref12$shouldUnregist === void 0 ? true : _ref12$shouldUnregist,\n      criteriaMode = _ref12.criteriaMode;\n\n  var fieldsRef = useRef({});\n  var fieldArrayDefaultValuesRef = useRef({});\n  var fieldArrayValuesRef = useRef({});\n  var watchFieldsRef = useRef(new Set());\n  var useWatchFieldsRef = useRef({});\n  var useWatchRenderFunctionsRef = useRef({});\n  var fieldsWithValidationRef = useRef({});\n  var validFieldsRef = useRef({});\n  var defaultValuesRef = useRef(defaultValues);\n  var defaultValuesAtRenderRef = useRef({});\n  var isUnMount = useRef(false);\n  var isWatchAllRef = useRef(false);\n  var handleChangeRef = useRef();\n  var shallowFieldsStateRef = useRef({});\n  var resetFieldArrayFunctionRef = useRef({});\n  var contextRef = useRef(context);\n  var resolverRef = useRef(resolver);\n  var fieldArrayNamesRef = useRef(new Set());\n  var modeRef = useRef(modeChecker(mode));\n  var _modeRef$current = modeRef.current,\n      isOnSubmit = _modeRef$current.isOnSubmit,\n      isOnTouch = _modeRef$current.isOnTouch;\n  var isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n\n  var _useState = useState({\n    isDirty: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touched: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !isOnSubmit,\n    errors: {}\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      formState = _useState2[0],\n      setFormState = _useState2[1];\n\n  var readFormStateRef = useRef({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled\n  });\n  var formStateRef = useRef(formState);\n  var observerRef = useRef();\n  var _useRef$current = useRef(modeChecker(reValidateMode)).current,\n      isReValidateOnBlur = _useRef$current.isOnBlur,\n      isReValidateOnChange = _useRef$current.isOnChange;\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  formStateRef.current = formState;\n  shallowFieldsStateRef.current = shouldUnregister ? {} : isEmptyObject(shallowFieldsStateRef.current) ? cloneObject(defaultValues, isWeb) : shallowFieldsStateRef.current;\n  var updateFormState = useCallback(function () {\n    var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return !isUnMount.current && setFormState(Object.assign(Object.assign({}, formStateRef.current), state));\n  }, []);\n  var shouldRenderBaseOnError = useCallback(function (name, error) {\n    var shouldRender = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    var state = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    var isValid = arguments.length > 4 ? arguments[4] : undefined;\n    var shouldReRender = shouldRender || isErrorStateChanged({\n      errors: formStateRef.current.errors,\n      error: error,\n      name: name,\n      validFields: validFieldsRef.current,\n      fieldsWithValidation: fieldsWithValidationRef.current\n    });\n    var previousError = get(formStateRef.current.errors, name);\n\n    if (error) {\n      unset(validFieldsRef.current, name);\n      shouldReRender = shouldReRender || !previousError || !deepEqual(previousError, error, true);\n      set(formStateRef.current.errors, name, error);\n    } else {\n      if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n        set(validFieldsRef.current, name, true);\n        shouldReRender = shouldReRender || previousError;\n      }\n\n      unset(formStateRef.current.errors, name);\n    }\n\n    if (shouldReRender && !isNullOrUndefined(shouldRender) || !isEmptyObject(state)) {\n      updateFormState(Object.assign(Object.assign(Object.assign({}, state), {\n        errors: formStateRef.current.errors\n      }), resolverRef.current ? {\n        isValid: !!isValid\n      } : {}));\n    }\n  }, []);\n  var setFieldValue = useCallback(function (name, rawValue) {\n    var _fieldsRef$current$na = fieldsRef.current[name],\n        ref = _fieldsRef$current$na.ref,\n        options = _fieldsRef$current$na.options;\n    var value = isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue) ? '' : rawValue;\n\n    if (isRadioInput(ref)) {\n      (options || []).forEach(function (_ref13) {\n        var radioRef = _ref13.ref;\n        return radioRef.checked = radioRef.value === value;\n      });\n    } else if (isFileInput(ref) && !isString(value)) {\n      ref.files = value;\n    } else if (isMultipleSelect(ref)) {\n      _toConsumableArray(ref.options).forEach(function (selectRef) {\n        return selectRef.selected = value.includes(selectRef.value);\n      });\n    } else if (isCheckBoxInput(ref) && options) {\n      options.length > 1 ? options.forEach(function (_ref14) {\n        var checkboxRef = _ref14.ref;\n        return checkboxRef.checked = Array.isArray(value) ? !!value.find(function (data) {\n          return data === checkboxRef.value;\n        }) : value === checkboxRef.value;\n      }) : options[0].ref.checked = !!value;\n    } else {\n      ref.value = value;\n    }\n  }, []);\n  var isFormDirty = useCallback(function (name, data) {\n    if (readFormStateRef.current.isDirty) {\n      var formValues = getValues();\n      name && data && set(formValues, name, data);\n      return !deepEqual(formValues, isEmptyObject(defaultValuesRef.current) ? defaultValuesAtRenderRef.current : defaultValuesRef.current);\n    }\n\n    return false;\n  }, []);\n  var updateAndGetDirtyState = useCallback(function (name) {\n    var shouldRender = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    if (readFormStateRef.current.isDirty || readFormStateRef.current.dirtyFields) {\n      var isFieldDirty = !deepEqual(get(defaultValuesAtRenderRef.current, name), getFieldValue(fieldsRef, name, shallowFieldsStateRef));\n      var isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n      var previousIsDirty = formStateRef.current.isDirty;\n      isFieldDirty ? set(formStateRef.current.dirtyFields, name, true) : unset(formStateRef.current.dirtyFields, name);\n      var state = {\n        isDirty: isFormDirty(),\n        dirtyFields: formStateRef.current.dirtyFields\n      };\n      var isChanged = readFormStateRef.current.isDirty && previousIsDirty !== state.isDirty || readFormStateRef.current.dirtyFields && isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name);\n\n      if (isChanged && shouldRender) {\n        formStateRef.current = Object.assign(Object.assign({}, formStateRef.current), state);\n        updateFormState(Object.assign({}, formStateRef.current));\n      }\n\n      return isChanged ? state : {};\n    }\n\n    return {};\n  }, []);\n  var executeValidation = useCallback( /*#__PURE__*/function () {\n    var _ref15 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(name, skipReRender) {\n      var error;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              if (!(process.env.NODE_ENV !== 'production')) {\n                _context2.next = 4;\n                break;\n              }\n\n              if (fieldsRef.current[name]) {\n                _context2.next = 4;\n                break;\n              }\n\n              console.warn('📋 Field is missing with `name` attribute: ', name);\n              return _context2.abrupt(\"return\", false);\n\n            case 4:\n              _context2.next = 6;\n              return validateField(fieldsRef, isValidateAllFieldCriteria, fieldsRef.current[name], shallowFieldsStateRef);\n\n            case 6:\n              _context2.t0 = name;\n              error = _context2.sent[_context2.t0];\n              shouldRenderBaseOnError(name, error, skipReRender);\n              return _context2.abrupt(\"return\", isUndefined(error));\n\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x5, _x6) {\n      return _ref15.apply(this, arguments);\n    };\n  }(), [shouldRenderBaseOnError, isValidateAllFieldCriteria]);\n  var executeSchemaOrResolverValidation = useCallback( /*#__PURE__*/function () {\n    var _ref16 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(names) {\n      var _yield$resolverRef$cu, errors, previousFormIsValid, isInputsValid, _error;\n\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return resolverRef.current(getValues(), contextRef.current, isValidateAllFieldCriteria);\n\n            case 2:\n              _yield$resolverRef$cu = _context3.sent;\n              errors = _yield$resolverRef$cu.errors;\n              previousFormIsValid = formStateRef.current.isValid;\n\n              if (!Array.isArray(names)) {\n                _context3.next = 11;\n                break;\n              }\n\n              isInputsValid = names.map(function (name) {\n                var error = get(errors, name);\n                error ? set(formStateRef.current.errors, name, error) : unset(formStateRef.current.errors, name);\n                return !error;\n              }).every(Boolean);\n              updateFormState({\n                isValid: isEmptyObject(errors),\n                errors: formStateRef.current.errors\n              });\n              return _context3.abrupt(\"return\", isInputsValid);\n\n            case 11:\n              _error = get(errors, names);\n              shouldRenderBaseOnError(names, _error, previousFormIsValid !== isEmptyObject(errors), {}, isEmptyObject(errors));\n              return _context3.abrupt(\"return\", !_error);\n\n            case 14:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x7) {\n      return _ref16.apply(this, arguments);\n    };\n  }(), [shouldRenderBaseOnError, isValidateAllFieldCriteria]);\n  var trigger = useCallback( /*#__PURE__*/function () {\n    var _ref17 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(name) {\n      var fields, result;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              fields = name || Object.keys(fieldsRef.current);\n\n              if (!resolverRef.current) {\n                _context5.next = 3;\n                break;\n              }\n\n              return _context5.abrupt(\"return\", executeSchemaOrResolverValidation(fields));\n\n            case 3:\n              if (!Array.isArray(fields)) {\n                _context5.next = 10;\n                break;\n              }\n\n              !name && (formStateRef.current.errors = {});\n              _context5.next = 7;\n              return Promise.all(fields.map( /*#__PURE__*/function () {\n                var _ref18 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(data) {\n                  return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n                    while (1) {\n                      switch (_context4.prev = _context4.next) {\n                        case 0:\n                          _context4.next = 2;\n                          return executeValidation(data, null);\n\n                        case 2:\n                          return _context4.abrupt(\"return\", _context4.sent);\n\n                        case 3:\n                        case \"end\":\n                          return _context4.stop();\n                      }\n                    }\n                  }, _callee4);\n                }));\n\n                return function (_x9) {\n                  return _ref18.apply(this, arguments);\n                };\n              }()));\n\n            case 7:\n              result = _context5.sent;\n              updateFormState();\n              return _context5.abrupt(\"return\", result.every(Boolean));\n\n            case 10:\n              _context5.next = 12;\n              return executeValidation(fields, readFormStateRef.current.isValid);\n\n            case 12:\n              return _context5.abrupt(\"return\", _context5.sent);\n\n            case 13:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function (_x8) {\n      return _ref17.apply(this, arguments);\n    };\n  }(), [executeSchemaOrResolverValidation, executeValidation]);\n  var setInternalValues = useCallback(function (name, value, _ref19) {\n    var shouldDirty = _ref19.shouldDirty,\n        shouldValidate = _ref19.shouldValidate;\n    var data = {};\n    set(data, name, value);\n\n    var _iterator4 = _createForOfIteratorHelper(getPath(name, value)),\n        _step4;\n\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var fieldName = _step4.value;\n\n        if (fieldsRef.current[fieldName]) {\n          setFieldValue(fieldName, get(data, fieldName));\n          shouldDirty && updateAndGetDirtyState(fieldName);\n          shouldValidate && trigger(fieldName);\n        }\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n  }, [trigger, setFieldValue, updateAndGetDirtyState]);\n  var setInternalValue = useCallback(function (name, value, config) {\n    !isPrimitive(value) && set(shallowFieldsStateRef.current, name, value);\n\n    if (fieldsRef.current[name]) {\n      setFieldValue(name, value);\n      config.shouldDirty && updateAndGetDirtyState(name);\n      config.shouldValidate && trigger(name);\n    } else if (!isPrimitive(value)) {\n      setInternalValues(name, value, config);\n\n      if (fieldArrayNamesRef.current.has(name)) {\n        fieldArrayDefaultValuesRef.current[name] = value;\n        resetFieldArrayFunctionRef.current[name](_defineProperty({}, name, value));\n\n        if ((readFormStateRef.current.isDirty || readFormStateRef.current.dirtyFields) && config.shouldDirty) {\n          set(formStateRef.current.dirtyFields, name, setFieldArrayDirtyFields(value, get(defaultValuesRef.current, name, []), get(formStateRef.current.dirtyFields, name, [])));\n          updateFormState({\n            isDirty: !deepEqual(Object.assign(Object.assign({}, getValues()), _defineProperty({}, name, value)), defaultValuesRef.current),\n            dirtyFields: formStateRef.current.dirtyFields\n          });\n        }\n      }\n    }\n\n    !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\n  }, [updateAndGetDirtyState, setFieldValue, setInternalValues]);\n\n  var isFieldWatched = function isFieldWatched(name) {\n    return isWatchAllRef.current || watchFieldsRef.current.has(name) || watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n  };\n\n  var renderWatchedInputs = function renderWatchedInputs(name) {\n    var found = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n    if (!isEmptyObject(useWatchFieldsRef.current)) {\n      for (var key in useWatchFieldsRef.current) {\n        if (!name || !useWatchFieldsRef.current[key].size || useWatchFieldsRef.current[key].has(name) || useWatchFieldsRef.current[key].has(getFieldArrayParentName(name))) {\n          useWatchRenderFunctionsRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue(name, value, config) {\n    setInternalValue(name, value, config || {});\n    isFieldWatched(name) && updateFormState();\n    renderWatchedInputs(name);\n  }\n\n  handleChangeRef.current = handleChangeRef.current ? handleChangeRef.current : /*#__PURE__*/function () {\n    var _ref21 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(_ref20) {\n      var type, target, name, field, error, isValid, isBlurEvent, shouldSkipValidation, state, shouldRender, _yield$resolverRef$cu2, errors, previousFormIsValid, parentNodeName, currentError;\n\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              type = _ref20.type, target = _ref20.target;\n              name = target.name;\n              field = fieldsRef.current[name];\n\n              if (!field) {\n                _context6.next = 31;\n                break;\n              }\n\n              isBlurEvent = type === EVENTS.BLUR;\n              shouldSkipValidation = skipValidation(Object.assign({\n                isBlurEvent: isBlurEvent,\n                isReValidateOnChange: isReValidateOnChange,\n                isReValidateOnBlur: isReValidateOnBlur,\n                isTouched: !!get(formStateRef.current.touched, name),\n                isSubmitted: formStateRef.current.isSubmitted\n              }, modeRef.current));\n              state = updateAndGetDirtyState(name, false);\n              shouldRender = !isEmptyObject(state) || isFieldWatched(name);\n\n              if (isBlurEvent && !get(formStateRef.current.touched, name) && readFormStateRef.current.touched) {\n                set(formStateRef.current.touched, name, true);\n                state = Object.assign(Object.assign({}, state), {\n                  touched: formStateRef.current.touched\n                });\n              }\n\n              if (!shouldUnregister && isCheckBoxInput(target)) {\n                set(shallowFieldsStateRef.current, name, getFieldValue(fieldsRef, name));\n              }\n\n              if (!shouldSkipValidation) {\n                _context6.next = 13;\n                break;\n              }\n\n              renderWatchedInputs(name);\n              return _context6.abrupt(\"return\", (!isEmptyObject(state) || shouldRender && isEmptyObject(state)) && updateFormState(state));\n\n            case 13:\n              if (!resolverRef.current) {\n                _context6.next = 25;\n                break;\n              }\n\n              _context6.next = 16;\n              return resolverRef.current(getValues(), contextRef.current, isValidateAllFieldCriteria);\n\n            case 16:\n              _yield$resolverRef$cu2 = _context6.sent;\n              errors = _yield$resolverRef$cu2.errors;\n              previousFormIsValid = formStateRef.current.isValid;\n              error = get(errors, name);\n\n              if (isCheckBoxInput(target) && !error && resolverRef.current) {\n                parentNodeName = getFieldArrayParentName(name);\n                currentError = get(errors, parentNodeName, {});\n                currentError.type && currentError.message && (error = currentError);\n\n                if (parentNodeName && (currentError || get(formStateRef.current.errors, parentNodeName))) {\n                  name = parentNodeName;\n                }\n              }\n\n              isValid = isEmptyObject(errors);\n              previousFormIsValid !== isValid && (shouldRender = true);\n              _context6.next = 29;\n              break;\n\n            case 25:\n              _context6.next = 27;\n              return validateField(fieldsRef, isValidateAllFieldCriteria, field, shallowFieldsStateRef);\n\n            case 27:\n              _context6.t0 = name;\n              error = _context6.sent[_context6.t0];\n\n            case 29:\n              renderWatchedInputs(name);\n              shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\n\n            case 31:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function (_x10) {\n      return _ref21.apply(this, arguments);\n    };\n  }();\n\n  function setFieldArrayDefaultValues(data) {\n    if (!shouldUnregister) {\n      var copy = cloneObject(data, isWeb);\n\n      var _iterator5 = _createForOfIteratorHelper(fieldArrayNamesRef.current),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var value = _step5.value;\n\n          if (isKey(value) && !copy[value]) {\n            copy = Object.assign(Object.assign({}, copy), _defineProperty({}, value, []));\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      return copy;\n    }\n\n    return data;\n  }\n\n  function getValues(payload) {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\n    }\n\n    if (Array.isArray(payload)) {\n      var data = {};\n\n      var _iterator6 = _createForOfIteratorHelper(payload),\n          _step6;\n\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var _name = _step6.value;\n          set(data, _name, getFieldValue(fieldsRef, _name, shallowFieldsStateRef));\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n\n      return data;\n    }\n\n    return setFieldArrayDefaultValues(getFieldsValues(fieldsRef, cloneObject(shallowFieldsStateRef.current, isWeb), shouldUnregister));\n  }\n\n  var validateResolver = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n    var values,\n        _yield$resolverRef$cu3,\n        errors,\n        isValid,\n        _args7 = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            values = _args7.length > 0 && _args7[0] !== undefined ? _args7[0] : {};\n            _context7.next = 3;\n            return resolverRef.current(Object.assign(Object.assign({}, getValues()), values), contextRef.current, isValidateAllFieldCriteria);\n\n          case 3:\n            _yield$resolverRef$cu3 = _context7.sent;\n            errors = _yield$resolverRef$cu3.errors;\n            isValid = isEmptyObject(errors);\n            formStateRef.current.isValid !== isValid && updateFormState({\n              isValid: isValid\n            });\n\n          case 7:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7);\n  })), [isValidateAllFieldCriteria]);\n  var removeFieldEventListener = useCallback(function (field, forceDelete) {\n    return findRemovedFieldAndRemoveListener(fieldsRef, handleChangeRef.current, field, shallowFieldsStateRef, shouldUnregister, forceDelete);\n  }, [shouldUnregister]);\n  var updateWatchedValue = useCallback(function (name) {\n    if (isWatchAllRef.current) {\n      updateFormState();\n    } else if (watchFieldsRef) {\n      var _iterator7 = _createForOfIteratorHelper(watchFieldsRef.current),\n          _step7;\n\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var watchField = _step7.value;\n\n          if (watchField.startsWith(name)) {\n            updateFormState();\n            break;\n          }\n        }\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n\n      renderWatchedInputs(name);\n    }\n  }, []);\n  var removeFieldEventListenerAndRef = useCallback(function (field, forceDelete) {\n    if (field) {\n      removeFieldEventListener(field, forceDelete);\n\n      if (shouldUnregister && !compact(field.options || []).length) {\n        unset(defaultValuesAtRenderRef.current, field.ref.name);\n        unset(validFieldsRef.current, field.ref.name);\n        unset(fieldsWithValidationRef.current, field.ref.name);\n        unset(formStateRef.current.errors, field.ref.name);\n        set(formStateRef.current.dirtyFields, field.ref.name, true);\n        updateFormState({\n          errors: formStateRef.current.errors,\n          isDirty: isFormDirty(),\n          dirtyFields: formStateRef.current.dirtyFields\n        });\n        readFormStateRef.current.isValid && resolverRef.current && validateResolver();\n        updateWatchedValue(field.ref.name);\n      }\n    }\n  }, [validateResolver, removeFieldEventListener]);\n\n  function clearErrors(name) {\n    name && (Array.isArray(name) ? name : [name]).forEach(function (inputName) {\n      return fieldsRef.current[inputName] && isKey(inputName) ? delete formStateRef.current.errors[inputName] : unset(formStateRef.current.errors, inputName);\n    });\n    updateFormState({\n      errors: name ? formStateRef.current.errors : {}\n    });\n  }\n\n  function setError(name, error) {\n    var ref = (fieldsRef.current[name] || {}).ref;\n    set(formStateRef.current.errors, name, Object.assign(Object.assign({}, error), {\n      ref: ref\n    }));\n    updateFormState({\n      isValid: false,\n      errors: formStateRef.current.errors\n    });\n    error.shouldFocus && ref && ref.focus && ref.focus();\n  }\n\n  var watchInternal = useCallback(function (fieldNames, defaultValue, watchId) {\n    var watchFields = watchId ? useWatchFieldsRef.current[watchId] : watchFieldsRef.current;\n    var combinedDefaultValues = isUndefined(defaultValue) ? defaultValuesRef.current : defaultValue;\n    var fieldValues = getFieldsValues(fieldsRef, cloneObject(shallowFieldsStateRef.current, isWeb), shouldUnregister, false, fieldNames);\n\n    if (isString(fieldNames)) {\n      if (fieldArrayNamesRef.current.has(fieldNames)) {\n        var fieldArrayValue = get(fieldArrayValuesRef.current, fieldNames, []);\n        fieldValues = fieldArrayValue.length !== compact(get(fieldValues, fieldNames, [])).length || !fieldArrayValue.length ? fieldArrayValuesRef.current : fieldValues;\n      }\n\n      return assignWatchFields(fieldValues, fieldNames, watchFields, isUndefined(defaultValue) ? get(combinedDefaultValues, fieldNames) : defaultValue, true);\n    }\n\n    if (Array.isArray(fieldNames)) {\n      return fieldNames.reduce(function (previous, name) {\n        return Object.assign(Object.assign({}, previous), _defineProperty({}, name, assignWatchFields(fieldValues, name, watchFields, combinedDefaultValues)));\n      }, {});\n    }\n\n    isWatchAllRef.current = isUndefined(watchId);\n    return transformToNestObject(!isEmptyObject(fieldValues) && fieldValues || combinedDefaultValues);\n  }, []);\n\n  function watch(fieldNames, defaultValue) {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(name) {\n    var _iterator8 = _createForOfIteratorHelper(Array.isArray(name) ? name : [name]),\n        _step8;\n\n    try {\n      for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n        var fieldName = _step8.value;\n        removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\n      }\n    } catch (err) {\n      _iterator8.e(err);\n    } finally {\n      _iterator8.f();\n    }\n  }\n\n  function registerFieldRef(ref) {\n    var validateOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn('📋 Field is missing `name` attribute', ref, \"https://react-hook-form.com/api#useForm\");\n      }\n\n      if (fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) && !RegExp(\"^\".concat(ref.name.split(/\\[\\d+\\]$/)[0], \"[\\\\d+].\\\\w+\").replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]')).test(ref.name)) {\n        return console.warn('📋 `name` prop should be in object shape: name=\"test[index].name\"', ref, 'https://react-hook-form.com/api#useFieldArray');\n      }\n    }\n\n    var name = ref.name,\n        type = ref.type,\n        value = ref.value;\n    var fieldRefAndValidationOptions = Object.assign({\n      ref: ref\n    }, validateOptions);\n    var fields = fieldsRef.current;\n    var isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    var isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n\n    var compareRef = function compareRef(currentRef) {\n      return isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    };\n\n    var field = fields[name];\n    var isEmptyDefaultValue = true;\n    var defaultValue;\n\n    if (field && (isRadioOrCheckbox ? Array.isArray(field.options) && compact(field.options).find(function (option) {\n      return value === option.ref.value && compareRef(option.ref);\n    }) : compareRef(field.ref))) {\n      fields[name] = Object.assign(Object.assign({}, field), validateOptions);\n      return;\n    }\n\n    if (type) {\n      field = isRadioOrCheckbox ? Object.assign({\n        options: [].concat(_toConsumableArray(compact(field && field.options || [])), [{\n          ref: ref\n        }]),\n        ref: {\n          type: type,\n          name: name\n        }\n      }, validateOptions) : Object.assign({}, fieldRefAndValidationOptions);\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n    var isEmptyUnmountFields = isUndefined(get(shallowFieldsStateRef.current, name));\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(isEmptyUnmountFields ? defaultValuesRef.current : shallowFieldsStateRef.current, name);\n      isEmptyDefaultValue = isUndefined(defaultValue);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(name, defaultValue);\n      }\n    }\n\n    if (!isEmptyObject(validateOptions)) {\n      set(fieldsWithValidationRef.current, name, true);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(fieldsRef, isValidateAllFieldCriteria, field, shallowFieldsStateRef).then(function (error) {\n          var previousFormIsValid = formStateRef.current.isValid;\n          isEmptyObject(error) ? set(validFieldsRef.current, name, true) : unset(validFieldsRef.current, name);\n\n          if (previousFormIsValid !== isEmptyObject(error)) {\n            updateFormState();\n          }\n        });\n      }\n    }\n\n    if (!defaultValuesAtRenderRef.current[name] && !(isFieldArray && isEmptyDefaultValue)) {\n      var fieldValue = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n      set(defaultValuesAtRenderRef.current, name, isEmptyDefaultValue ? isObject(fieldValue) ? Object.assign({}, fieldValue) : fieldValue : defaultValue);\n      !isFieldArray && unset(formStateRef.current.dirtyFields, name);\n    }\n\n    if (type) {\n      attachEventListeners(isRadioOrCheckbox && field.options ? field.options[field.options.length - 1] : field, isRadioOrCheckbox || isSelectInput(ref), handleChangeRef.current);\n    }\n  }\n\n  function register(refOrValidationOptions, rules) {\n    if (!isWindowUndefined) {\n      if (isString(refOrValidationOptions)) {\n        registerFieldRef({\n          name: refOrValidationOptions\n        }, rules);\n      } else if (isObject(refOrValidationOptions) && 'name' in refOrValidationOptions) {\n        registerFieldRef(refOrValidationOptions, rules);\n      } else {\n        return function (ref) {\n          return ref && registerFieldRef(ref, refOrValidationOptions);\n        };\n      }\n    }\n  }\n\n  var handleSubmit = useCallback(function (onValid, onInvalid) {\n    return /*#__PURE__*/function () {\n      var _ref23 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(e) {\n        var fieldErrors, fieldValues, _yield$resolverRef$cu4, errors, values, _i4, _Object$values2, field, _name2, fieldError;\n\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                if (e && e.preventDefault) {\n                  e.preventDefault();\n                  e.persist();\n                }\n\n                fieldErrors = {};\n                fieldValues = setFieldArrayDefaultValues(getFieldsValues(fieldsRef, cloneObject(shallowFieldsStateRef.current, isWeb), shouldUnregister, true));\n                readFormStateRef.current.isSubmitting && updateFormState({\n                  isSubmitting: true\n                });\n                _context8.prev = 4;\n\n                if (!resolverRef.current) {\n                  _context8.next = 15;\n                  break;\n                }\n\n                _context8.next = 8;\n                return resolverRef.current(fieldValues, contextRef.current, isValidateAllFieldCriteria);\n\n              case 8:\n                _yield$resolverRef$cu4 = _context8.sent;\n                errors = _yield$resolverRef$cu4.errors;\n                values = _yield$resolverRef$cu4.values;\n                formStateRef.current.errors = fieldErrors = errors;\n                fieldValues = values;\n                _context8.next = 27;\n                break;\n\n              case 15:\n                _i4 = 0, _Object$values2 = Object.values(fieldsRef.current);\n\n              case 16:\n                if (!(_i4 < _Object$values2.length)) {\n                  _context8.next = 27;\n                  break;\n                }\n\n                field = _Object$values2[_i4];\n\n                if (!field) {\n                  _context8.next = 24;\n                  break;\n                }\n\n                _name2 = field.ref.name;\n                _context8.next = 22;\n                return validateField(fieldsRef, isValidateAllFieldCriteria, field, shallowFieldsStateRef);\n\n              case 22:\n                fieldError = _context8.sent;\n\n                if (fieldError[_name2]) {\n                  set(fieldErrors, _name2, fieldError[_name2]);\n                  unset(validFieldsRef.current, _name2);\n                } else if (get(fieldsWithValidationRef.current, _name2)) {\n                  unset(formStateRef.current.errors, _name2);\n                  set(validFieldsRef.current, _name2, true);\n                }\n\n              case 24:\n                _i4++;\n                _context8.next = 16;\n                break;\n\n              case 27:\n                if (!(isEmptyObject(fieldErrors) && Object.keys(formStateRef.current.errors).every(function (name) {\n                  return name in fieldsRef.current;\n                }))) {\n                  _context8.next = 33;\n                  break;\n                }\n\n                updateFormState({\n                  errors: {},\n                  isSubmitting: true\n                });\n                _context8.next = 31;\n                return onValid(fieldValues, e);\n\n              case 31:\n                _context8.next = 39;\n                break;\n\n              case 33:\n                formStateRef.current.errors = Object.assign(Object.assign({}, formStateRef.current.errors), fieldErrors);\n                _context8.t0 = onInvalid;\n\n                if (!_context8.t0) {\n                  _context8.next = 38;\n                  break;\n                }\n\n                _context8.next = 38;\n                return onInvalid(formStateRef.current.errors, e);\n\n              case 38:\n                shouldFocusError && focusOnErrorField(fieldsRef.current, formStateRef.current.errors);\n\n              case 39:\n                _context8.prev = 39;\n                formStateRef.current.isSubmitting = false;\n                updateFormState({\n                  isSubmitted: true,\n                  isSubmitting: false,\n                  isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n                  errors: formStateRef.current.errors,\n                  submitCount: formStateRef.current.submitCount + 1\n                });\n                return _context8.finish(39);\n\n              case 43:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, null, [[4,, 39, 43]]);\n      }));\n\n      return function (_x11) {\n        return _ref23.apply(this, arguments);\n      };\n    }();\n  }, [shouldFocusError, isValidateAllFieldCriteria]);\n\n  var resetRefs = function resetRefs(_ref24) {\n    var errors = _ref24.errors,\n        isDirty = _ref24.isDirty,\n        isSubmitted = _ref24.isSubmitted,\n        touched = _ref24.touched,\n        isValid = _ref24.isValid,\n        submitCount = _ref24.submitCount,\n        dirtyFields = _ref24.dirtyFields;\n\n    if (!isValid) {\n      validFieldsRef.current = {};\n      fieldsWithValidationRef.current = {};\n    }\n\n    defaultValuesAtRenderRef.current = {};\n    fieldArrayDefaultValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n    updateFormState({\n      submitCount: submitCount ? formStateRef.current.submitCount : 0,\n      isDirty: isDirty ? formStateRef.current.isDirty : false,\n      isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\n      isValid: isValid ? formStateRef.current.isValid : false,\n      dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\n      touched: touched ? formStateRef.current.touched : {},\n      errors: errors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false\n    });\n  };\n\n  var reset = function reset(values) {\n    var omitResetState = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (isWeb) {\n      for (var _i5 = 0, _Object$values3 = Object.values(fieldsRef.current); _i5 < _Object$values3.length; _i5++) {\n        var field = _Object$values3[_i5];\n\n        if (field) {\n          var _ref25 = field.ref,\n              options = field.options;\n          var inputRef = isRadioOrCheckboxFunction(_ref25) && Array.isArray(options) ? options[0].ref : _ref25;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form').reset();\n              break;\n            } catch (_a) {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n    defaultValuesRef.current = cloneObject(values || defaultValuesRef.current, isWeb);\n    values && renderWatchedInputs('');\n    Object.values(resetFieldArrayFunctionRef.current).forEach(function (resetFieldArray) {\n      return isFunction(resetFieldArray) && resetFieldArray();\n    });\n    shallowFieldsStateRef.current = shouldUnregister ? {} : cloneObject(values, isWeb) || {};\n    resetRefs(omitResetState);\n  };\n\n  useEffect(function () {\n    resolver && readFormStateRef.current.isValid && validateResolver();\n    observerRef.current = observerRef.current || !isWeb ? observerRef.current : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\n  }, [removeFieldEventListenerAndRef, defaultValuesRef.current]);\n  useEffect(function () {\n    return function () {\n      isUnMount.current = true;\n      observerRef.current && observerRef.current.disconnect();\n\n      if (process.env.NODE_ENV !== 'production') {\n        return;\n      }\n\n      Object.values(fieldsRef.current).forEach(function (field) {\n        return removeFieldEventListenerAndRef(field, true);\n      });\n    };\n  }, []);\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    formState.isValid = deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) && isEmptyObject(formStateRef.current.errors);\n  }\n\n  var commonProps = {\n    trigger: trigger,\n    setValue: useCallback(setValue, [setInternalValue, trigger]),\n    getValues: useCallback(getValues, []),\n    register: useCallback(register, [defaultValuesRef.current]),\n    unregister: useCallback(unregister, [])\n  };\n  var control = useMemo(function () {\n    return Object.assign({\n      isFormDirty: isFormDirty,\n      updateWatchedValue: updateWatchedValue,\n      shouldUnregister: shouldUnregister,\n      updateFormState: updateFormState,\n      removeFieldEventListener: removeFieldEventListener,\n      watchInternal: watchInternal,\n      mode: modeRef.current,\n      reValidateMode: {\n        isReValidateOnBlur: isReValidateOnBlur,\n        isReValidateOnChange: isReValidateOnChange\n      },\n      validateResolver: resolver ? validateResolver : undefined,\n      fieldsRef: fieldsRef,\n      resetFieldArrayFunctionRef: resetFieldArrayFunctionRef,\n      useWatchFieldsRef: useWatchFieldsRef,\n      useWatchRenderFunctionsRef: useWatchRenderFunctionsRef,\n      fieldArrayDefaultValuesRef: fieldArrayDefaultValuesRef,\n      validFieldsRef: validFieldsRef,\n      fieldsWithValidationRef: fieldsWithValidationRef,\n      fieldArrayNamesRef: fieldArrayNamesRef,\n      readFormStateRef: readFormStateRef,\n      formStateRef: formStateRef,\n      defaultValuesRef: defaultValuesRef,\n      shallowFieldsStateRef: shallowFieldsStateRef,\n      fieldArrayValuesRef: fieldArrayValuesRef\n    }, commonProps);\n  }, [defaultValuesRef.current, updateWatchedValue, shouldUnregister, removeFieldEventListener, watchInternal]);\n  return Object.assign({\n    watch: watch,\n    control: control,\n    formState: isProxyEnabled ? new Proxy(formState, {\n      get: function get(obj, prop) {\n        if (process.env.NODE_ENV !== 'production') {\n          if (prop === 'isValid' && isOnSubmit) {\n            console.warn('📋 `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState');\n          }\n        }\n\n        if (prop in obj) {\n          readFormStateRef.current[prop] = true;\n          return obj[prop];\n        }\n\n        return undefined;\n      }\n    }) : formState,\n    handleSubmit: handleSubmit,\n    reset: useCallback(reset, []),\n    clearErrors: useCallback(clearErrors, []),\n    setError: useCallback(setError, []),\n    errors: formState.errors\n  }, commonProps);\n}\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\n\nfunction __rest(s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n}\n\nvar FormContext = createContext(null);\nFormContext.displayName = 'RHFContext';\n\nvar useFormContext = function useFormContext() {\n  return useContext(FormContext);\n};\n\nvar FormProvider = function FormProvider(_a) {\n  var children = _a.children,\n      props = __rest(_a, [\"children\"]);\n\n  return createElement(FormContext.Provider, {\n    value: Object.assign({}, props)\n  }, children);\n};\n\nvar generateId = function generateId() {\n  var d = typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = (Math.random() * 16 + d) % 16 | 0;\n    return (c == 'x' ? r : r & 0x3 | 0x8).toString(16);\n  });\n};\n\nfunction removeAtIndexes(data, indexes) {\n  var i = 0;\n\n  var temp = _toConsumableArray(data);\n\n  var _iterator9 = _createForOfIteratorHelper(indexes),\n      _step9;\n\n  try {\n    for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n      var index = _step9.value;\n      temp.splice(index - i, 1);\n      i++;\n    }\n  } catch (err) {\n    _iterator9.e(err);\n  } finally {\n    _iterator9.f();\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nvar removeArrayAt = function removeArrayAt(data, index) {\n  return isUndefined(index) ? [] : removeAtIndexes(data, (Array.isArray(index) ? index : [index]).sort());\n};\n\nvar moveArrayAt = function moveArrayAt(data, from, to) {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n\nvar swapArrayAt = function swapArrayAt(data, indexA, indexB) {\n  var temp = [data[indexB], data[indexA]];\n  data[indexA] = temp[0];\n  data[indexB] = temp[1];\n};\n\nfunction prepend(data, value) {\n  return [].concat(_toConsumableArray(Array.isArray(value) ? value : [value || undefined]), _toConsumableArray(data));\n}\n\nfunction insert(data, index, value) {\n  return [].concat(_toConsumableArray(data.slice(0, index)), _toConsumableArray(Array.isArray(value) ? value : [value || undefined]), _toConsumableArray(data.slice(index)));\n}\n\nvar fillEmptyArray = function fillEmptyArray(value) {\n  return Array.isArray(value) ? Array(value.length).fill(undefined) : undefined;\n};\n\nfunction mapValueToBoolean(value) {\n  if (isObject(value)) {\n    var object = {};\n\n    for (var key in value) {\n      object[key] = true;\n    }\n\n    return [object];\n  }\n\n  return [true];\n}\n\nvar fillBooleanArray = function fillBooleanArray(value) {\n  return (Array.isArray(value) ? value : [value]).map(mapValueToBoolean).flat();\n};\n\nvar mapIds = function mapIds() {\n  var values = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  var keyName = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (process.env.NODE_ENV !== 'production') {\n    var _iterator10 = _createForOfIteratorHelper(values),\n        _step10;\n\n    try {\n      for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n        var value = _step10.value;\n\n        if (typeof value === 'object') {\n          if (keyName in value) {\n            console.warn(\"\\uD83D\\uDCCB useFieldArray fieldValues contain the keyName `\".concat(keyName, \"` which is reserved for use by useFieldArray. https://react-hook-form.com/api#useFieldArray\"));\n            break;\n          }\n        } else {\n          console.warn(\"\\uD83D\\uDCCB useFieldArray input's name should be in object shape instead of flat array. https://react-hook-form.com/api#useFieldArray\");\n          break;\n        }\n      }\n    } catch (err) {\n      _iterator10.e(err);\n    } finally {\n      _iterator10.f();\n    }\n  }\n\n  return values.map(function (value) {\n    return Object.assign(_defineProperty({}, keyName, generateId()), value);\n  });\n};\n\nvar useFieldArray = function useFieldArray(_ref26) {\n  var control = _ref26.control,\n      name = _ref26.name,\n      _ref26$keyName = _ref26.keyName,\n      keyName = _ref26$keyName === void 0 ? 'id' : _ref26$keyName;\n  var methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error('📋 useFieldArray is missing `control` prop. https://react-hook-form.com/api#useFieldArray');\n    }\n  }\n\n  var focusIndexRef = useRef(-1);\n\n  var _ref27 = control || methods.control,\n      isFormDirty = _ref27.isFormDirty,\n      updateWatchedValue = _ref27.updateWatchedValue,\n      resetFieldArrayFunctionRef = _ref27.resetFieldArrayFunctionRef,\n      fieldArrayNamesRef = _ref27.fieldArrayNamesRef,\n      fieldsRef = _ref27.fieldsRef,\n      defaultValuesRef = _ref27.defaultValuesRef,\n      removeFieldEventListener = _ref27.removeFieldEventListener,\n      formStateRef = _ref27.formStateRef,\n      shallowFieldsStateRef = _ref27.shallowFieldsStateRef,\n      updateFormState = _ref27.updateFormState,\n      readFormStateRef = _ref27.readFormStateRef,\n      validFieldsRef = _ref27.validFieldsRef,\n      fieldsWithValidationRef = _ref27.fieldsWithValidationRef,\n      fieldArrayDefaultValuesRef = _ref27.fieldArrayDefaultValuesRef,\n      validateResolver = _ref27.validateResolver,\n      getValues = _ref27.getValues,\n      shouldUnregister = _ref27.shouldUnregister,\n      fieldArrayValuesRef = _ref27.fieldArrayValuesRef;\n\n  var fieldArrayParentName = getFieldArrayParentName(name);\n  var memoizedDefaultValues = useRef(_toConsumableArray(get(fieldArrayDefaultValuesRef.current, fieldArrayParentName) ? get(fieldArrayDefaultValuesRef.current, name, []) : get(shouldUnregister ? defaultValuesRef.current : shallowFieldsStateRef.current, name, [])));\n\n  var _useState3 = useState(mapIds(memoizedDefaultValues.current, keyName)),\n      _useState4 = _slicedToArray(_useState3, 2),\n      fields = _useState4[0],\n      setFields = _useState4[1];\n\n  set(fieldArrayValuesRef.current, name, fields);\n\n  var omitKey = function omitKey(fields) {\n    return fields.map(function () {\n      var _a = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n      var _b = keyName,\n          omitted = _a[_b],\n          rest = __rest(_a, [typeof _b === \"symbol\" ? _b : _b + \"\"]);\n\n      return rest;\n    });\n  };\n\n  var getFieldArrayValue = useCallback(function () {\n    return get(fieldArrayValuesRef.current, name, []);\n  }, []);\n\n  var getCurrentFieldsValues = function getCurrentFieldsValues() {\n    return get(getValues(), name, getFieldArrayValue()).map(function (item, index) {\n      return Object.assign(Object.assign({}, getFieldArrayValue()[index]), item);\n    });\n  };\n\n  fieldArrayNamesRef.current.add(name);\n\n  if (fieldArrayParentName && !get(fieldArrayDefaultValuesRef.current, fieldArrayParentName)) {\n    set(fieldArrayDefaultValuesRef.current, fieldArrayParentName, cloneObject(get(defaultValuesRef.current, fieldArrayParentName)));\n  }\n\n  var setFieldAndValidState = function setFieldAndValidState(fieldsValues) {\n    setFields(fieldsValues);\n    set(fieldArrayValuesRef.current, name, fieldsValues);\n\n    if (readFormStateRef.current.isValid && validateResolver) {\n      var values = getValues();\n      set(values, name, fieldsValues);\n      validateResolver(values);\n    }\n  };\n\n  var resetFields = function resetFields() {\n    for (var key in fieldsRef.current) {\n      isMatchFieldArrayName(key, name) && removeFieldEventListener(fieldsRef.current[key], true);\n    }\n  };\n\n  var cleanup = function cleanup(ref) {\n    return !compact(get(ref, name, [])).length && unset(ref, name);\n  };\n\n  var updateDirtyFieldsWithDefaultValues = function updateDirtyFieldsWithDefaultValues(updatedFieldArrayValues) {\n    if (updatedFieldArrayValues) {\n      set(formStateRef.current.dirtyFields, name, setFieldArrayDirtyFields(omitKey(updatedFieldArrayValues), get(defaultValuesRef.current, name, []), get(formStateRef.current.dirtyFields, name, [])));\n    }\n  };\n\n  var batchStateUpdate = function batchStateUpdate(method, args, updatedFieldValues) {\n    var updatedFormValues = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];\n    var shouldSet = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : true;\n    var shouldUpdateValid = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : false;\n\n    if (get(shallowFieldsStateRef.current, name)) {\n      var output = method(get(shallowFieldsStateRef.current, name), args.argA, args.argB);\n      shouldSet && set(shallowFieldsStateRef.current, name, output);\n    }\n\n    if (get(fieldArrayDefaultValuesRef.current, name)) {\n      var _output = method(get(fieldArrayDefaultValuesRef.current, name), args.argA, args.argB);\n\n      shouldSet && set(fieldArrayDefaultValuesRef.current, name, _output);\n      cleanup(fieldArrayDefaultValuesRef.current);\n    }\n\n    if (Array.isArray(get(formStateRef.current.errors, name))) {\n      var _output2 = method(get(formStateRef.current.errors, name), args.argA, args.argB);\n\n      shouldSet && set(formStateRef.current.errors, name, _output2);\n      cleanup(formStateRef.current.errors);\n    }\n\n    if (readFormStateRef.current.touched && get(formStateRef.current.touched, name)) {\n      var _output3 = method(get(formStateRef.current.touched, name), args.argA, args.argB);\n\n      shouldSet && set(formStateRef.current.touched, name, _output3);\n      cleanup(formStateRef.current.touched);\n    }\n\n    if (readFormStateRef.current.dirtyFields || readFormStateRef.current.isDirty) {\n      var _output4 = method(get(formStateRef.current.dirtyFields, name, []), args.argC, args.argD);\n\n      shouldSet && set(formStateRef.current.dirtyFields, name, _output4);\n      updateDirtyFieldsWithDefaultValues(updatedFieldValues);\n      cleanup(formStateRef.current.dirtyFields);\n    }\n\n    if (shouldUpdateValid && readFormStateRef.current.isValid && !validateResolver) {\n      set(validFieldsRef.current, name, method(get(validFieldsRef.current, name, []), args.argA));\n      cleanup(validFieldsRef.current);\n      set(fieldsWithValidationRef.current, name, method(get(fieldsWithValidationRef.current, name, []), args.argA));\n      cleanup(fieldsWithValidationRef.current);\n    }\n\n    updateFormState({\n      errors: formStateRef.current.errors,\n      dirtyFields: formStateRef.current.dirtyFields,\n      isDirty: isFormDirty(name, omitKey(updatedFormValues)),\n      touched: formStateRef.current.touched\n    });\n  };\n\n  var append = function append(value) {\n    var shouldFocus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var updateFormValues = [].concat(_toConsumableArray(getCurrentFieldsValues()), _toConsumableArray(mapIds(Array.isArray(value) ? value : [value], keyName)));\n    setFieldAndValidState(updateFormValues);\n\n    if (readFormStateRef.current.dirtyFields || readFormStateRef.current.isDirty) {\n      updateDirtyFieldsWithDefaultValues(updateFormValues);\n      updateFormState({\n        isDirty: true,\n        dirtyFields: formStateRef.current.dirtyFields\n      });\n    }\n\n    !shouldUnregister && set(shallowFieldsStateRef.current, name, [].concat(_toConsumableArray(get(shallowFieldsStateRef.current, name) || []), [value]));\n    focusIndexRef.current = shouldFocus ? fields.length : -1;\n  };\n\n  var prepend$1 = function prepend$1(value) {\n    var shouldFocus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    var emptyArray = fillEmptyArray(value);\n    var updatedFieldArrayValues = prepend(getCurrentFieldsValues(), mapIds(Array.isArray(value) ? value : [value], keyName));\n    setFieldAndValidState(updatedFieldArrayValues);\n    resetFields();\n    batchStateUpdate(prepend, {\n      argA: emptyArray,\n      argC: fillBooleanArray(value)\n    }, updatedFieldArrayValues);\n    focusIndexRef.current = shouldFocus ? 0 : -1;\n  };\n\n  var remove = function remove(index) {\n    var fieldValues = getCurrentFieldsValues();\n    var updatedFieldValues = removeArrayAt(fieldValues, index);\n    setFieldAndValidState(updatedFieldValues);\n    resetFields();\n    batchStateUpdate(removeArrayAt, {\n      argA: index,\n      argC: index\n    }, updatedFieldValues, removeArrayAt(fieldValues, index), true, true);\n  };\n\n  var insert$1 = function insert$1(index, value) {\n    var shouldFocus = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    var emptyArray = fillEmptyArray(value);\n    var fieldValues = getCurrentFieldsValues();\n    var updatedFieldArrayValues = insert(fieldValues, index, mapIds(Array.isArray(value) ? value : [value], keyName));\n    setFieldAndValidState(updatedFieldArrayValues);\n    resetFields();\n    batchStateUpdate(insert, {\n      argA: index,\n      argB: emptyArray,\n      argC: index,\n      argD: fillBooleanArray(value)\n    }, updatedFieldArrayValues, insert(fieldValues, index));\n    focusIndexRef.current = shouldFocus ? index : -1;\n  };\n\n  var swap = function swap(indexA, indexB) {\n    var fieldValues = getCurrentFieldsValues();\n    swapArrayAt(fieldValues, indexA, indexB);\n    resetFields();\n    setFieldAndValidState(_toConsumableArray(fieldValues));\n    batchStateUpdate(swapArrayAt, {\n      argA: indexA,\n      argB: indexB,\n      argC: indexA,\n      argD: indexB\n    }, undefined, fieldValues, false);\n  };\n\n  var move = function move(from, to) {\n    var fieldValues = getCurrentFieldsValues();\n    moveArrayAt(fieldValues, from, to);\n    resetFields();\n    setFieldAndValidState(_toConsumableArray(fieldValues));\n    batchStateUpdate(moveArrayAt, {\n      argA: from,\n      argB: to,\n      argC: from,\n      argD: to\n    }, undefined, fieldValues, false);\n  };\n\n  useEffect(function () {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!name) {\n        console.warn('📋 useFieldArray is missing `name` attribute. https://react-hook-form.com/api#useFieldArray');\n      }\n    }\n\n    var defaultValues = get(fieldArrayDefaultValuesRef.current, name);\n\n    if (defaultValues && fields.length < defaultValues.length) {\n      defaultValues.pop();\n      set(fieldArrayDefaultValuesRef.current, name, defaultValues);\n    }\n\n    updateWatchedValue(name);\n\n    if (focusIndexRef.current > -1) {\n      for (var key in fieldsRef.current) {\n        var field = fieldsRef.current[key];\n\n        if (key.startsWith(\"\".concat(name, \"[\").concat(focusIndexRef.current, \"]\")) && field.ref.focus) {\n          field.ref.focus();\n          break;\n        }\n      }\n    }\n\n    focusIndexRef.current = -1;\n  }, [fields, name]);\n  useEffect(function () {\n    var resetFunctions = resetFieldArrayFunctionRef.current;\n    var fieldArrayNames = fieldArrayNamesRef.current;\n\n    if (!getFieldArrayParentName(name)) {\n      resetFunctions[name] = function (data) {\n        resetFields();\n        !data && unset(fieldArrayDefaultValuesRef.current, name);\n        unset(shallowFieldsStateRef.current, name);\n        memoizedDefaultValues.current = get(data || defaultValuesRef.current, name);\n        setFields(mapIds(memoizedDefaultValues.current, keyName));\n      };\n    }\n\n    return function () {\n      resetFields();\n      delete resetFunctions[name];\n      unset(fieldArrayValuesRef, name);\n      fieldArrayNames.delete(name);\n    };\n  }, []);\n  return {\n    swap: useCallback(swap, [name]),\n    move: useCallback(move, [name]),\n    prepend: useCallback(prepend$1, [name]),\n    append: useCallback(append, [name, fields]),\n    remove: useCallback(remove, [name]),\n    insert: useCallback(insert$1, [name]),\n    fields: fields\n  };\n};\n\nfunction useWatch(_ref28) {\n  var control = _ref28.control,\n      name = _ref28.name,\n      defaultValue = _ref28.defaultValue;\n  var methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error('📋 useWatch is missing `control` prop. https://react-hook-form.com/api#useWatch');\n    }\n  }\n\n  var _ref29 = control || methods.control,\n      useWatchFieldsRef = _ref29.useWatchFieldsRef,\n      useWatchRenderFunctionsRef = _ref29.useWatchRenderFunctionsRef,\n      watchInternal = _ref29.watchInternal,\n      defaultValuesRef = _ref29.defaultValuesRef;\n\n  var updateValue = useState()[1];\n  var idRef = useRef();\n  var defaultValueRef = useRef(defaultValue);\n  useEffect(function () {\n    if (process.env.NODE_ENV !== 'production') {\n      if (name === '') {\n        console.warn('📋 useWatch is missing `name` attribute. https://react-hook-form.com/api#useWatch');\n      }\n    }\n\n    var id = idRef.current = generateId();\n    var watchFieldsHookRender = useWatchRenderFunctionsRef.current;\n    var watchFieldsHook = useWatchFieldsRef.current;\n    watchFieldsHook[id] = new Set();\n\n    watchFieldsHookRender[id] = function () {\n      return updateValue({});\n    };\n\n    watchInternal(name, defaultValueRef.current, id);\n    return function () {\n      delete watchFieldsHook[id];\n      delete watchFieldsHookRender[id];\n    };\n  }, [name, useWatchRenderFunctionsRef, useWatchFieldsRef, watchInternal, defaultValueRef]);\n  return idRef.current ? watchInternal(name, defaultValueRef.current, idRef.current) : isUndefined(defaultValue) ? isString(name) ? get(defaultValuesRef.current, name) : Array.isArray(name) ? name.reduce(function (previous, inputName) {\n    return Object.assign(Object.assign({}, previous), _defineProperty({}, inputName, get(defaultValuesRef.current, inputName)));\n  }, {}) : defaultValuesRef.current : defaultValue;\n}\n\nvar getInputValue = function getInputValue(event) {\n  return isPrimitive(event) || !isObject(event.target) || isObject(event.target) && !event.type ? event : isUndefined(event.target.value) ? event.target.checked : event.target.value;\n};\n\nfunction useField(_ref30) {\n  var name = _ref30.name,\n      rules = _ref30.rules,\n      defaultValue = _ref30.defaultValue,\n      control = _ref30.control,\n      onFocus = _ref30.onFocus;\n  var methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error('📋 Controller is missing `control` prop. https://react-hook-form.com/api#Controller');\n    }\n  }\n\n  var _ref31 = control || methods.control,\n      defaultValuesRef = _ref31.defaultValuesRef,\n      setValue = _ref31.setValue,\n      register = _ref31.register,\n      unregister = _ref31.unregister,\n      trigger = _ref31.trigger,\n      mode = _ref31.mode,\n      _ref31$reValidateMode = _ref31.reValidateMode,\n      isReValidateOnBlur = _ref31$reValidateMode.isReValidateOnBlur,\n      isReValidateOnChange = _ref31$reValidateMode.isReValidateOnChange,\n      _ref31$formStateRef$c = _ref31.formStateRef.current,\n      isSubmitted = _ref31$formStateRef$c.isSubmitted,\n      touched = _ref31$formStateRef$c.touched,\n      errors = _ref31$formStateRef$c.errors,\n      dirtyFields = _ref31$formStateRef$c.dirtyFields,\n      updateFormState = _ref31.updateFormState,\n      readFormStateRef = _ref31.readFormStateRef,\n      fieldsRef = _ref31.fieldsRef,\n      fieldArrayNamesRef = _ref31.fieldArrayNamesRef,\n      shallowFieldsStateRef = _ref31.shallowFieldsStateRef;\n\n  var isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\n\n  var getInitialValue = function getInitialValue() {\n    return !isUndefined(get(shallowFieldsStateRef.current, name)) && isNotFieldArray ? get(shallowFieldsStateRef.current, name) : isUndefined(defaultValue) ? get(defaultValuesRef.current, name) : defaultValue;\n  };\n\n  var _useState5 = useState(getInitialValue()),\n      _useState6 = _slicedToArray(_useState5, 2),\n      value = _useState6[0],\n      setInputStateValue = _useState6[1];\n\n  var valueRef = useRef(value);\n  var ref = useRef({\n    focus: function focus() {\n      return null;\n    }\n  });\n  var onFocusRef = useRef(onFocus || function () {\n    if (isFunction(ref.current.focus)) {\n      ref.current.focus();\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!isFunction(ref.current.focus)) {\n        console.warn(\"\\uD83D\\uDCCB 'ref' from Controller render prop must be attached to a React component or a DOM Element whose ref provides a 'focus()' method\");\n      }\n    }\n  });\n  var shouldValidate = useCallback(function (isBlurEvent) {\n    return !skipValidation(Object.assign({\n      isBlurEvent: isBlurEvent,\n      isReValidateOnBlur: isReValidateOnBlur,\n      isReValidateOnChange: isReValidateOnChange,\n      isSubmitted: isSubmitted,\n      isTouched: !!get(touched, name)\n    }, mode));\n  }, [isReValidateOnBlur, isReValidateOnChange, isSubmitted, touched, name, mode]);\n  var commonTask = useCallback(function (_ref32) {\n    var _ref33 = _slicedToArray(_ref32, 1),\n        event = _ref33[0];\n\n    var data = getInputValue(event);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  }, []);\n  var registerField = useCallback(function (shouldUpdateValue) {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!name) {\n        return console.warn('📋 Field is missing `name` prop. https://react-hook-form.com/api#Controller');\n      }\n    }\n\n    if (fieldsRef.current[name]) {\n      fieldsRef.current[name] = Object.assign({\n        ref: fieldsRef.current[name].ref\n      }, rules);\n    } else {\n      register(Object.defineProperty({\n        name: name,\n        focus: onFocusRef.current\n      }, 'value', {\n        set: function set(data) {\n          setInputStateValue(data);\n          valueRef.current = data;\n        },\n        get: function get() {\n          return valueRef.current;\n        }\n      }), rules);\n      shouldUpdateValue = !get(defaultValuesRef.current, name);\n    }\n\n    shouldUpdateValue && isNotFieldArray && setInputStateValue(getInitialValue());\n  }, [rules, name, register]);\n  useEffect(function () {\n    return function () {\n      return unregister(name);\n    };\n  }, [name]);\n  useEffect(function () {\n    if (process.env.NODE_ENV !== 'production') {\n      if (isUndefined(value)) {\n        console.warn(\"\\uD83D\\uDCCB \".concat(name, \" is missing in the 'defaultValue' prop of either its Controller (https://react-hook-form.com/api#Controller) or useForm (https://react-hook-form.com/api#useForm)\"));\n      }\n\n      if (!isNotFieldArray && isUndefined(defaultValue)) {\n        console.warn('📋 Controller is missing `defaultValue` prop when using `useFieldArray`. https://react-hook-form.com/api#Controller');\n      }\n    }\n\n    registerField();\n  }, [registerField]);\n  useEffect(function () {\n    !fieldsRef.current[name] && registerField(true);\n  });\n  var onBlur = useCallback(function () {\n    if (readFormStateRef.current.touched && !get(touched, name)) {\n      set(touched, name, true);\n      updateFormState({\n        touched: touched\n      });\n    }\n\n    shouldValidate(true) && trigger(name);\n  }, [name, updateFormState, shouldValidate, trigger, readFormStateRef]);\n  var onChange = useCallback(function () {\n    for (var _len = arguments.length, event = new Array(_len), _key2 = 0; _key2 < _len; _key2++) {\n      event[_key2] = arguments[_key2];\n    }\n\n    return setValue(name, commonTask(event), {\n      shouldValidate: shouldValidate(),\n      shouldDirty: true\n    });\n  }, [setValue, name, shouldValidate]);\n  return {\n    field: {\n      onChange: onChange,\n      onBlur: onBlur,\n      name: name,\n      value: value,\n      ref: ref\n    },\n    state: {\n      inValid: !get(errors, name),\n      isDirty: !!get(dirtyFields, name),\n      isTouched: !!get(touched, name)\n    }\n  };\n}\n\nvar Controller = function Controller(props) {\n  var rules = props.rules,\n      as = props.as,\n      render = props.render,\n      defaultValue = props.defaultValue,\n      control = props.control,\n      onFocus = props.onFocus,\n      rest = __rest(props, [\"rules\", \"as\", \"render\", \"defaultValue\", \"control\", \"onFocus\"]);\n\n  var _useField = useField(props),\n      field = _useField.field;\n\n  var componentProps = Object.assign(Object.assign({}, rest), field);\n  return as ? isValidElement(as) ? cloneElement(as, componentProps) : createElement(as, componentProps) : render ? render(field) : null;\n};\n\nexport { Controller, FormProvider, appendErrors, get, transformToNestObject, useFieldArray, useForm, useFormContext, useWatch };","map":{"version":3,"mappings":"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","names":["isHTMLElement","value","HTMLElement","EVENTS","BLUR","CHANGE","INPUT","VALIDATION_MODE","onBlur","onChange","onSubmit","onTouched","all","SELECT","UNDEFINED","INPUT_VALIDATION_RULES","max","min","maxLength","minLength","pattern","required","validate","attachEventListeners","shouldAttachChangeEvent","handleChange","ref","addEventListener","isNullOrUndefined","isObjectType","isObject","Array","isArray","Date","isKey","test","compact","filter","Boolean","stringToPath","input","replace","split","set","object","path","index","tempPath","length","lastIndex","key","newValue","objValue","isNaN","transformToNestObject","data","isUndefined","val","undefined","get","obj","defaultValue","result","reduce","focusOnErrorField","fields","fieldErrors","field","focus","options","removeAllEventListeners","validateWithStateUpdate","removeEventListener","defaultReturn","isValid","getRadioValue","previous","option","checked","getMultipleSelectValue","selected","map","isRadioInput","element","type","isFileInput","isCheckBoxInput","isMultipleSelect","defaultResult","validResult","getCheckboxValue","values","attributes","getFieldValue","fieldsRef","name","shallowFieldsStateRef","excludeDisabled","current","disabled","files","isCheckBox","isDetached","nodeType","Node","DOCUMENT_NODE","parentNode","isEmptyObject","Object","keys","isBoolean","baseGet","updatePath","slice","unset","childObject","previousObjRef","k","objectRef","currentPaths","currentPathsLength","item","isSameRef","fieldValue","findRemovedFieldAndRemoveListener","shouldUnregister","forceDelete","fieldRef","forEach","isPrimitive","deepMerge","target","source","targetValue","sourceValue","setDirtyFields","defaultValues","dirtyFields","parentName","setFieldArrayDirtyFields","isString","getFieldsValues","shallowFieldsState","search","output","startsWith","find","deepEqual","object1","object2","isErrorObject","keys1","keys2","includes","val1","val2","isErrorStateChanged","errors","error","validFields","fieldsWithValidation","previousError","isRegex","RegExp","getValueAndMessage","validationData","message","isFunction","isMessage","isValidElement","getValidateError","appendErrors","validateAllFieldCriteria","types","isRadio","isRadioOrCheckbox","isEmpty","appendErrorsCurry","bind","getMinMaxMessage","exceedMax","maxLengthMessage","minLengthMessage","maxType","minType","maxOutput","minOutput","valueNumber","valueAsNumber","parseFloat","exceedMin","valueDate","valueAsDate","maxLengthOutput","minLengthOutput","patternValue","getFieldsValue","validateRef","validateError","validationResult","entries","validateFunction","validateResult","getPath","getInnerPath","pathWithIndex","flat","Infinity","assignWatchFields","fieldValues","fieldName","watchFields","inputValue","isSingleField","add","skipValidation","isOnBlur","isOnChange","isOnTouch","isTouched","isReValidateOnBlur","isReValidateOnChange","isBlurEvent","isSubmitted","isOnAll","getFieldArrayParentName","substring","indexOf","isMatchFieldArrayName","searchName","isNameInFieldArray","names","some","isSelectInput","onDomRemove","removeFieldEventListenerAndRef","observer","MutationObserver","observe","window","document","childList","subtree","cloneObject","isWeb","copy","File","getTime","Set","Map","modeChecker","mode","isOnSubmit","isRadioOrCheckboxFunction","isWindowUndefined","isProxyEnabled","Proxy","useForm","reValidateMode","resolver","context","shouldFocusError","criteriaMode","React.useRef","fieldArrayDefaultValuesRef","fieldArrayValuesRef","watchFieldsRef","useWatchFieldsRef","useWatchRenderFunctionsRef","fieldsWithValidationRef","validFieldsRef","defaultValuesRef","defaultValuesAtRenderRef","isUnMount","isWatchAllRef","handleChangeRef","resetFieldArrayFunctionRef","contextRef","resolverRef","fieldArrayNamesRef","modeRef","isValidateAllFieldCriteria","React.useState","isDirty","submitCount","touched","isSubmitting","isSubmitSuccessful","formState","setFormState","readFormStateRef","formStateRef","observerRef","updateFormState","React.useCallback","state","shouldRenderBaseOnError","shouldRender","shouldReRender","setFieldValue","rawValue","radioRef","selectRef","checkboxRef","isFormDirty","formValues","getValues","updateAndGetDirtyState","isFieldDirty","isDirtyFieldExist","previousIsDirty","isChanged","executeValidation","skipReRender","process","env","NODE_ENV","console","warn","validateField","executeSchemaOrResolverValidation","previousFormIsValid","isInputsValid","every","trigger","Promise","setInternalValues","shouldDirty","shouldValidate","setInternalValue","config","has","isFieldWatched","match","renderWatchedInputs","found","size","getNodeParentName","setValue","shouldSkipValidation","parentNodeName","currentError","setFieldArrayDefaultValues","payload","validateResolver","removeFieldEventListener","updateWatchedValue","watchField","clearErrors","inputName","setError","shouldFocus","watchInternal","fieldNames","watchId","combinedDefaultValues","fieldArrayValue","watch","unregister","registerFieldRef","validateOptions","fieldRefAndValidationOptions","isFieldArray","compareRef","currentRef","isEmptyDefaultValue","isEmptyUnmountFields","then","register","refOrValidationOptions","rules","handleSubmit","onValid","onInvalid","e","preventDefault","persist","fieldError","resetRefs","reset","omitResetState","inputRef","closest","resetFieldArray","React.useEffect","disconnect","commonProps","control","React.useMemo","prop","FormContext","React.createContext","displayName","useFormContext","React.useContext","FormProvider","_a","children","props","__rest","React.createElement","Provider","generateId","d","performance","now","c","r","Math","random","toString","removeAtIndexes","indexes","i","temp","splice","removeArrayAt","sort","moveArrayAt","from","to","swapArrayAt","indexA","indexB","prepend","insert","fillEmptyArray","fill","mapValueToBoolean","fillBooleanArray","mapIds","keyName","useFieldArray","methods","Error","focusIndexRef","fieldArrayParentName","memoizedDefaultValues","setFields","omitKey","_b","omitted","rest","getFieldArrayValue","getCurrentFieldsValues","setFieldAndValidState","fieldsValues","resetFields","cleanup","updateDirtyFieldsWithDefaultValues","updatedFieldArrayValues","batchStateUpdate","method","args","updatedFieldValues","updatedFormValues","shouldSet","shouldUpdateValid","argA","argB","argC","argD","append","updateFormValues","emptyArray","prependAt","remove","insertAt","swap","move","pop","resetFunctions","fieldArrayNames","delete","useWatch","updateValue","idRef","defaultValueRef","id","watchFieldsHookRender","watchFieldsHook","getInputValue","event","useField","onFocus","isNotFieldArray","getInitialValue","setInputStateValue","valueRef","onFocusRef","commonTask","registerField","shouldUpdateValue","defineProperty","inValid","Controller","as","render","componentProps","React.isValidElement","React.cloneElement"],"sources":["/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/utils/isHTMLElement.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/constants.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/logic/attachEventListeners.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/utils/isNullOrUndefined.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/utils/isObject.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/utils/isKey.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/utils/compact.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/utils/stringToPath.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/utils/set.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/logic/transformToNestObject.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/utils/isUndefined.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/utils/get.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/logic/focusOnErrorField.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/logic/removeAllEventListeners.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/logic/getRadioValue.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/logic/getMultipleSelectValue.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/utils/isRadioInput.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/utils/isFileInput.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/utils/isCheckBoxInput.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/utils/isMultipleSelect.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/logic/getCheckboxValue.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/logic/getFieldValue.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/utils/isDetached.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/utils/isEmptyObject.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/utils/isBoolean.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/utils/unset.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/logic/findRemovedFieldAndRemoveListener.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/utils/isPrimitive.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/utils/deepMerge.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/logic/setFieldArrayDirtyFields.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/utils/isString.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/logic/getFieldsValues.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/utils/deepEqual.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/logic/isErrorStateChanged.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/utils/isRegex.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/logic/getValueAndMessage.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/utils/isFunction.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/utils/isMessage.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/logic/getValidateError.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/logic/appendErrors.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/logic/validateField.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/utils/getPath.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/logic/assignWatchFields.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/logic/skipValidation.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/logic/getNodeParentName.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/logic/isNameInFieldArray.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/utils/isSelectInput.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/utils/onDomRemove.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/utils/cloneObject.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/utils/validationModeChecker.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/utils/isRadioOrCheckbox.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/useForm.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/useFormContext.tsx","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/logic/generateId.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/utils/remove.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/utils/move.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/utils/swap.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/utils/prepend.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/utils/insert.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/utils/fillEmptyArray.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/utils/fillBooleanArray.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/useFieldArray.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/useWatch.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/logic/getInputValue.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/useField.ts","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-hook-form/src/controller.tsx"],"sourcesContent":["export default (value: any): value is HTMLElement =>\n  value instanceof HTMLElement;\n","import { ValidationMode } from './types';\n\nexport const EVENTS = {\n  BLUR: 'blur',\n  CHANGE: 'change',\n  INPUT: 'input',\n};\n\nexport const VALIDATION_MODE: ValidationMode = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n};\n\nexport const SELECT = 'select';\n\nexport const UNDEFINED = 'undefined';\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Field } from '../types';\n\nexport default function attachEventListeners(\n  { ref }: Field,\n  shouldAttachChangeEvent?: boolean,\n  handleChange?: EventListenerOrEventListenerObject,\n): void {\n  if (isHTMLElement(ref) && handleChange) {\n    ref.addEventListener(\n      shouldAttachChangeEvent ? EVENTS.CHANGE : EVENTS.INPUT,\n      handleChange,\n    );\n    ref.addEventListener(EVENTS.BLUR, handleChange);\n  }\n}\n","export default (value: unknown): value is null | undefined => value == null;\n","import isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown) => typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !(value instanceof Date);\n","export default (value: [] | string) =>\n  !Array.isArray(value) && /^\\w*$/.test(value);\n","export default (value: any[]) => value.filter(Boolean);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(\n    input\n      .replace(/[\"|']/g, '')\n      .replace(/\\[/g, '.')\n      .replace(/\\]/g, '')\n      .split('.'),\n  );\n","import isObject from './isObject';\nimport isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport { FieldValues } from '../types';\n\nexport default function set(\n  object: FieldValues,\n  path: string,\n  value?: unknown,\n) {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n}\n","import set from '../utils/set';\nimport isKey from '../utils/isKey';\nimport { FieldValues } from '../types';\n\nexport default (data: FieldValues, value: Record<string, any> = {}): any => {\n  for (const key in data) {\n    !isKey(key) ? set(value, key, data[key]) : (value[key] = data[key]);\n  }\n  return value;\n};\n","export default (val: unknown): val is undefined => val === undefined;\n","import isUndefined from './isUndefined';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport compact from './compact';\n\nexport default (obj: any, path: string, defaultValue?: unknown) => {\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) => (isNullOrUndefined(result) ? result : result[key]),\n    obj,\n  );\n\n  return isUndefined(result) || result === obj\n    ? isUndefined(obj[path])\n      ? defaultValue\n      : obj[path]\n    : result;\n};\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport { FieldErrors, FieldRefs } from '../types';\n\nexport default <TFieldValues>(\n  fields: FieldRefs<TFieldValues>,\n  fieldErrors: FieldErrors<TFieldValues>,\n) => {\n  for (const key in fields) {\n    if (get(fieldErrors, key)) {\n      const field = fields[key];\n\n      if (field) {\n        if (field.ref.focus && isUndefined(field.ref.focus())) {\n          break;\n        } else if (field.options) {\n          field.options[0].ref.focus();\n\n          break;\n        }\n      }\n    }\n  }\n};\n","import isHTMLElement from '../utils/isHTMLElement';\nimport { EVENTS } from '../constants';\nimport { Ref } from '../types';\n\nexport default (\n  ref: Ref,\n  validateWithStateUpdate: EventListenerOrEventListenerObject,\n): void => {\n  if (isHTMLElement(ref) && ref.removeEventListener) {\n    ref.removeEventListener(EVENTS.INPUT, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.CHANGE, validateWithStateUpdate);\n    ref.removeEventListener(EVENTS.BLUR, validateWithStateUpdate);\n  }\n};\n","import { RadioOrCheckboxOption } from '../types';\n\ntype RadioFieldResult = {\n  isValid: boolean;\n  value: number | string;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: '',\n};\n\nexport default (options?: RadioOrCheckboxOption[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.ref.checked\n            ? {\n                isValid: true,\n                value: option.ref.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","export default (\n  options: HTMLOptionElement[] | HTMLOptionsCollection,\n): string[] =>\n  [...options]\n    .filter(({ selected }): boolean => selected)\n    .map(({ value }): string => value);\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-multiple`;\n","import isUndefined from '../utils/isUndefined';\nimport { RadioOrCheckboxOption } from '../types';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: RadioOrCheckboxOption[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.ref.checked)\n        .map(({ ref: { value } }) => value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    const { checked, value, attributes } = options[0].ref;\n\n    return checked\n      ? attributes && !isUndefined((attributes as any).value)\n        ? isUndefined(value) || value === ''\n          ? validResult\n          : { value: value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getMultipleSelectValue from './getMultipleSelectValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport get from '../utils/get';\nimport isFileInput from '../utils/isFileInput';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport getCheckboxValue from './getCheckboxValue';\nimport { FieldRefs, FieldValues, InternalFieldName } from '../types';\n\nexport default function getFieldValue<TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  name: InternalFieldName<TFieldValues>,\n  shallowFieldsStateRef?: React.MutableRefObject<Partial<FieldValues>>,\n  excludeDisabled?: boolean,\n) {\n  const field = fieldsRef.current[name]!;\n\n  if (field) {\n    const {\n      ref: { value, disabled },\n      ref,\n    } = field;\n\n    if (disabled && excludeDisabled) {\n      return;\n    }\n\n    if (isFileInput(ref)) {\n      return ref.files;\n    }\n\n    if (isRadioInput(ref)) {\n      return getRadioValue(field.options).value;\n    }\n\n    if (isMultipleSelect(ref)) {\n      return getMultipleSelectValue(ref.options);\n    }\n\n    if (isCheckBox(ref)) {\n      return getCheckboxValue(field.options).value;\n    }\n\n    return value;\n  }\n\n  if (shallowFieldsStateRef) {\n    return get(shallowFieldsStateRef.current, name);\n  }\n}\n","import { Ref } from '../types';\n\nexport default function isDetached(element: Ref): boolean {\n  if (!element) {\n    return true;\n  }\n\n  if (\n    !(element instanceof HTMLElement) ||\n    element.nodeType === Node.DOCUMENT_NODE\n  ) {\n    return false;\n  }\n\n  return isDetached(element.parentNode as Ref);\n}\n","import isObject from './isObject';\nimport { EmptyObject } from '../types';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","import isKey from './isKey';\nimport stringToPath from './stringToPath';\nimport isEmptyObject from './isEmptyObject';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport isBoolean from './isBoolean';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const path = updatePath.slice(0, -1);\n  const length = path.length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nexport default function unset(object: any, path: string) {\n  const updatePath = isKey(path) ? [path] : stringToPath(path);\n  const childObject =\n    updatePath.length == 1 ? object : baseGet(object, updatePath);\n  const key = updatePath[updatePath.length - 1];\n  let previousObjRef = undefined;\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  for (let k = 0; k < updatePath.slice(0, -1).length; k++) {\n    let index = -1;\n    let objectRef = undefined;\n    const currentPaths = updatePath.slice(0, -(k + 1));\n    const currentPathsLength = currentPaths.length - 1;\n\n    if (k > 0) {\n      previousObjRef = object;\n    }\n\n    while (++index < currentPaths.length) {\n      const item = currentPaths[index];\n      objectRef = objectRef ? objectRef[item] : object[item];\n\n      if (\n        currentPathsLength === index &&\n        ((isObject(objectRef) && isEmptyObject(objectRef)) ||\n          (Array.isArray(objectRef) &&\n            !objectRef.filter(\n              (data) =>\n                (isObject(data) && !isEmptyObject(data)) || isBoolean(data),\n            ).length))\n      ) {\n        previousObjRef ? delete previousObjRef[item] : delete object[item];\n      }\n\n      previousObjRef = objectRef;\n    }\n  }\n\n  return object;\n}\n","import * as React from 'react';\nimport removeAllEventListeners from './removeAllEventListeners';\nimport getFieldValue from './getFieldValue';\nimport isRadioInput from '../utils/isRadioInput';\nimport set from '../utils/set';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDetached from '../utils/isDetached';\nimport unset from '../utils/unset';\nimport compact from '../utils/compact';\nimport isUndefined from '../utils/isUndefined';\nimport { Field, FieldRefs, FieldValues, Ref } from '../types';\n\nconst isSameRef = (fieldValue: Field, ref: Ref) =>\n  fieldValue && fieldValue.ref === ref;\n\nexport default function findRemovedFieldAndRemoveListener<\n  TFieldValues extends FieldValues\n>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  handleChange: ({ type, target }: Event) => Promise<void | boolean>,\n  field: Field,\n  shallowFieldsStateRef: React.MutableRefObject<FieldValues>,\n  shouldUnregister?: boolean,\n  forceDelete?: boolean,\n): void {\n  const {\n    ref,\n    ref: { name, type },\n  } = field;\n  const fieldRef = fieldsRef.current[name] as Field;\n\n  if (!shouldUnregister) {\n    const value = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n\n    !isUndefined(value) && set(shallowFieldsStateRef.current, name, value);\n  }\n\n  if (!type) {\n    delete fieldsRef.current[name];\n    return;\n  }\n\n  if ((isRadioInput(ref) || isCheckBoxInput(ref)) && fieldRef) {\n    if (Array.isArray(fieldRef.options) && fieldRef.options.length) {\n      compact(fieldRef.options).forEach((option, index): void => {\n        if (\n          (option.ref &&\n            isDetached(option.ref) &&\n            isSameRef(option, option.ref)) ||\n          forceDelete\n        ) {\n          removeAllEventListeners(option.ref, handleChange);\n          unset(fieldRef.options, `[${index}]`);\n        }\n      });\n\n      if (fieldRef.options && !compact(fieldRef.options).length) {\n        delete fieldsRef.current[name];\n      }\n    } else {\n      delete fieldsRef.current[name];\n    }\n  } else if ((isDetached(ref) && isSameRef(fieldRef, ref)) || forceDelete) {\n    removeAllEventListeners(ref, handleChange);\n\n    delete fieldsRef.current[name];\n  }\n}\n","import isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\nimport { Primitive } from '../types';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from './isObject';\nimport isPrimitive from './isPrimitive';\n\nexport function deepMerge<\n  T extends Record<keyof T, any>,\n  U extends Record<keyof U, any>\n>(target: T, source: U): T & U {\n  if (isPrimitive(target) || isPrimitive(source)) {\n    return source;\n  }\n\n  for (const key in source) {\n    const targetValue = target[key];\n    const sourceValue = source[key];\n\n    try {\n      target[key] =\n        (isObject(targetValue) && isObject(sourceValue)) ||\n        (Array.isArray(targetValue) && Array.isArray(sourceValue))\n          ? deepMerge(targetValue, sourceValue)\n          : sourceValue;\n    } catch {}\n  }\n\n  return target;\n}\n","import { get } from '../utils';\nimport set from '../utils/set';\nimport { deepMerge } from '../utils/deepMerge';\n\nfunction setDirtyFields<\n  T extends Record<string, unknown>[],\n  U extends Record<string, unknown>[],\n  K extends Record<string, boolean | []>\n>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n  parentNode?: K,\n  parentName?: keyof K,\n) {\n  let index = -1;\n\n  while (++index < values.length) {\n    for (const key in values[index]) {\n      if (Array.isArray(values[index][key])) {\n        !dirtyFields[index] && (dirtyFields[index] = {});\n        dirtyFields[index][key] = [];\n        setDirtyFields(\n          values[index][key] as T,\n          get(defaultValues[index] || {}, key, []),\n          dirtyFields[index][key] as [],\n          dirtyFields[index],\n          key,\n        );\n      } else {\n        get(defaultValues[index] || {}, key) === values[index][key]\n          ? set(dirtyFields[index] || {}, key)\n          : (dirtyFields[index] = {\n              ...dirtyFields[index],\n              [key]: true,\n            });\n      }\n    }\n\n    parentNode &&\n      !dirtyFields.length &&\n      delete parentNode[parentName as keyof K];\n  }\n\n  return dirtyFields;\n}\n\nexport default <T extends U, U extends Record<string, unknown>[]>(\n  values: T,\n  defaultValues: U,\n  dirtyFields: Record<string, boolean | []>[],\n) =>\n  deepMerge(\n    setDirtyFields(values, defaultValues, dirtyFields),\n    setDirtyFields(defaultValues, values, dirtyFields),\n  );\n","export default (value: unknown): value is string => typeof value === 'string';\n","import * as React from 'react';\nimport getFieldValue from './getFieldValue';\nimport isString from '../utils/isString';\nimport { deepMerge } from '../utils/deepMerge';\nimport isUndefined from '../utils/isUndefined';\nimport { InternalFieldName, FieldValues, FieldRefs } from '../types';\nimport transformToNestObject from './transformToNestObject';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  shallowFieldsState: Record<string, any>,\n  shouldUnregister: boolean,\n  excludeDisabled?: boolean,\n  search?:\n    | InternalFieldName<TFieldValues>\n    | InternalFieldName<TFieldValues>[]\n    | { nest: boolean },\n) => {\n  const output = {} as TFieldValues;\n\n  for (const name in fieldsRef.current) {\n    if (\n      isUndefined(search) ||\n      (isString(search)\n        ? name.startsWith(search)\n        : Array.isArray(search) && search.find((data) => name.startsWith(data)))\n    ) {\n      output[name as InternalFieldName<TFieldValues>] = getFieldValue(\n        fieldsRef,\n        name,\n        undefined,\n        excludeDisabled,\n      );\n    }\n  }\n\n  return shouldUnregister\n    ? transformToNestObject(output)\n    : deepMerge(shallowFieldsState, transformToNestObject(output));\n};\n","import isObject from '../utils/isObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(\n  object1: any,\n  object2: any,\n  isErrorObject?: boolean,\n) {\n  if (\n    isPrimitive(object1) ||\n    isPrimitive(object2) ||\n    object1 instanceof Date ||\n    object2 instanceof Date\n  ) {\n    return object1 === object2;\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    if (!(isErrorObject && ['ref', 'context'].includes(key))) {\n      const val1 = object1[key];\n      const val2 = object2[key];\n\n      if (\n        (isObject(val1) || Array.isArray(val1)) &&\n        (isObject(val2) || Array.isArray(val2))\n          ? !deepEqual(val1, val2, isErrorObject)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import get from '../utils/get';\nimport isUndefined from '../utils/isUndefined';\nimport deepEqual from '../utils/deepEqual';\nimport {\n  FieldValues,\n  InternalFieldName,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldError,\n} from '../types';\n\nexport default function isErrorStateChanged<TFieldValues extends FieldValues>({\n  errors,\n  name,\n  error,\n  validFields,\n  fieldsWithValidation,\n}: {\n  errors: FieldErrors<TFieldValues>;\n  error: FieldError | undefined;\n  name: InternalFieldName<TFieldValues>;\n  validFields: FieldNamesMarkedBoolean<TFieldValues>;\n  fieldsWithValidation: FieldNamesMarkedBoolean<TFieldValues>;\n}): boolean {\n  const isValid = isUndefined(error);\n  const previousError = get(errors, name);\n\n  return (\n    (isValid && !!previousError) ||\n    (!isValid && !deepEqual(previousError, error, true)) ||\n    (isValid && get(fieldsWithValidation, name) && !get(validFields, name))\n  );\n}\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport { ValidationRule } from '../types';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import { isValidElement } from 'react';\nimport isString from '../utils/isString';\nimport isObject from '../utils/isObject';\nimport { Message } from '../types';\n\nexport default (value: unknown): value is Message =>\n  isString(value) || (isObject(value) && isValidElement(value));\n","import isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport { FieldError, ValidateResult, Ref } from '../types';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (isMessage(result) || (isBoolean(result) && !result)) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import {\n  InternalFieldName,\n  ValidateResult,\n  InternalFieldErrors,\n} from '../types';\n\nexport default <TFieldValues>(\n  name: InternalFieldName<TFieldValues>,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors<TFieldValues>,\n  type: string,\n  message: ValidateResult,\n) => {\n  if (validateAllFieldCriteria) {\n    const error = errors[name];\n\n    return {\n      ...error,\n      types: {\n        ...(error && error.types ? error.types : {}),\n        [type]: message || true,\n      },\n    };\n  }\n\n  return {};\n};\n","import * as React from 'react';\nimport getRadioValue from './getRadioValue';\nimport getCheckboxValue from './getCheckboxValue';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isRadioInput from '../utils/isRadioInput';\nimport getValueAndMessage from './getValueAndMessage';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isString from '../utils/isString';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isObject from '../utils/isObject';\nimport isFunction from '../utils/isFunction';\nimport getFieldsValue from './getFieldValue';\nimport isRegex from '../utils/isRegex';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\nimport getValidateError from './getValidateError';\nimport appendErrors from './appendErrors';\nimport { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldValues,\n  FieldRefs,\n  Message,\n  FieldError,\n  InternalFieldName,\n  InternalFieldErrors,\n} from '../types';\n\nexport default async <TFieldValues extends FieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  validateAllFieldCriteria: boolean,\n  {\n    ref,\n    ref: { type, value },\n    options,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n  }: Field,\n  shallowFieldsStateRef: React.MutableRefObject<Record<string, any>>,\n): Promise<InternalFieldErrors<TFieldValues>> => {\n  const name: InternalFieldName<TFieldValues> = ref.name;\n  const error: InternalFieldErrors<TFieldValues> = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty = value === '';\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType = INPUT_VALIDATION_RULES.maxLength,\n    minType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...(exceedMax\n        ? appendErrorsCurry(maxType, message)\n        : appendErrorsCurry(minType, message)),\n    };\n  };\n\n  if (\n    required &&\n    ((!isRadio && !isCheckBox && (isEmpty || isNullOrUndefined(value))) ||\n      (isBoolean(value) && !value) ||\n      (isCheckBox && !getCheckboxValue(options).isValid) ||\n      (isRadio && !getRadioValue(options).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: isRadioOrCheckbox\n          ? (((fieldsRef.current[name] as Field).options || [])[0] || {}).ref\n          : ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (!isNullOrUndefined(min) || !isNullOrUndefined(max)) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (type === 'number' || (!type && !isNaN(value))) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber || parseFloat(value);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(value);\n      if (isString(maxOutput.value)) {\n        exceedMax = valueDate > new Date(maxOutput.value);\n      }\n      if (isString(minOutput.value)) {\n        exceedMin = valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (isString(value) && !isEmpty && (maxLength || minLength)) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      value.length > maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      value.length < minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !patternValue.test(value)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    const fieldValue = getFieldsValue(fieldsRef, name, shallowFieldsStateRef);\n    const validateRef = isRadioOrCheckbox && options ? options[0].ref : ref;\n\n    if (isFunction(validate)) {\n      const result = await validate(fieldValue);\n      const validateError = getValidateError(result, validateRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n      for (const [key, validateFunction] of Object.entries(validate)) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateResult = await validateFunction(fieldValue);\n        const validateError = getValidateError(\n          validateResult,\n          validateRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: validateRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  return error;\n};\n","import isPrimitive from './isPrimitive';\nimport isObject from './isObject';\n\nexport const getPath = <T extends string, U extends object | unknown[]>(\n  path: T,\n  values: U,\n): string[] => {\n  const getInnerPath = <K>(key: K, value: U, isObject?: boolean) => {\n    const pathWithIndex = isObject ? `${path}.${key}` : `${path}[${key}]`;\n    return isPrimitive(value) ? pathWithIndex : getPath(pathWithIndex, value);\n  };\n\n  return Object.entries(values)\n    .map(([key, value]) => getInnerPath(key, value, isObject(values)))\n    .flat(Infinity) as string[];\n};\n","import get from '../utils/get';\nimport { getPath } from '../utils/getPath';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport {\n  DeepPartial,\n  FieldValue,\n  FieldValues,\n  InternalFieldName,\n  UnpackNestedValue,\n} from '../types';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldValues: TFieldValues,\n  fieldName: InternalFieldName<TFieldValues>,\n  watchFields: Set<InternalFieldName<TFieldValues>>,\n  inputValue: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  isSingleField?: boolean,\n):\n  | FieldValue<TFieldValues>\n  | UnpackNestedValue<DeepPartial<TFieldValues>>\n  | undefined => {\n  let value;\n\n  watchFields.add(fieldName);\n\n  if (isEmptyObject(fieldValues)) {\n    value = undefined;\n  } else {\n    value = get(fieldValues, fieldName);\n\n    if (isObject(value) || Array.isArray(value)) {\n      getPath(fieldName, value).forEach((name) => watchFields.add(name));\n    }\n  }\n\n  return isUndefined(value)\n    ? isSingleField\n      ? inputValue\n      : get(inputValue, fieldName)\n    : value;\n};\n","export default ({\n  isOnBlur,\n  isOnChange,\n  isOnTouch,\n  isTouched,\n  isReValidateOnBlur,\n  isReValidateOnChange,\n  isBlurEvent,\n  isSubmitted,\n  isOnAll,\n}: {\n  isOnAll?: boolean;\n  isOnBlur?: boolean;\n  isOnChange?: boolean;\n  isReValidateOnBlur?: boolean;\n  isReValidateOnChange?: boolean;\n  isBlurEvent?: boolean;\n  isSubmitted?: boolean;\n  isOnTouch?: boolean;\n  isTouched?: boolean;\n}) => {\n  if (isOnAll) {\n    return false;\n  } else if (!isSubmitted && isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? isReValidateOnBlur : isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? isReValidateOnChange : isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","export default (name: string) => name.substring(0, name.indexOf('['));\n","import { FieldValues, InternalFieldName } from '../types';\n\nexport const isMatchFieldArrayName = (name: string, searchName: string) =>\n  RegExp(\n    `^${searchName}([|.)\\\\d+`.replace(/\\[/g, '\\\\[').replace(/\\]/g, '\\\\]'),\n  ).test(name);\n\nexport default (\n  names: Set<InternalFieldName<FieldValues>>,\n  name: InternalFieldName<FieldValues>,\n) => [...names].some((current) => isMatchFieldArrayName(name, current));\n","import { FieldElement } from '../types';\nimport { SELECT } from '../constants';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `${SELECT}-one`;\n","import * as React from 'react';\nimport { Field, FieldRefs } from '../types';\nimport isDetached from './isDetached';\n\nexport default function onDomRemove<TFieldValues>(\n  fieldsRef: React.MutableRefObject<FieldRefs<TFieldValues>>,\n  removeFieldEventListenerAndRef: (\n    field: Field | undefined,\n    forceDelete?: boolean,\n  ) => void,\n): MutationObserver {\n  const observer = new MutationObserver((): void => {\n    for (const field of Object.values(fieldsRef.current)) {\n      if (field && field.options) {\n        for (const option of field.options) {\n          if (option && option.ref && isDetached(option.ref)) {\n            removeFieldEventListenerAndRef(field);\n          }\n        }\n      } else if (field && isDetached(field.ref)) {\n        removeFieldEventListenerAndRef(field);\n      }\n    }\n  });\n\n  observer.observe(window.document, {\n    childList: true,\n    subtree: true,\n  });\n\n  return observer;\n}\n","import isPrimitive from './isPrimitive';\n\nexport default function cloneObject<T extends unknown>(\n  data: T,\n  isWeb = true,\n): T {\n  let copy: any;\n\n  if (isPrimitive(data) || (isWeb && data instanceof File)) {\n    return data;\n  }\n\n  if (data instanceof Date) {\n    copy = new Date(data.getTime());\n    return copy;\n  }\n\n  if (data instanceof Set) {\n    copy = new Set();\n    for (const item of data) {\n      copy.add(item);\n    }\n    return copy;\n  }\n\n  if (data instanceof Map) {\n    copy = new Map();\n    for (const key of data.keys()) {\n      copy.set(key, cloneObject(data.get(key), isWeb));\n    }\n    return copy;\n  }\n\n  copy = Array.isArray(data) ? [] : {};\n\n  for (const key in data) {\n    copy[key] = cloneObject(data[key], isWeb);\n  }\n\n  return copy;\n}\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode } from '../types';\n\nexport default (\n  mode?: Mode,\n): {\n  isOnSubmit: boolean;\n  isOnBlur: boolean;\n  isOnChange: boolean;\n  isOnAll: boolean;\n  isOnTouch: boolean;\n} => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import isRadioInput from './isRadioInput';\nimport isCheckBoxInput from './isCheckBoxInput';\nimport { FieldElement } from '../types';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import * as React from 'react';\nimport attachEventListeners from './logic/attachEventListeners';\nimport transformToNestObject from './logic/transformToNestObject';\nimport focusOnErrorField from './logic/focusOnErrorField';\nimport findRemovedFieldAndRemoveListener from './logic/findRemovedFieldAndRemoveListener';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport getFieldsValues from './logic/getFieldsValues';\nimport getFieldValue from './logic/getFieldValue';\nimport isErrorStateChanged from './logic/isErrorStateChanged';\nimport validateField from './logic/validateField';\nimport assignWatchFields from './logic/assignWatchFields';\nimport skipValidation from './logic/skipValidation';\nimport getNodeParentName from './logic/getNodeParentName';\nimport deepEqual from './utils/deepEqual';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isCheckBoxInput from './utils/isCheckBoxInput';\nimport isEmptyObject from './utils/isEmptyObject';\nimport isRadioInput from './utils/isRadioInput';\nimport isSelectInput from './utils/isSelectInput';\nimport isFileInput from './utils/isFileInput';\nimport onDomRemove from './utils/onDomRemove';\nimport isObject from './utils/isObject';\nimport { getPath } from './utils/getPath';\nimport isPrimitive from './utils/isPrimitive';\nimport isFunction from './utils/isFunction';\nimport isString from './utils/isString';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport set from './utils/set';\nimport unset from './utils/unset';\nimport isKey from './utils/isKey';\nimport cloneObject from './utils/cloneObject';\nimport modeChecker from './utils/validationModeChecker';\nimport isMultipleSelect from './utils/isMultipleSelect';\nimport compact from './utils/compact';\nimport isNullOrUndefined from './utils/isNullOrUndefined';\nimport isRadioOrCheckboxFunction from './utils/isRadioOrCheckbox';\nimport isHTMLElement from './utils/isHTMLElement';\nimport { EVENTS, UNDEFINED, VALIDATION_MODE } from './constants';\nimport {\n  UseFormMethods,\n  FieldValues,\n  UnpackNestedValue,\n  FieldName,\n  InternalFieldName,\n  FieldValue,\n  FieldErrors,\n  Field,\n  FieldRefs,\n  UseFormOptions,\n  ValidationRules,\n  SubmitHandler,\n  FieldElement,\n  FormStateProxy,\n  ReadFormState,\n  Ref,\n  HandleChange,\n  RadioOrCheckboxOption,\n  OmitResetState,\n  SetValueConfig,\n  ErrorOption,\n  FormState,\n  SubmitErrorHandler,\n  FieldNamesMarkedBoolean,\n  LiteralToPrimitive,\n  DeepPartial,\n  InternalNameSet,\n  DefaultValues,\n  FieldError,\n  SetFieldValue,\n} from './types';\n\nconst isWindowUndefined = typeof window === UNDEFINED;\nconst isWeb =\n  typeof document !== UNDEFINED &&\n  !isWindowUndefined &&\n  !isUndefined(window.HTMLElement);\nconst isProxyEnabled = isWeb ? 'Proxy' in window : typeof Proxy !== UNDEFINED;\n\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext extends object = object\n>({\n  mode = VALIDATION_MODE.onSubmit,\n  reValidateMode = VALIDATION_MODE.onChange,\n  resolver,\n  context,\n  defaultValues = {} as UnpackNestedValue<DeepPartial<TFieldValues>>,\n  shouldFocusError = true,\n  shouldUnregister = true,\n  criteriaMode,\n}: UseFormOptions<TFieldValues, TContext> = {}): UseFormMethods<TFieldValues> {\n  const fieldsRef = React.useRef<FieldRefs<TFieldValues>>({});\n  const fieldArrayDefaultValuesRef = React.useRef<\n    Record<InternalFieldName<FieldValues>, unknown[]>\n  >({});\n  const fieldArrayValuesRef = React.useRef<\n    Record<InternalFieldName<FieldValues>, unknown[]>\n  >({});\n  const watchFieldsRef = React.useRef<InternalNameSet<TFieldValues>>(new Set());\n  const useWatchFieldsRef = React.useRef<\n    Record<string, InternalNameSet<TFieldValues>>\n  >({});\n  const useWatchRenderFunctionsRef = React.useRef<Record<string, () => void>>(\n    {},\n  );\n  const fieldsWithValidationRef = React.useRef<\n    FieldNamesMarkedBoolean<TFieldValues>\n  >({});\n  const validFieldsRef = React.useRef<FieldNamesMarkedBoolean<TFieldValues>>(\n    {},\n  );\n  const defaultValuesRef = React.useRef<DefaultValues<TFieldValues>>(\n    defaultValues,\n  );\n  const defaultValuesAtRenderRef = React.useRef<\n    Partial<DefaultValues<TFieldValues>>\n  >({});\n  const isUnMount = React.useRef(false);\n  const isWatchAllRef = React.useRef(false);\n  const handleChangeRef = React.useRef<HandleChange>();\n  const shallowFieldsStateRef = React.useRef({});\n  const resetFieldArrayFunctionRef = React.useRef<\n    Record<\n      InternalFieldName<FieldValues>,\n      (data?: UnpackNestedValue<DeepPartial<TFieldValues>>) => void\n    >\n  >({});\n  const contextRef = React.useRef(context);\n  const resolverRef = React.useRef(resolver);\n  const fieldArrayNamesRef = React.useRef<InternalNameSet<TFieldValues>>(\n    new Set(),\n  );\n  const modeRef = React.useRef(modeChecker(mode));\n  const { isOnSubmit, isOnTouch } = modeRef.current;\n  const isValidateAllFieldCriteria = criteriaMode === VALIDATION_MODE.all;\n  const [formState, setFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    dirtyFields: {},\n    isSubmitted: false,\n    submitCount: 0,\n    touched: {},\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: !isOnSubmit,\n    errors: {},\n  });\n  const readFormStateRef = React.useRef<ReadFormState>({\n    isDirty: !isProxyEnabled,\n    dirtyFields: !isProxyEnabled,\n    touched: !isProxyEnabled || isOnTouch,\n    isSubmitting: !isProxyEnabled,\n    isValid: !isProxyEnabled,\n  });\n  const formStateRef = React.useRef(formState);\n  const observerRef = React.useRef<MutationObserver | undefined>();\n  const {\n    isOnBlur: isReValidateOnBlur,\n    isOnChange: isReValidateOnChange,\n  } = React.useRef(modeChecker(reValidateMode)).current;\n\n  contextRef.current = context;\n  resolverRef.current = resolver;\n  formStateRef.current = formState;\n  shallowFieldsStateRef.current = shouldUnregister\n    ? {}\n    : isEmptyObject(shallowFieldsStateRef.current)\n    ? cloneObject(defaultValues, isWeb)\n    : shallowFieldsStateRef.current;\n\n  const updateFormState = React.useCallback(\n    (state: Partial<FormState<TFieldValues>> = {}) =>\n      !isUnMount.current &&\n      setFormState({\n        ...formStateRef.current,\n        ...state,\n      }),\n    [],\n  );\n\n  const shouldRenderBaseOnError = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      error: FieldError | undefined,\n      shouldRender: boolean | null = false,\n      state: {\n        dirtyFields?: FieldNamesMarkedBoolean<TFieldValues>;\n        isDirty?: boolean;\n        touched?: FieldNamesMarkedBoolean<TFieldValues>;\n      } = {},\n      isValid?: boolean,\n    ): boolean | void => {\n      let shouldReRender =\n        shouldRender ||\n        isErrorStateChanged<TFieldValues>({\n          errors: formStateRef.current.errors,\n          error,\n          name,\n          validFields: validFieldsRef.current,\n          fieldsWithValidation: fieldsWithValidationRef.current,\n        });\n      const previousError = get(formStateRef.current.errors, name);\n\n      if (error) {\n        unset(validFieldsRef.current, name);\n        shouldReRender =\n          shouldReRender ||\n          !previousError ||\n          !deepEqual(previousError, error, true);\n        set(formStateRef.current.errors, name, error);\n      } else {\n        if (get(fieldsWithValidationRef.current, name) || resolverRef.current) {\n          set(validFieldsRef.current, name, true);\n          shouldReRender = shouldReRender || previousError;\n        }\n\n        unset(formStateRef.current.errors, name);\n      }\n\n      if (\n        (shouldReRender && !isNullOrUndefined(shouldRender)) ||\n        !isEmptyObject(state)\n      ) {\n        updateFormState({\n          ...state,\n          errors: formStateRef.current.errors,\n          ...(resolverRef.current ? { isValid: !!isValid } : {}),\n        });\n      }\n    },\n    [],\n  );\n\n  const setFieldValue = React.useCallback(\n    (\n      name: string,\n      rawValue:\n        | FieldValue<TFieldValues>\n        | UnpackNestedValue<DeepPartial<TFieldValues>>\n        | string[]\n        | undefined\n        | null\n        | boolean,\n    ) => {\n      const { ref, options } = fieldsRef.current[name] as Field;\n      const value =\n        isWeb && isHTMLElement(ref) && isNullOrUndefined(rawValue)\n          ? ''\n          : rawValue;\n\n      if (isRadioInput(ref)) {\n        (options || []).forEach(\n          ({ ref: radioRef }: { ref: HTMLInputElement }) =>\n            (radioRef.checked = radioRef.value === value),\n        );\n      } else if (isFileInput(ref) && !isString(value)) {\n        ref.files = value as FileList;\n      } else if (isMultipleSelect(ref)) {\n        [...ref.options].forEach(\n          (selectRef) =>\n            (selectRef.selected = (value as string[]).includes(\n              selectRef.value,\n            )),\n        );\n      } else if (isCheckBoxInput(ref) && options) {\n        options.length > 1\n          ? options.forEach(\n              ({ ref: checkboxRef }) =>\n                (checkboxRef.checked = Array.isArray(value)\n                  ? !!(value as []).find(\n                      (data: string) => data === checkboxRef.value,\n                    )\n                  : value === checkboxRef.value),\n            )\n          : (options[0].ref.checked = !!value);\n      } else {\n        ref.value = value;\n      }\n    },\n    [],\n  );\n\n  const isFormDirty = React.useCallback(\n    (name?: string, data?: unknown[]): boolean => {\n      if (readFormStateRef.current.isDirty) {\n        const formValues = getValues();\n\n        name && data && set(formValues, name, data);\n\n        return !deepEqual(\n          formValues,\n          isEmptyObject(defaultValuesRef.current)\n            ? defaultValuesAtRenderRef.current\n            : defaultValuesRef.current,\n        );\n      }\n\n      return false;\n    },\n    [],\n  );\n\n  const updateAndGetDirtyState = React.useCallback(\n    (\n      name: InternalFieldName<TFieldValues>,\n      shouldRender = true,\n    ): Partial<{\n      dirtyFields: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty: boolean;\n      touched: FieldNamesMarkedBoolean<TFieldValues>;\n    }> => {\n      if (\n        readFormStateRef.current.isDirty ||\n        readFormStateRef.current.dirtyFields\n      ) {\n        const isFieldDirty = !deepEqual(\n          get(defaultValuesAtRenderRef.current, name),\n          getFieldValue(fieldsRef, name, shallowFieldsStateRef),\n        );\n        const isDirtyFieldExist = get(formStateRef.current.dirtyFields, name);\n        const previousIsDirty = formStateRef.current.isDirty;\n\n        isFieldDirty\n          ? set(formStateRef.current.dirtyFields, name, true)\n          : unset(formStateRef.current.dirtyFields, name);\n\n        const state = {\n          isDirty: isFormDirty(),\n          dirtyFields: formStateRef.current.dirtyFields,\n        };\n\n        const isChanged =\n          (readFormStateRef.current.isDirty &&\n            previousIsDirty !== state.isDirty) ||\n          (readFormStateRef.current.dirtyFields &&\n            isDirtyFieldExist !== get(formStateRef.current.dirtyFields, name));\n\n        if (isChanged && shouldRender) {\n          formStateRef.current = {\n            ...formStateRef.current,\n            ...state,\n          };\n          updateFormState({\n            ...formStateRef.current,\n          });\n        }\n\n        return isChanged ? state : {};\n      }\n\n      return {};\n    },\n    [],\n  );\n\n  const executeValidation = React.useCallback(\n    async (\n      name: InternalFieldName<TFieldValues>,\n      skipReRender?: boolean | null,\n    ): Promise<boolean> => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (!fieldsRef.current[name]) {\n          console.warn('📋 Field is missing with `name` attribute: ', name);\n          return false;\n        }\n      }\n\n      const error = (\n        await validateField<TFieldValues>(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          fieldsRef.current[name] as Field,\n          shallowFieldsStateRef,\n        )\n      )[name];\n\n      shouldRenderBaseOnError(name, error, skipReRender);\n\n      return isUndefined(error);\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const executeSchemaOrResolverValidation = React.useCallback(\n    async (\n      names:\n        | InternalFieldName<TFieldValues>\n        | InternalFieldName<TFieldValues>[],\n    ) => {\n      const { errors } = await resolverRef.current!(\n        getValues(),\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const previousFormIsValid = formStateRef.current.isValid;\n\n      if (Array.isArray(names)) {\n        const isInputsValid = names\n          .map((name) => {\n            const error = get(errors, name);\n\n            error\n              ? set(formStateRef.current.errors, name, error)\n              : unset(formStateRef.current.errors, name);\n\n            return !error;\n          })\n          .every(Boolean);\n\n        updateFormState({\n          isValid: isEmptyObject(errors),\n          errors: formStateRef.current.errors,\n        });\n\n        return isInputsValid;\n      } else {\n        const error = get(errors, names);\n\n        shouldRenderBaseOnError(\n          names,\n          error,\n          previousFormIsValid !== isEmptyObject(errors),\n          {},\n          isEmptyObject(errors),\n        );\n\n        return !error;\n      }\n    },\n    [shouldRenderBaseOnError, isValidateAllFieldCriteria],\n  );\n\n  const trigger = React.useCallback(\n    async (\n      name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n    ): Promise<boolean> => {\n      const fields = name || Object.keys(fieldsRef.current);\n\n      if (resolverRef.current) {\n        return executeSchemaOrResolverValidation(fields);\n      }\n\n      if (Array.isArray(fields)) {\n        !name && (formStateRef.current.errors = {});\n        const result = await Promise.all(\n          fields.map(async (data) => await executeValidation(data, null)),\n        );\n        updateFormState();\n        return result.every(Boolean);\n      }\n\n      return await executeValidation(fields, readFormStateRef.current.isValid);\n    },\n    [executeSchemaOrResolverValidation, executeValidation],\n  );\n\n  const setInternalValues = React.useCallback(\n    <T extends FieldName<TFieldValues>, U extends object | unknown[]>(\n      name: T,\n      value: U,\n      { shouldDirty, shouldValidate }: SetValueConfig,\n    ) => {\n      const data = {};\n      set(data, name, value);\n\n      for (const fieldName of getPath(name, value)) {\n        if (fieldsRef.current[fieldName]) {\n          setFieldValue(fieldName, get(data, fieldName));\n          shouldDirty && updateAndGetDirtyState(fieldName);\n          shouldValidate && trigger(fieldName as FieldName<TFieldValues>);\n        }\n      }\n    },\n    [trigger, setFieldValue, updateAndGetDirtyState],\n  );\n\n  const setInternalValue = React.useCallback(\n    (\n      name: FieldName<TFieldValues>,\n      value: SetFieldValue<TFieldValues>,\n      config: SetValueConfig,\n    ) => {\n      !isPrimitive(value) && set(shallowFieldsStateRef.current, name, value);\n\n      if (fieldsRef.current[name]) {\n        setFieldValue(name, value);\n        config.shouldDirty && updateAndGetDirtyState(name);\n        config.shouldValidate && trigger(name as any);\n      } else if (!isPrimitive(value)) {\n        setInternalValues(name, value, config);\n\n        if (fieldArrayNamesRef.current.has(name)) {\n          fieldArrayDefaultValuesRef.current[\n            name\n          ] = value as TFieldValues[string];\n          resetFieldArrayFunctionRef.current[name]({\n            [name]: value,\n          } as UnpackNestedValue<DeepPartial<TFieldValues>>);\n\n          if (\n            (readFormStateRef.current.isDirty ||\n              readFormStateRef.current.dirtyFields) &&\n            config.shouldDirty\n          ) {\n            set(\n              formStateRef.current.dirtyFields,\n              name,\n              setFieldArrayDirtyFields(\n                value,\n                get(defaultValuesRef.current, name, []),\n                get(formStateRef.current.dirtyFields, name, []),\n              ),\n            );\n\n            updateFormState({\n              isDirty: !deepEqual(\n                { ...getValues(), [name]: value },\n                defaultValuesRef.current,\n              ),\n              dirtyFields: formStateRef.current.dirtyFields,\n            });\n          }\n        }\n      }\n\n      !shouldUnregister && set(shallowFieldsStateRef.current, name, value);\n    },\n    [updateAndGetDirtyState, setFieldValue, setInternalValues],\n  );\n\n  const isFieldWatched = <T extends FieldName<FieldValues>>(name: T) =>\n    isWatchAllRef.current ||\n    watchFieldsRef.current.has(name) ||\n    watchFieldsRef.current.has((name.match(/\\w+/) || [])[0]);\n\n  const renderWatchedInputs = <T extends FieldName<FieldValues>>(\n    name: T,\n    found = true,\n  ): boolean => {\n    if (!isEmptyObject(useWatchFieldsRef.current)) {\n      for (const key in useWatchFieldsRef.current) {\n        if (\n          !name ||\n          !useWatchFieldsRef.current[key].size ||\n          useWatchFieldsRef.current[key].has(name) ||\n          useWatchFieldsRef.current[key].has(getNodeParentName(name))\n        ) {\n          useWatchRenderFunctionsRef.current[key]();\n          found = false;\n        }\n      }\n    }\n\n    return found;\n  };\n\n  function setValue(\n    name: FieldName<TFieldValues>,\n    value: SetFieldValue<TFieldValues>,\n    config?: SetValueConfig,\n  ): void {\n    setInternalValue(name, value, config || {});\n    isFieldWatched(name) && updateFormState();\n    renderWatchedInputs(name);\n  }\n\n  handleChangeRef.current = handleChangeRef.current\n    ? handleChangeRef.current\n    : async ({ type, target }: Event): Promise<void | boolean> => {\n        let name = (target as Ref)!.name;\n        const field = fieldsRef.current[name];\n        let error;\n        let isValid;\n\n        if (field) {\n          const isBlurEvent = type === EVENTS.BLUR;\n          const shouldSkipValidation = skipValidation({\n            isBlurEvent,\n            isReValidateOnChange,\n            isReValidateOnBlur,\n            isTouched: !!get(formStateRef.current.touched, name),\n            isSubmitted: formStateRef.current.isSubmitted,\n            ...modeRef.current,\n          });\n          let state = updateAndGetDirtyState(name, false);\n          let shouldRender = !isEmptyObject(state) || isFieldWatched(name);\n\n          if (\n            isBlurEvent &&\n            !get(formStateRef.current.touched, name) &&\n            readFormStateRef.current.touched\n          ) {\n            set(formStateRef.current.touched, name, true);\n            state = {\n              ...state,\n              touched: formStateRef.current.touched,\n            };\n          }\n\n          if (!shouldUnregister && isCheckBoxInput(target as Ref)) {\n            set(\n              shallowFieldsStateRef.current,\n              name,\n              getFieldValue(fieldsRef, name),\n            );\n          }\n\n          if (shouldSkipValidation) {\n            renderWatchedInputs(name);\n            return (\n              (!isEmptyObject(state) ||\n                (shouldRender && isEmptyObject(state))) &&\n              updateFormState(state)\n            );\n          }\n\n          if (resolverRef.current) {\n            const { errors } = await resolverRef.current(\n              getValues(),\n              contextRef.current,\n              isValidateAllFieldCriteria,\n            );\n            const previousFormIsValid = formStateRef.current.isValid;\n            error = get(errors, name);\n\n            if (\n              isCheckBoxInput(target as Ref) &&\n              !error &&\n              resolverRef.current\n            ) {\n              const parentNodeName = getNodeParentName(name);\n              const currentError = get(errors, parentNodeName, {});\n              currentError.type &&\n                currentError.message &&\n                (error = currentError);\n\n              if (\n                parentNodeName &&\n                (currentError ||\n                  get(formStateRef.current.errors, parentNodeName))\n              ) {\n                name = parentNodeName;\n              }\n            }\n\n            isValid = isEmptyObject(errors);\n\n            previousFormIsValid !== isValid && (shouldRender = true);\n          } else {\n            error = (\n              await validateField<TFieldValues>(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              )\n            )[name];\n          }\n\n          renderWatchedInputs(name);\n          shouldRenderBaseOnError(name, error, shouldRender, state, isValid);\n        }\n      };\n\n  function setFieldArrayDefaultValues<T extends FieldValues>(data: T): T {\n    if (!shouldUnregister) {\n      let copy = cloneObject(data, isWeb);\n\n      for (const value of fieldArrayNamesRef.current) {\n        if (isKey(value) && !copy[value]) {\n          copy = {\n            ...copy,\n            [value]: [],\n          };\n        }\n      }\n\n      return copy;\n    }\n    return data;\n  }\n\n  function getValues(): UnpackNestedValue<TFieldValues>;\n  function getValues<TFieldName extends string, TFieldValue extends unknown>(\n    name: TFieldName,\n  ): TFieldName extends keyof TFieldValues\n    ? UnpackNestedValue<TFieldValues>[TFieldName]\n    : TFieldValue;\n  function getValues<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function getValues(payload?: string | string[]): unknown {\n    if (isString(payload)) {\n      return getFieldValue(fieldsRef, payload, shallowFieldsStateRef);\n    }\n\n    if (Array.isArray(payload)) {\n      const data = {};\n\n      for (const name of payload) {\n        set(data, name, getFieldValue(fieldsRef, name, shallowFieldsStateRef));\n      }\n\n      return data;\n    }\n\n    return setFieldArrayDefaultValues(\n      getFieldsValues(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current, isWeb),\n        shouldUnregister,\n      ),\n    );\n  }\n\n  const validateResolver = React.useCallback(\n    async (values = {}) => {\n      const { errors } = await resolverRef.current!(\n        {\n          ...getValues(),\n          ...values,\n        },\n        contextRef.current,\n        isValidateAllFieldCriteria,\n      );\n      const isValid = isEmptyObject(errors);\n\n      formStateRef.current.isValid !== isValid &&\n        updateFormState({\n          isValid,\n        });\n    },\n    [isValidateAllFieldCriteria],\n  );\n\n  const removeFieldEventListener = React.useCallback(\n    (field: Field, forceDelete?: boolean) =>\n      findRemovedFieldAndRemoveListener(\n        fieldsRef,\n        handleChangeRef.current!,\n        field,\n        shallowFieldsStateRef,\n        shouldUnregister,\n        forceDelete,\n      ),\n    [shouldUnregister],\n  );\n\n  const updateWatchedValue = React.useCallback((name: string) => {\n    if (isWatchAllRef.current) {\n      updateFormState();\n    } else if (watchFieldsRef) {\n      for (const watchField of watchFieldsRef.current) {\n        if (watchField.startsWith(name)) {\n          updateFormState();\n          break;\n        }\n      }\n\n      renderWatchedInputs(name);\n    }\n  }, []);\n\n  const removeFieldEventListenerAndRef = React.useCallback(\n    (field?: Field, forceDelete?: boolean) => {\n      if (field) {\n        removeFieldEventListener(field, forceDelete);\n\n        if (shouldUnregister && !compact(field.options || []).length) {\n          unset(defaultValuesAtRenderRef.current, field.ref.name);\n          unset(validFieldsRef.current, field.ref.name);\n          unset(fieldsWithValidationRef.current, field.ref.name);\n          unset(formStateRef.current.errors, field.ref.name);\n          set(formStateRef.current.dirtyFields, field.ref.name, true);\n\n          updateFormState({\n            errors: formStateRef.current.errors,\n            isDirty: isFormDirty(),\n            dirtyFields: formStateRef.current.dirtyFields,\n          });\n\n          readFormStateRef.current.isValid &&\n            resolverRef.current &&\n            validateResolver();\n          updateWatchedValue(field.ref.name);\n        }\n      }\n    },\n    [validateResolver, removeFieldEventListener],\n  );\n\n  function clearErrors(\n    name?: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    name &&\n      (Array.isArray(name) ? name : [name]).forEach((inputName) =>\n        fieldsRef.current[inputName] && isKey(inputName)\n          ? delete formStateRef.current.errors[inputName]\n          : unset(formStateRef.current.errors, inputName),\n      );\n\n    updateFormState({\n      errors: name ? formStateRef.current.errors : {},\n    });\n  }\n\n  function setError(name: FieldName<TFieldValues>, error: ErrorOption) {\n    const ref = (fieldsRef.current[name] || {})!.ref;\n\n    set(formStateRef.current.errors, name, {\n      ...error,\n      ref,\n    });\n\n    updateFormState({\n      isValid: false,\n      errors: formStateRef.current.errors,\n    });\n\n    error.shouldFocus && ref && ref.focus && ref.focus();\n  }\n\n  const watchInternal = React.useCallback(\n    <T>(fieldNames?: string | string[], defaultValue?: T, watchId?: string) => {\n      const watchFields = watchId\n        ? useWatchFieldsRef.current[watchId]\n        : watchFieldsRef.current;\n      const combinedDefaultValues = isUndefined(defaultValue)\n        ? defaultValuesRef.current\n        : defaultValue;\n      let fieldValues = getFieldsValues<TFieldValues>(\n        fieldsRef,\n        cloneObject(shallowFieldsStateRef.current, isWeb),\n        shouldUnregister,\n        false,\n        fieldNames,\n      );\n\n      if (isString(fieldNames)) {\n        if (fieldArrayNamesRef.current.has(fieldNames)) {\n          const fieldArrayValue = get(\n            fieldArrayValuesRef.current,\n            fieldNames,\n            [],\n          );\n          fieldValues =\n            fieldArrayValue.length !==\n              compact(get(fieldValues, fieldNames, [])).length ||\n            !fieldArrayValue.length\n              ? fieldArrayValuesRef.current\n              : fieldValues;\n        }\n\n        return assignWatchFields<TFieldValues>(\n          fieldValues,\n          fieldNames,\n          watchFields,\n          isUndefined(defaultValue)\n            ? get(combinedDefaultValues, fieldNames)\n            : (defaultValue as UnpackNestedValue<DeepPartial<TFieldValues>>),\n          true,\n        );\n      }\n\n      if (Array.isArray(fieldNames)) {\n        return fieldNames.reduce(\n          (previous, name) => ({\n            ...previous,\n            [name]: assignWatchFields<TFieldValues>(\n              fieldValues,\n              name,\n              watchFields,\n              combinedDefaultValues as UnpackNestedValue<\n                DeepPartial<TFieldValues>\n              >,\n            ),\n          }),\n          {},\n        );\n      }\n\n      isWatchAllRef.current = isUndefined(watchId);\n\n      return transformToNestObject(\n        (!isEmptyObject(fieldValues) && fieldValues) ||\n          (combinedDefaultValues as FieldValues),\n      );\n    },\n    [],\n  );\n\n  function watch(): UnpackNestedValue<TFieldValues>;\n  function watch<\n    TFieldName extends string,\n    TFieldValue extends TFieldValues[TFieldName]\n  >(\n    name: TFieldName,\n    defaultValue?: UnpackNestedValue<LiteralToPrimitive<TFieldValue>>,\n  ): UnpackNestedValue<LiteralToPrimitive<TFieldValue>>;\n  function watch<TFieldName extends keyof TFieldValues>(\n    names: TFieldName[],\n    defaultValues?: UnpackNestedValue<\n      DeepPartial<Pick<TFieldValues, TFieldName>>\n    >,\n  ): UnpackNestedValue<Pick<TFieldValues, TFieldName>>;\n  function watch(\n    names: string[],\n    defaultValues?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n  ): UnpackNestedValue<DeepPartial<TFieldValues>>;\n  function watch(\n    fieldNames?: string | string[],\n    defaultValue?: unknown,\n  ): unknown {\n    return watchInternal(fieldNames, defaultValue);\n  }\n\n  function unregister(\n    name: FieldName<TFieldValues> | FieldName<TFieldValues>[],\n  ): void {\n    for (const fieldName of Array.isArray(name) ? name : [name]) {\n      removeFieldEventListenerAndRef(fieldsRef.current[fieldName], true);\n    }\n  }\n\n  function registerFieldRef<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: TFieldElement & Ref,\n    validateOptions: ValidationRules | null = {},\n  ): ((name: InternalFieldName<TFieldValues>) => void) | void {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!ref.name) {\n        return console.warn(\n          '📋 Field is missing `name` attribute',\n          ref,\n          `https://react-hook-form.com/api#useForm`,\n        );\n      }\n\n      if (\n        fieldArrayNamesRef.current.has(ref.name.split(/\\[\\d+\\]$/)[0]) &&\n        !RegExp(\n          `^${ref.name.split(/\\[\\d+\\]$/)[0]}[\\\\d+].\\\\w+`\n            .replace(/\\[/g, '\\\\[')\n            .replace(/\\]/g, '\\\\]'),\n        ).test(ref.name)\n      ) {\n        return console.warn(\n          '📋 `name` prop should be in object shape: name=\"test[index].name\"',\n          ref,\n          'https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const { name, type, value } = ref;\n    const fieldRefAndValidationOptions = {\n      ref,\n      ...validateOptions,\n    };\n    const fields = fieldsRef.current;\n    const isRadioOrCheckbox = isRadioOrCheckboxFunction(ref);\n    const isFieldArray = isNameInFieldArray(fieldArrayNamesRef.current, name);\n    const compareRef = (currentRef: Ref) =>\n      isWeb && (!isHTMLElement(ref) || currentRef === ref);\n    let field = fields[name] as Field;\n    let isEmptyDefaultValue = true;\n    let defaultValue;\n\n    if (\n      field &&\n      (isRadioOrCheckbox\n        ? Array.isArray(field.options) &&\n          compact(field.options).find((option) => {\n            return value === option.ref.value && compareRef(option.ref);\n          })\n        : compareRef(field.ref))\n    ) {\n      fields[name] = {\n        ...field,\n        ...validateOptions,\n      };\n      return;\n    }\n\n    if (type) {\n      field = isRadioOrCheckbox\n        ? {\n            options: [\n              ...compact((field && field.options) || []),\n              {\n                ref,\n              } as RadioOrCheckboxOption,\n            ],\n            ref: { type, name },\n            ...validateOptions,\n          }\n        : {\n            ...fieldRefAndValidationOptions,\n          };\n    } else {\n      field = fieldRefAndValidationOptions;\n    }\n\n    fields[name] = field;\n\n    const isEmptyUnmountFields = isUndefined(\n      get(shallowFieldsStateRef.current, name),\n    );\n\n    if (!isEmptyObject(defaultValuesRef.current) || !isEmptyUnmountFields) {\n      defaultValue = get(\n        isEmptyUnmountFields\n          ? defaultValuesRef.current\n          : shallowFieldsStateRef.current,\n        name,\n      );\n      isEmptyDefaultValue = isUndefined(defaultValue);\n\n      if (!isEmptyDefaultValue && !isFieldArray) {\n        setFieldValue(name, defaultValue);\n      }\n    }\n\n    if (!isEmptyObject(validateOptions)) {\n      set(fieldsWithValidationRef.current, name, true);\n\n      if (!isOnSubmit && readFormStateRef.current.isValid) {\n        validateField(\n          fieldsRef,\n          isValidateAllFieldCriteria,\n          field,\n          shallowFieldsStateRef,\n        ).then((error: FieldErrors) => {\n          const previousFormIsValid = formStateRef.current.isValid;\n\n          isEmptyObject(error)\n            ? set(validFieldsRef.current, name, true)\n            : unset(validFieldsRef.current, name);\n\n          if (previousFormIsValid !== isEmptyObject(error)) {\n            updateFormState();\n          }\n        });\n      }\n    }\n\n    if (\n      !defaultValuesAtRenderRef.current[name] &&\n      !(isFieldArray && isEmptyDefaultValue)\n    ) {\n      const fieldValue = getFieldValue(fieldsRef, name, shallowFieldsStateRef);\n      set(\n        defaultValuesAtRenderRef.current,\n        name,\n        isEmptyDefaultValue\n          ? isObject(fieldValue)\n            ? { ...fieldValue }\n            : fieldValue\n          : defaultValue,\n      );\n      !isFieldArray && unset(formStateRef.current.dirtyFields, name);\n    }\n\n    if (type) {\n      attachEventListeners(\n        isRadioOrCheckbox && field.options\n          ? field.options[field.options.length - 1]\n          : field,\n        isRadioOrCheckbox || isSelectInput(ref),\n        handleChangeRef.current,\n      );\n    }\n  }\n\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    rules?: ValidationRules,\n  ): (ref: (TFieldElement & Ref) | null) => void;\n  function register(\n    name: FieldName<TFieldValues>,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    ref: (TFieldElement & Ref) | null,\n    rules?: ValidationRules,\n  ): void;\n  function register<TFieldElement extends FieldElement<TFieldValues>>(\n    refOrValidationOptions?:\n      | FieldName<TFieldValues>\n      | ValidationRules\n      | (TFieldElement & Ref)\n      | null,\n    rules?: ValidationRules,\n  ): ((ref: (TFieldElement & Ref) | null) => void) | void {\n    if (!isWindowUndefined) {\n      if (isString(refOrValidationOptions)) {\n        registerFieldRef({ name: refOrValidationOptions }, rules);\n      } else if (\n        isObject(refOrValidationOptions) &&\n        'name' in refOrValidationOptions\n      ) {\n        registerFieldRef(refOrValidationOptions, rules);\n      } else {\n        return (ref: (TFieldElement & Ref) | null) =>\n          ref && registerFieldRef(ref, refOrValidationOptions);\n      }\n    }\n  }\n\n  const handleSubmit = React.useCallback(\n    <TSubmitFieldValues extends FieldValues = TFieldValues>(\n      onValid: SubmitHandler<TSubmitFieldValues>,\n      onInvalid?: SubmitErrorHandler<TFieldValues>,\n    ) => async (e?: React.BaseSyntheticEvent): Promise<void> => {\n      if (e && e.preventDefault) {\n        e.preventDefault();\n        e.persist();\n      }\n      let fieldErrors: FieldErrors<TFieldValues> = {};\n      let fieldValues = setFieldArrayDefaultValues(\n        getFieldsValues(\n          fieldsRef,\n          cloneObject(shallowFieldsStateRef.current, isWeb),\n          shouldUnregister,\n          true,\n        ),\n      );\n\n      readFormStateRef.current.isSubmitting &&\n        updateFormState({\n          isSubmitting: true,\n        });\n\n      try {\n        if (resolverRef.current) {\n          const { errors, values } = await resolverRef.current(\n            fieldValues,\n            contextRef.current,\n            isValidateAllFieldCriteria,\n          );\n          formStateRef.current.errors = fieldErrors = errors;\n          fieldValues = values;\n        } else {\n          for (const field of Object.values(fieldsRef.current)) {\n            if (field) {\n              const {\n                ref: { name },\n              } = field;\n\n              const fieldError = await validateField(\n                fieldsRef,\n                isValidateAllFieldCriteria,\n                field,\n                shallowFieldsStateRef,\n              );\n\n              if (fieldError[name]) {\n                set(fieldErrors, name, fieldError[name]);\n                unset(validFieldsRef.current, name);\n              } else if (get(fieldsWithValidationRef.current, name)) {\n                unset(formStateRef.current.errors, name);\n                set(validFieldsRef.current, name, true);\n              }\n            }\n          }\n        }\n\n        if (\n          isEmptyObject(fieldErrors) &&\n          Object.keys(formStateRef.current.errors).every(\n            (name) => name in fieldsRef.current,\n          )\n        ) {\n          updateFormState({\n            errors: {},\n            isSubmitting: true,\n          });\n          await onValid(fieldValues, e);\n        } else {\n          formStateRef.current.errors = {\n            ...formStateRef.current.errors,\n            ...fieldErrors,\n          };\n          onInvalid && (await onInvalid(formStateRef.current.errors, e));\n          shouldFocusError &&\n            focusOnErrorField(fieldsRef.current, formStateRef.current.errors);\n        }\n      } finally {\n        formStateRef.current.isSubmitting = false;\n        updateFormState({\n          isSubmitted: true,\n          isSubmitting: false,\n          isSubmitSuccessful: isEmptyObject(formStateRef.current.errors),\n          errors: formStateRef.current.errors,\n          submitCount: formStateRef.current.submitCount + 1,\n        });\n      }\n    },\n    [shouldFocusError, isValidateAllFieldCriteria],\n  );\n\n  const resetRefs = ({\n    errors,\n    isDirty,\n    isSubmitted,\n    touched,\n    isValid,\n    submitCount,\n    dirtyFields,\n  }: OmitResetState) => {\n    if (!isValid) {\n      validFieldsRef.current = {};\n      fieldsWithValidationRef.current = {};\n    }\n\n    defaultValuesAtRenderRef.current = {};\n    fieldArrayDefaultValuesRef.current = {};\n    watchFieldsRef.current = new Set();\n    isWatchAllRef.current = false;\n\n    updateFormState({\n      submitCount: submitCount ? formStateRef.current.submitCount : 0,\n      isDirty: isDirty ? formStateRef.current.isDirty : false,\n      isSubmitted: isSubmitted ? formStateRef.current.isSubmitted : false,\n      isValid: isValid ? formStateRef.current.isValid : false,\n      dirtyFields: dirtyFields ? formStateRef.current.dirtyFields : {},\n      touched: touched ? formStateRef.current.touched : {},\n      errors: errors ? formStateRef.current.errors : {},\n      isSubmitting: false,\n      isSubmitSuccessful: false,\n    });\n  };\n\n  const reset = (\n    values?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n    omitResetState: OmitResetState = {},\n  ): void => {\n    if (isWeb) {\n      for (const field of Object.values(fieldsRef.current)) {\n        if (field) {\n          const { ref, options } = field;\n          const inputRef =\n            isRadioOrCheckboxFunction(ref) && Array.isArray(options)\n              ? options[0].ref\n              : ref;\n\n          if (isHTMLElement(inputRef)) {\n            try {\n              inputRef.closest('form')!.reset();\n              break;\n            } catch {}\n          }\n        }\n      }\n    }\n\n    fieldsRef.current = {};\n    defaultValuesRef.current = cloneObject(\n      values || defaultValuesRef.current,\n      isWeb,\n    );\n    values && renderWatchedInputs('');\n\n    Object.values(resetFieldArrayFunctionRef.current).forEach(\n      (resetFieldArray) => isFunction(resetFieldArray) && resetFieldArray(),\n    );\n\n    shallowFieldsStateRef.current = shouldUnregister\n      ? {}\n      : cloneObject(values, isWeb) || {};\n\n    resetRefs(omitResetState);\n  };\n\n  React.useEffect(() => {\n    resolver && readFormStateRef.current.isValid && validateResolver();\n    observerRef.current =\n      observerRef.current || !isWeb\n        ? observerRef.current\n        : onDomRemove(fieldsRef, removeFieldEventListenerAndRef);\n  }, [removeFieldEventListenerAndRef, defaultValuesRef.current]);\n\n  React.useEffect(\n    () => () => {\n      isUnMount.current = true;\n      observerRef.current && observerRef.current.disconnect();\n\n      if (process.env.NODE_ENV !== 'production') {\n        return;\n      }\n\n      Object.values(fieldsRef.current).forEach((field) =>\n        removeFieldEventListenerAndRef(field, true),\n      );\n    },\n    [],\n  );\n\n  if (!resolver && readFormStateRef.current.isValid) {\n    formState.isValid =\n      deepEqual(validFieldsRef.current, fieldsWithValidationRef.current) &&\n      isEmptyObject(formStateRef.current.errors);\n  }\n\n  const commonProps = {\n    trigger,\n    setValue: React.useCallback(setValue, [setInternalValue, trigger]),\n    getValues: React.useCallback(getValues, []),\n    register: React.useCallback(register, [defaultValuesRef.current]),\n    unregister: React.useCallback(unregister, []),\n  };\n\n  const control = React.useMemo(\n    () => ({\n      isFormDirty,\n      updateWatchedValue,\n      shouldUnregister,\n      updateFormState,\n      removeFieldEventListener,\n      watchInternal,\n      mode: modeRef.current,\n      reValidateMode: {\n        isReValidateOnBlur,\n        isReValidateOnChange,\n      },\n      validateResolver: resolver ? validateResolver : undefined,\n      fieldsRef,\n      resetFieldArrayFunctionRef,\n      useWatchFieldsRef,\n      useWatchRenderFunctionsRef,\n      fieldArrayDefaultValuesRef,\n      validFieldsRef,\n      fieldsWithValidationRef,\n      fieldArrayNamesRef,\n      readFormStateRef,\n      formStateRef,\n      defaultValuesRef,\n      shallowFieldsStateRef,\n      fieldArrayValuesRef,\n      ...commonProps,\n    }),\n    [\n      defaultValuesRef.current,\n      updateWatchedValue,\n      shouldUnregister,\n      removeFieldEventListener,\n      watchInternal,\n    ],\n  );\n\n  return {\n    watch,\n    control,\n    formState: isProxyEnabled\n      ? new Proxy(formState, {\n          get: (obj, prop: keyof FormStateProxy) => {\n            if (process.env.NODE_ENV !== 'production') {\n              if (prop === 'isValid' && isOnSubmit) {\n                console.warn(\n                  '📋 `formState.isValid` is applicable with `onTouched`, `onChange` or `onBlur` mode. https://react-hook-form.com/api#formState',\n                );\n              }\n            }\n\n            if (prop in obj) {\n              readFormStateRef.current[prop] = true;\n              return obj[prop];\n            }\n\n            return undefined;\n          },\n        })\n      : formState,\n    handleSubmit,\n    reset: React.useCallback(reset, []),\n    clearErrors: React.useCallback(clearErrors, []),\n    setError: React.useCallback(setError, []),\n    errors: formState.errors,\n    ...commonProps,\n  };\n}\n","import * as React from 'react';\nimport { UseFormMethods, FieldValues, FormProviderProps } from './types';\n\nconst FormContext = React.createContext<UseFormMethods | null>(null);\n\nFormContext.displayName = 'RHFContext';\n\nexport const useFormContext = <\n  TFieldValues extends FieldValues\n>(): UseFormMethods<TFieldValues> =>\n  React.useContext(FormContext) as UseFormMethods<TFieldValues>;\n\nexport const FormProvider = <TFieldValues extends FieldValues>({\n  children,\n  ...props\n}: FormProviderProps<TFieldValues>) => (\n  <FormContext.Provider value={{ ...props } as UseFormMethods}>\n    {children}\n  </FormContext.Provider>\n);\n","import { UNDEFINED } from '../constants';\n\nexport default () => {\n  const d =\n    typeof performance === UNDEFINED ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import isUndefined from './isUndefined';\nimport compact from './compact';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(data, (Array.isArray(index) ? index : [index]).sort());\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (Array.isArray(data)) {\n    if (isUndefined(data[to])) {\n      data[to] = undefined;\n    }\n    data.splice(to, 0, data.splice(from, 1)[0]);\n    return data;\n  }\n\n  return [];\n};\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  const temp = [data[indexB], data[indexA]];\n  data[indexA] = temp[0];\n  data[indexB] = temp[1];\n};\n","export default function prepend<T>(data: T[]): (T | undefined)[];\nexport default function prepend<T>(data: T[], value: T | T[]): T[];\nexport default function prepend<T>(\n  data: T[],\n  value?: T | T[],\n): (T | undefined)[] {\n  return [...(Array.isArray(value) ? value : [value || undefined]), ...data];\n}\n","export default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...(Array.isArray(value) ? value : [value || undefined]),\n    ...data.slice(index),\n  ];\n}\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? Array(value.length).fill(undefined) : undefined;\n","import isObject from './isObject';\n\nfunction mapValueToBoolean<U>(value: U): boolean[] | Record<string, boolean>[] {\n  if (isObject(value)) {\n    const object: Record<string, boolean> = {};\n\n    for (const key in value) {\n      object[key] = true;\n    }\n\n    return [object];\n  }\n\n  return [true];\n}\n\nexport default <T>(value: T) =>\n  ((Array.isArray(value) ? value : [value]) as T[])\n    .map(mapValueToBoolean)\n    .flat();\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport setFieldArrayDirtyFields from './logic/setFieldArrayDirtyFields';\nimport { isMatchFieldArrayName } from './logic/isNameInFieldArray';\nimport generateId from './logic/generateId';\nimport getFieldArrayParentName from './logic/getNodeParentName';\nimport get from './utils/get';\nimport set from './utils/set';\nimport removeArrayAt from './utils/remove';\nimport unset from './utils/unset';\nimport moveArrayAt from './utils/move';\nimport swapArrayAt from './utils/swap';\nimport prependAt from './utils/prepend';\nimport insertAt from './utils/insert';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport fillBooleanArray from './utils/fillBooleanArray';\nimport compact from './utils/compact';\nimport {\n  Field,\n  FieldValues,\n  UseFieldArrayOptions,\n  Control,\n  ArrayField,\n  UnpackNestedValue,\n  DeepPartial,\n  UseFieldArrayMethods,\n} from './types';\nimport cloneObject from './utils/cloneObject';\n\nconst mapIds = <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id'\n>(\n  values: Partial<TFieldArrayValues>[] = [],\n  keyName: TKeyName,\n): Partial<ArrayField<TFieldArrayValues, TKeyName>>[] => {\n  if (process.env.NODE_ENV !== 'production') {\n    for (const value of values) {\n      if (typeof value === 'object') {\n        if (keyName in value) {\n          console.warn(\n            `📋 useFieldArray fieldValues contain the keyName \\`${keyName}\\` which is reserved for use by useFieldArray. https://react-hook-form.com/api#useFieldArray`,\n          );\n\n          break;\n        }\n      } else {\n        console.warn(\n          `📋 useFieldArray input's name should be in object shape instead of flat array. https://react-hook-form.com/api#useFieldArray`,\n        );\n\n        break;\n      }\n    }\n  }\n\n  return values.map((value: Partial<TFieldArrayValues>) => ({\n    [keyName]: generateId(),\n    ...value,\n  }));\n};\n\nexport const useFieldArray = <\n  TFieldArrayValues extends FieldValues = FieldValues,\n  TKeyName extends string = 'id',\n  TControl extends Control = Control\n>({\n  control,\n  name,\n  keyName = 'id' as TKeyName,\n}: UseFieldArrayOptions<TKeyName, TControl>): UseFieldArrayMethods<\n  TFieldArrayValues,\n  TKeyName\n> => {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 useFieldArray is missing `control` prop. https://react-hook-form.com/api#useFieldArray',\n      );\n    }\n  }\n\n  const focusIndexRef = React.useRef(-1);\n  const {\n    isFormDirty,\n    updateWatchedValue,\n    resetFieldArrayFunctionRef,\n    fieldArrayNamesRef,\n    fieldsRef,\n    defaultValuesRef,\n    removeFieldEventListener,\n    formStateRef,\n    shallowFieldsStateRef,\n    updateFormState,\n    readFormStateRef,\n    validFieldsRef,\n    fieldsWithValidationRef,\n    fieldArrayDefaultValuesRef,\n    validateResolver,\n    getValues,\n    shouldUnregister,\n    fieldArrayValuesRef,\n  } = control || methods.control;\n\n  const fieldArrayParentName = getFieldArrayParentName(name);\n  const memoizedDefaultValues = React.useRef<Partial<TFieldArrayValues>[]>([\n    ...(get(fieldArrayDefaultValuesRef.current, fieldArrayParentName)\n      ? get(fieldArrayDefaultValuesRef.current, name, [])\n      : get(\n          shouldUnregister\n            ? defaultValuesRef.current\n            : shallowFieldsStateRef.current,\n          name,\n          [],\n        )),\n  ]);\n  const [fields, setFields] = React.useState<\n    Partial<ArrayField<TFieldArrayValues, TKeyName>>[]\n  >(mapIds(memoizedDefaultValues.current, keyName));\n  set(fieldArrayValuesRef.current, name, fields);\n\n  const omitKey = <T extends (Partial<TFieldArrayValues> | undefined)[]>(\n    fields: T,\n  ) => fields.map(({ [keyName]: omitted, ...rest } = {}) => rest);\n\n  const getFieldArrayValue = React.useCallback(\n    () => get(fieldArrayValuesRef.current, name, []),\n    [],\n  );\n\n  const getCurrentFieldsValues = () =>\n    get(getValues(), name, getFieldArrayValue()).map(\n      (item: Partial<TFieldArrayValues>, index: number) => ({\n        ...getFieldArrayValue()[index],\n        ...item,\n      }),\n    );\n\n  fieldArrayNamesRef.current.add(name);\n\n  if (\n    fieldArrayParentName &&\n    !get(fieldArrayDefaultValuesRef.current, fieldArrayParentName)\n  ) {\n    set(\n      fieldArrayDefaultValuesRef.current,\n      fieldArrayParentName,\n      cloneObject(get(defaultValuesRef.current, fieldArrayParentName)),\n    );\n  }\n\n  const setFieldAndValidState = (\n    fieldsValues: Partial<ArrayField<TFieldArrayValues, TKeyName>>[],\n  ) => {\n    setFields(fieldsValues);\n    set(fieldArrayValuesRef.current, name, fieldsValues);\n\n    if (readFormStateRef.current.isValid && validateResolver) {\n      const values = getValues();\n      set(values, name, fieldsValues);\n      validateResolver(values);\n    }\n  };\n\n  const resetFields = () => {\n    for (const key in fieldsRef.current) {\n      isMatchFieldArrayName(key, name) &&\n        removeFieldEventListener(fieldsRef.current[key] as Field, true);\n    }\n  };\n\n  const cleanup = <T>(ref: T) =>\n    !compact(get(ref, name, [])).length && unset(ref, name);\n\n  const updateDirtyFieldsWithDefaultValues = <\n    T extends (Partial<TFieldArrayValues> | undefined)[]\n  >(\n    updatedFieldArrayValues?: T,\n  ) => {\n    if (updatedFieldArrayValues) {\n      set(\n        formStateRef.current.dirtyFields,\n        name,\n        setFieldArrayDirtyFields(\n          omitKey(updatedFieldArrayValues),\n          get(defaultValuesRef.current, name, []),\n          get(formStateRef.current.dirtyFields, name, []),\n        ),\n      );\n    }\n  };\n\n  const batchStateUpdate = <\n    T extends Function,\n    K extends (Partial<TFieldArrayValues> | undefined)[]\n  >(\n    method: T,\n    args: {\n      argA?: unknown;\n      argB?: unknown;\n      argC?: unknown;\n      argD?: unknown;\n    },\n    updatedFieldValues?: K,\n    updatedFormValues: (Partial<TFieldArrayValues> | undefined)[] = [],\n    shouldSet = true,\n    shouldUpdateValid = false,\n  ) => {\n    if (get(shallowFieldsStateRef.current, name)) {\n      const output = method(\n        get(shallowFieldsStateRef.current, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(shallowFieldsStateRef.current, name, output);\n    }\n\n    if (get(fieldArrayDefaultValuesRef.current, name)) {\n      const output = method(\n        get(fieldArrayDefaultValuesRef.current, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(fieldArrayDefaultValuesRef.current, name, output);\n      cleanup(fieldArrayDefaultValuesRef.current);\n    }\n\n    if (Array.isArray(get(formStateRef.current.errors, name))) {\n      const output = method(\n        get(formStateRef.current.errors, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(formStateRef.current.errors, name, output);\n      cleanup(formStateRef.current.errors);\n    }\n\n    if (\n      readFormStateRef.current.touched &&\n      get(formStateRef.current.touched, name)\n    ) {\n      const output = method(\n        get(formStateRef.current.touched, name),\n        args.argA,\n        args.argB,\n      );\n      shouldSet && set(formStateRef.current.touched, name, output);\n      cleanup(formStateRef.current.touched);\n    }\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      const output = method(\n        get(formStateRef.current.dirtyFields, name, []),\n        args.argC,\n        args.argD,\n      );\n      shouldSet && set(formStateRef.current.dirtyFields, name, output);\n      updateDirtyFieldsWithDefaultValues(updatedFieldValues);\n      cleanup(formStateRef.current.dirtyFields);\n    }\n\n    if (\n      shouldUpdateValid &&\n      readFormStateRef.current.isValid &&\n      !validateResolver\n    ) {\n      set(\n        validFieldsRef.current,\n        name,\n        method(get(validFieldsRef.current, name, []), args.argA),\n      );\n      cleanup(validFieldsRef.current);\n\n      set(\n        fieldsWithValidationRef.current,\n        name,\n        method(get(fieldsWithValidationRef.current, name, []), args.argA),\n      );\n      cleanup(fieldsWithValidationRef.current);\n    }\n\n    updateFormState({\n      errors: formStateRef.current.errors,\n      dirtyFields: formStateRef.current.dirtyFields,\n      isDirty: isFormDirty(name, omitKey(updatedFormValues)),\n      touched: formStateRef.current.touched,\n    });\n  };\n\n  const append = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const updateFormValues = [\n      ...getCurrentFieldsValues(),\n      ...mapIds(Array.isArray(value) ? value : [value], keyName),\n    ];\n    setFieldAndValidState(updateFormValues);\n\n    if (\n      readFormStateRef.current.dirtyFields ||\n      readFormStateRef.current.isDirty\n    ) {\n      updateDirtyFieldsWithDefaultValues(updateFormValues);\n\n      updateFormState({\n        isDirty: true,\n        dirtyFields: formStateRef.current.dirtyFields,\n      });\n    }\n\n    !shouldUnregister &&\n      set(shallowFieldsStateRef.current, name, [\n        ...(get(shallowFieldsStateRef.current, name) || []),\n        value,\n      ]);\n    focusIndexRef.current = shouldFocus ? fields.length : -1;\n  };\n\n  const prepend = (\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const emptyArray = fillEmptyArray(value);\n    const updatedFieldArrayValues = prependAt(\n      getCurrentFieldsValues(),\n      mapIds(Array.isArray(value) ? value : [value], keyName),\n    );\n\n    setFieldAndValidState(updatedFieldArrayValues);\n    resetFields();\n    batchStateUpdate(\n      prependAt,\n      {\n        argA: emptyArray,\n        argC: fillBooleanArray(value),\n      },\n      updatedFieldArrayValues,\n    );\n    focusIndexRef.current = shouldFocus ? 0 : -1;\n  };\n\n  const remove = (index?: number | number[]) => {\n    const fieldValues = getCurrentFieldsValues();\n    const updatedFieldValues: (\n      | Partial<TFieldArrayValues>\n      | undefined\n    )[] = removeArrayAt(fieldValues, index);\n    setFieldAndValidState(\n      updatedFieldValues as Partial<ArrayField<TFieldArrayValues, TKeyName>>[],\n    );\n    resetFields();\n    batchStateUpdate(\n      removeArrayAt,\n      {\n        argA: index,\n        argC: index,\n      },\n      updatedFieldValues,\n      removeArrayAt(fieldValues, index),\n      true,\n      true,\n    );\n  };\n\n  const insert = (\n    index: number,\n    value: Partial<TFieldArrayValues> | Partial<TFieldArrayValues>[],\n    shouldFocus = true,\n  ) => {\n    const emptyArray = fillEmptyArray(value);\n    const fieldValues = getCurrentFieldsValues();\n    const updatedFieldArrayValues = insertAt(\n      fieldValues,\n      index,\n      mapIds(Array.isArray(value) ? value : [value], keyName),\n    );\n\n    setFieldAndValidState(updatedFieldArrayValues);\n    resetFields();\n    batchStateUpdate(\n      insertAt,\n      {\n        argA: index,\n        argB: emptyArray,\n        argC: index,\n        argD: fillBooleanArray(value),\n      },\n      updatedFieldArrayValues,\n      insertAt(fieldValues, index),\n    );\n    focusIndexRef.current = shouldFocus ? index : -1;\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    swapArrayAt(fieldValues, indexA, indexB);\n    resetFields();\n    setFieldAndValidState([...fieldValues]);\n    batchStateUpdate(\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n        argC: indexA,\n        argD: indexB,\n      },\n      undefined,\n      fieldValues,\n      false,\n    );\n  };\n\n  const move = (from: number, to: number) => {\n    const fieldValues = getCurrentFieldsValues();\n    moveArrayAt(fieldValues, from, to);\n    resetFields();\n    setFieldAndValidState([...fieldValues]);\n    batchStateUpdate(\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n        argC: from,\n        argD: to,\n      },\n      undefined,\n      fieldValues,\n      false,\n    );\n  };\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (!name) {\n        console.warn(\n          '📋 useFieldArray is missing `name` attribute. https://react-hook-form.com/api#useFieldArray',\n        );\n      }\n    }\n\n    const defaultValues = get(fieldArrayDefaultValuesRef.current, name);\n\n    if (defaultValues && fields.length < defaultValues.length) {\n      defaultValues.pop();\n      set(fieldArrayDefaultValuesRef.current, name, defaultValues);\n    }\n\n    updateWatchedValue(name);\n\n    if (focusIndexRef.current > -1) {\n      for (const key in fieldsRef.current) {\n        const field = fieldsRef.current[key];\n        if (\n          key.startsWith(`${name}[${focusIndexRef.current}]`) &&\n          field!.ref.focus\n        ) {\n          field!.ref.focus();\n          break;\n        }\n      }\n    }\n\n    focusIndexRef.current = -1;\n  }, [fields, name]);\n\n  React.useEffect(() => {\n    const resetFunctions = resetFieldArrayFunctionRef.current;\n    const fieldArrayNames = fieldArrayNamesRef.current;\n\n    if (!getFieldArrayParentName(name)) {\n      resetFunctions[name] = <TFieldValues>(\n        data?: UnpackNestedValue<DeepPartial<TFieldValues>>,\n      ) => {\n        resetFields();\n        !data && unset(fieldArrayDefaultValuesRef.current, name);\n        unset(shallowFieldsStateRef.current, name);\n        memoizedDefaultValues.current = get(\n          data || defaultValuesRef.current,\n          name,\n        );\n        setFields(mapIds(memoizedDefaultValues.current, keyName));\n      };\n    }\n\n    return () => {\n      resetFields();\n      delete resetFunctions[name];\n      unset(fieldArrayValuesRef, name);\n      fieldArrayNames.delete(name);\n    };\n  }, []);\n\n  return {\n    swap: React.useCallback(swap, [name]),\n    move: React.useCallback(move, [name]),\n    prepend: React.useCallback(prepend, [name]),\n    append: React.useCallback(append, [name, fields]),\n    remove: React.useCallback(remove, [name]),\n    insert: React.useCallback(insert, [name]),\n    fields,\n  };\n};\n","import * as React from 'react';\nimport { useFormContext } from './useFormContext';\nimport isUndefined from './utils/isUndefined';\nimport isString from './utils/isString';\nimport generateId from './logic/generateId';\nimport get from './utils/get';\nimport {\n  DeepPartial,\n  UseWatchOptions,\n  FieldValues,\n  UnpackNestedValue,\n  Control,\n} from './types';\n\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  control?: Control;\n}): undefined | UnpackNestedValue<TWatchFieldValue>;\nexport function useWatch<TWatchFieldValue extends any>(props: {\n  name: string;\n  defaultValue: UnpackNestedValue<TWatchFieldValue>;\n  control?: Control;\n}): UnpackNestedValue<TWatchFieldValue>;\nexport function useWatch<TWatchFieldValues extends FieldValues>(props: {\n  name: string[];\n  defaultValue?: UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\n  control?: Control;\n}): UnpackNestedValue<DeepPartial<TWatchFieldValues>>;\nexport function useWatch<TWatchFieldValues>({\n  control,\n  name,\n  defaultValue,\n}: UseWatchOptions): TWatchFieldValues {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 useWatch is missing `control` prop. https://react-hook-form.com/api#useWatch',\n      );\n    }\n  }\n\n  const {\n    useWatchFieldsRef,\n    useWatchRenderFunctionsRef,\n    watchInternal,\n    defaultValuesRef,\n  } = control || methods.control;\n  const updateValue = React.useState<unknown>()[1];\n  const idRef = React.useRef<string>();\n  const defaultValueRef = React.useRef(defaultValue);\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (name === '') {\n        console.warn(\n          '📋 useWatch is missing `name` attribute. https://react-hook-form.com/api#useWatch',\n        );\n      }\n    }\n\n    const id = (idRef.current = generateId());\n    const watchFieldsHookRender = useWatchRenderFunctionsRef.current;\n    const watchFieldsHook = useWatchFieldsRef.current;\n    watchFieldsHook[id] = new Set();\n    watchFieldsHookRender[id] = () => updateValue({});\n    watchInternal(name, defaultValueRef.current, id);\n\n    return () => {\n      delete watchFieldsHook[id];\n      delete watchFieldsHookRender[id];\n    };\n  }, [\n    name,\n    useWatchRenderFunctionsRef,\n    useWatchFieldsRef,\n    watchInternal,\n    defaultValueRef,\n  ]);\n\n  return idRef.current\n    ? watchInternal(name, defaultValueRef.current, idRef.current)\n    : isUndefined(defaultValue)\n    ? isString(name)\n      ? get(defaultValuesRef.current, name)\n      : Array.isArray(name)\n      ? name.reduce(\n          (previous, inputName) => ({\n            ...previous,\n            [inputName]: get(defaultValuesRef.current, inputName),\n          }),\n          {},\n        )\n      : defaultValuesRef.current\n    : defaultValue;\n}\n","import isUndefined from '../utils/isUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\n\nexport default (event: any) =>\n  isPrimitive(event) ||\n  !isObject(event.target) ||\n  (isObject(event.target) && !event.type)\n    ? event\n    : isUndefined(event.target.value)\n    ? event.target.checked\n    : event.target.value;\n","import { useFormContext } from './useFormContext';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport isUndefined from './utils/isUndefined';\nimport get from './utils/get';\nimport * as React from 'react';\nimport isFunction from './utils/isFunction';\nimport skipValidation from './logic/skipValidation';\nimport getInputValue from './logic/getInputValue';\nimport set from './utils/set';\nimport { Control, ControllerProps, UseField } from './types';\n\nexport function useField<\n  TAs extends\n    | React.ReactElement\n    | React.ComponentType<any>\n    | 'input'\n    | 'select'\n    | 'textarea',\n  TControl extends Control = Control\n>({\n  name,\n  rules,\n  defaultValue,\n  control,\n  onFocus,\n}: Exclude<\n  ControllerProps<TAs, TControl>,\n  'as' | 'render'\n>): UseField<TControl> {\n  const methods = useFormContext();\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (!control && !methods) {\n      throw new Error(\n        '📋 Controller is missing `control` prop. https://react-hook-form.com/api#Controller',\n      );\n    }\n  }\n\n  const {\n    defaultValuesRef,\n    setValue,\n    register,\n    unregister,\n    trigger,\n    mode,\n    reValidateMode: { isReValidateOnBlur, isReValidateOnChange },\n    formStateRef: {\n      current: { isSubmitted, touched, errors, dirtyFields },\n    },\n    updateFormState,\n    readFormStateRef,\n    fieldsRef,\n    fieldArrayNamesRef,\n    shallowFieldsStateRef,\n  } = control || methods.control;\n\n  const isNotFieldArray = !isNameInFieldArray(fieldArrayNamesRef.current, name);\n  const getInitialValue = () =>\n    !isUndefined(get(shallowFieldsStateRef.current, name)) && isNotFieldArray\n      ? get(shallowFieldsStateRef.current, name)\n      : isUndefined(defaultValue)\n      ? get(defaultValuesRef.current, name)\n      : defaultValue;\n  const [value, setInputStateValue] = React.useState(getInitialValue());\n  const valueRef = React.useRef(value);\n  const ref = React.useRef({\n    focus: () => null,\n  });\n  const onFocusRef = React.useRef(\n    onFocus ||\n      (() => {\n        if (isFunction(ref.current.focus)) {\n          ref.current.focus();\n        }\n\n        if (process.env.NODE_ENV !== 'production') {\n          if (!isFunction(ref.current.focus)) {\n            console.warn(\n              `📋 'ref' from Controller render prop must be attached to a React component or a DOM Element whose ref provides a 'focus()' method`,\n            );\n          }\n        }\n      }),\n  );\n\n  const shouldValidate = React.useCallback(\n    (isBlurEvent?: boolean) =>\n      !skipValidation({\n        isBlurEvent,\n        isReValidateOnBlur,\n        isReValidateOnChange,\n        isSubmitted,\n        isTouched: !!get(touched, name),\n        ...mode,\n      }),\n    [\n      isReValidateOnBlur,\n      isReValidateOnChange,\n      isSubmitted,\n      touched,\n      name,\n      mode,\n    ],\n  );\n\n  const commonTask = React.useCallback(([event]: any[]) => {\n    const data = getInputValue(event);\n    setInputStateValue(data);\n    valueRef.current = data;\n    return data;\n  }, []);\n\n  const registerField = React.useCallback(\n    (shouldUpdateValue?: boolean) => {\n      if (process.env.NODE_ENV !== 'production') {\n        if (!name) {\n          return console.warn(\n            '📋 Field is missing `name` prop. https://react-hook-form.com/api#Controller',\n          );\n        }\n      }\n\n      if (fieldsRef.current[name]) {\n        fieldsRef.current[name] = {\n          ref: fieldsRef.current[name]!.ref,\n          ...rules,\n        };\n      } else {\n        register(\n          Object.defineProperty(\n            {\n              name,\n              focus: onFocusRef.current,\n            },\n            'value',\n            {\n              set(data) {\n                setInputStateValue(data);\n                valueRef.current = data;\n              },\n              get() {\n                return valueRef.current;\n              },\n            },\n          ),\n          rules,\n        );\n\n        shouldUpdateValue = !get(defaultValuesRef.current, name);\n      }\n\n      shouldUpdateValue &&\n        isNotFieldArray &&\n        setInputStateValue(getInitialValue());\n    },\n    [rules, name, register],\n  );\n\n  React.useEffect(() => () => unregister(name), [name]);\n\n  React.useEffect(() => {\n    if (process.env.NODE_ENV !== 'production') {\n      if (isUndefined(value)) {\n        console.warn(\n          `📋 ${name} is missing in the 'defaultValue' prop of either its Controller (https://react-hook-form.com/api#Controller) or useForm (https://react-hook-form.com/api#useForm)`,\n        );\n      }\n\n      if (!isNotFieldArray && isUndefined(defaultValue)) {\n        console.warn(\n          '📋 Controller is missing `defaultValue` prop when using `useFieldArray`. https://react-hook-form.com/api#Controller',\n        );\n      }\n    }\n\n    registerField();\n  }, [registerField]);\n\n  React.useEffect(() => {\n    !fieldsRef.current[name] && registerField(true);\n  });\n\n  const onBlur = React.useCallback(() => {\n    if (readFormStateRef.current.touched && !get(touched, name)) {\n      set(touched, name, true);\n      updateFormState({\n        touched,\n      });\n    }\n\n    shouldValidate(true) && trigger(name);\n  }, [name, updateFormState, shouldValidate, trigger, readFormStateRef]);\n\n  const onChange = React.useCallback(\n    (...event: any[]) =>\n      setValue(name, commonTask(event), {\n        shouldValidate: shouldValidate(),\n        shouldDirty: true,\n      }),\n    [setValue, name, shouldValidate],\n  );\n\n  return {\n    field: {\n      onChange,\n      onBlur,\n      name,\n      value,\n      ref,\n    },\n    state: {\n      inValid: !get(errors, name),\n      isDirty: !!get(dirtyFields, name),\n      isTouched: !!get(touched, name),\n    },\n  };\n}\n","import * as React from 'react';\nimport { useField } from './useField';\nimport { Control } from './types';\nimport { ControllerProps } from './types';\n\ntype NativeInputs = 'input' | 'select' | 'textarea';\n\nconst Controller = <\n  TAs extends React.ReactElement | React.ComponentType<any> | NativeInputs,\n  TControl extends Control = Control\n>(\n  props: ControllerProps<TAs, TControl>,\n) => {\n  const { rules, as, render, defaultValue, control, onFocus, ...rest } = props;\n  const { field } = useField(props);\n\n  const componentProps = {\n    ...rest,\n    ...field,\n  };\n\n  return as\n    ? React.isValidElement(as)\n      ? React.cloneElement(as, componentProps)\n      : React.createElement(as as NativeInputs, componentProps as any)\n    : render\n    ? render(field)\n    : null;\n};\n\nexport { Controller };\n"]},"metadata":{},"sourceType":"module"}