{"ast":null,"code":"import _objectSpread from\"/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _taggedTemplateLiteral from\"/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";var _templateObject,_templateObject2,_templateObject3,_templateObject4,_templateObject5,_templateObject6,_templateObject7,_templateObject8,_templateObject9,_templateObject10,_templateObject11,_templateObject12,_templateObject13,_templateObject14,_templateObject15,_templateObject16,_templateObject17,_templateObject18,_templateObject19,_templateObject20,_templateObject21,_templateObject22,_templateObject23,_templateObject24,_templateObject25,_templateObject26,_templateObject27,_templateObject28,_templateObject29,_templateObject30,_templateObject31;import{gql}from'@apollo/client';import*as Apollo from'@apollo/client';var defaultOptions={};export var UserIdNameFragmentDoc=gql(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n    fragment userIdName on User {\\n  user_id\\n  user_name\\n  family_name\\n  given_name\\n}\\n    \"])));export var ClassIdNameStatusFragmentDoc=gql(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n    fragment classIdNameStatus on Class {\\n  class_id\\n  class_name\\n  status\\n}\\n    \"])));export var ClassesByOrganizationDocument=gql(_templateObject3||(_templateObject3=_taggedTemplateLiteral([\"\\n    query classesByOrganization($organization_id: ID!) {\\n  organization(organization_id: $organization_id) {\\n    classes {\\n      class_id\\n      class_name\\n      status\\n      schools {\\n        school_id\\n        school_name\\n      }\\n      teachers {\\n        user_id\\n        user_name\\n      }\\n      students {\\n        user_id\\n        user_name\\n      }\\n    }\\n  }\\n}\\n    \"])));/**\n * __useClassesByOrganizationQuery__\n *\n * To run a query within a React component, call `useClassesByOrganizationQuery` and pass it any options that fit your needs.\n * When your component renders, `useClassesByOrganizationQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useClassesByOrganizationQuery({\n *   variables: {\n *      organization_id: // value for 'organization_id'\n *   },\n * });\n */export function useClassesByOrganizationQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useQuery(ClassesByOrganizationDocument,options);}export function useClassesByOrganizationLazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useLazyQuery(ClassesByOrganizationDocument,options);}export var ParticipantsByClassDocument=gql(_templateObject4||(_templateObject4=_taggedTemplateLiteral([\"\\n    query participantsByClass($class_id: ID!) {\\n  class(class_id: $class_id) {\\n    teachers {\\n      ...userIdName\\n    }\\n    students {\\n      ...userIdName\\n    }\\n  }\\n}\\n    \",\"\"])),UserIdNameFragmentDoc);/**\n * __useParticipantsByClassQuery__\n *\n * To run a query within a React component, call `useParticipantsByClassQuery` and pass it any options that fit your needs.\n * When your component renders, `useParticipantsByClassQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useParticipantsByClassQuery({\n *   variables: {\n *      class_id: // value for 'class_id'\n *   },\n * });\n */export function useParticipantsByClassQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useQuery(ParticipantsByClassDocument,options);}export function useParticipantsByClassLazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useLazyQuery(ParticipantsByClassDocument,options);}export var QueryMyUserDocument=gql(_templateObject5||(_templateObject5=_taggedTemplateLiteral([\"\\n    query queryMyUser {\\n  myUser {\\n    node {\\n      id\\n      givenName\\n      familyName\\n    }\\n  }\\n}\\n    \"])));/**\n * __useQueryMyUserQuery__\n *\n * To run a query within a React component, call `useQueryMyUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useQueryMyUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useQueryMyUserQuery({\n *   variables: {\n *   },\n * });\n */export function useQueryMyUserQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useQuery(QueryMyUserDocument,options);}export function useQueryMyUserLazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useLazyQuery(QueryMyUserDocument,options);}export var GetSchoolMembershipsDocument=gql(_templateObject6||(_templateObject6=_taggedTemplateLiteral([\"\\n    query getSchoolMemberships($userId: UUIDFilter, $organizationId: UUIDFilter, $cursor: String) {\\n  schoolsConnection(\\n    filter: {userId: $userId, organizationId: $organizationId}\\n    direction: FORWARD\\n    directionArgs: {cursor: $cursor}\\n  ) {\\n    totalCount\\n    pageInfo {\\n      hasNextPage\\n      endCursor\\n    }\\n    edges {\\n      node {\\n        id\\n        status\\n      }\\n    }\\n  }\\n}\\n    \"])));/**\n * __useGetSchoolMembershipsQuery__\n *\n * To run a query within a React component, call `useGetSchoolMembershipsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetSchoolMembershipsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetSchoolMembershipsQuery({\n *   variables: {\n *      userId: // value for 'userId'\n *      organizationId: // value for 'organizationId'\n *      cursor: // value for 'cursor'\n *   },\n * });\n */export function useGetSchoolMembershipsQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useQuery(GetSchoolMembershipsDocument,options);}export function useGetSchoolMembershipsLazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useLazyQuery(GetSchoolMembershipsDocument,options);}export var GetClassesTeachingDocument=gql(_templateObject7||(_templateObject7=_taggedTemplateLiteral([\"\\n    query getClassesTeaching($organizationId: UUIDFilter, $cursor: String) {\\n  myUser {\\n    node {\\n      classesTeachingConnection(\\n        filter: {organizationId: $organizationId}\\n        cursor: $cursor\\n      ) {\\n        totalCount\\n        pageInfo {\\n          hasNextPage\\n          endCursor\\n        }\\n        edges {\\n          node {\\n            id\\n            status\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n    \"])));/**\n * __useGetClassesTeachingQuery__\n *\n * To run a query within a React component, call `useGetClassesTeachingQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetClassesTeachingQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetClassesTeachingQuery({\n *   variables: {\n *      organizationId: // value for 'organizationId'\n *      cursor: // value for 'cursor'\n *   },\n * });\n */export function useGetClassesTeachingQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useQuery(GetClassesTeachingDocument,options);}export function useGetClassesTeachingLazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useLazyQuery(GetClassesTeachingDocument,options);}export var GetStudentNameByIdDocument=gql(_templateObject8||(_templateObject8=_taggedTemplateLiteral([\"\\n    query getStudentNameById($filter: UserFilter, $directionArgs: ConnectionsDirectionArgs) {\\n  usersConnection(\\n    filter: $filter\\n    direction: FORWARD\\n    directionArgs: $directionArgs\\n  ) {\\n    edges {\\n      node {\\n        id\\n        givenName\\n        familyName\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n      endCursor\\n    }\\n  }\\n}\\n    \"])));/**\n * __useGetStudentNameByIdQuery__\n *\n * To run a query within a React component, call `useGetStudentNameByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetStudentNameByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetStudentNameByIdQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *      directionArgs: // value for 'directionArgs'\n *   },\n * });\n */export function useGetStudentNameByIdQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useQuery(GetStudentNameByIdDocument,options);}export function useGetStudentNameByIdLazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useLazyQuery(GetStudentNameByIdDocument,options);}export var GetOrganizationsDocument=gql(_templateObject9||(_templateObject9=_taggedTemplateLiteral([\"\\n    query getOrganizations($direction: ConnectionDirection!, $cursor: String, $count: PageSize, $sort: OrganizationSortInput!, $filter: OrganizationFilter!) {\\n  organizationsConnection(\\n    direction: $direction\\n    filter: $filter\\n    directionArgs: {count: $count, cursor: $cursor}\\n    sort: $sort\\n  ) {\\n    totalCount\\n    edges {\\n      node {\\n        id\\n        name\\n        owners {\\n          email\\n        }\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n      hasPreviousPage\\n      startCursor\\n      endCursor\\n    }\\n  }\\n}\\n    \"])));/**\n * __useGetOrganizationsQuery__\n *\n * To run a query within a React component, call `useGetOrganizationsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetOrganizationsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetOrganizationsQuery({\n *   variables: {\n *      direction: // value for 'direction'\n *      cursor: // value for 'cursor'\n *      count: // value for 'count'\n *      sort: // value for 'sort'\n *      filter: // value for 'filter'\n *   },\n * });\n */export function useGetOrganizationsQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useQuery(GetOrganizationsDocument,options);}export function useGetOrganizationsLazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useLazyQuery(GetOrganizationsDocument,options);}export var ClassesBySchoolDocument=gql(_templateObject10||(_templateObject10=_taggedTemplateLiteral([\"\\n    query classesBySchool($school_id: ID!) {\\n  school(school_id: $school_id) {\\n    classes {\\n      ...classIdNameStatus\\n      schools {\\n        school_id\\n        school_name\\n      }\\n      teachers {\\n        ...userIdName\\n      }\\n      students {\\n        ...userIdName\\n      }\\n    }\\n  }\\n}\\n    \",\"\\n\",\"\"])),ClassIdNameStatusFragmentDoc,UserIdNameFragmentDoc);/**\n * __useClassesBySchoolQuery__\n *\n * To run a query within a React component, call `useClassesBySchoolQuery` and pass it any options that fit your needs.\n * When your component renders, `useClassesBySchoolQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useClassesBySchoolQuery({\n *   variables: {\n *      school_id: // value for 'school_id'\n *   },\n * });\n */export function useClassesBySchoolQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useQuery(ClassesBySchoolDocument,options);}export function useClassesBySchoolLazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useLazyQuery(ClassesBySchoolDocument,options);}export var ClassesTeachingQueryDocument=gql(_templateObject11||(_templateObject11=_taggedTemplateLiteral([\"\\n    query classesTeachingQuery($user_id: ID!, $organization_id: ID!) {\\n  user(user_id: $user_id) {\\n    membership(organization_id: $organization_id) {\\n      classesTeaching {\\n        class_id\\n        class_name\\n        status\\n        schools {\\n          school_id\\n          school_name\\n        }\\n        teachers {\\n          user_id\\n          user_name\\n        }\\n        students {\\n          user_id\\n          user_name\\n        }\\n      }\\n    }\\n  }\\n}\\n    \"])));/**\n * __useClassesTeachingQueryQuery__\n *\n * To run a query within a React component, call `useClassesTeachingQueryQuery` and pass it any options that fit your needs.\n * When your component renders, `useClassesTeachingQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useClassesTeachingQueryQuery({\n *   variables: {\n *      user_id: // value for 'user_id'\n *      organization_id: // value for 'organization_id'\n *   },\n * });\n */export function useClassesTeachingQueryQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useQuery(ClassesTeachingQueryDocument,options);}export function useClassesTeachingQueryLazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useLazyQuery(ClassesTeachingQueryDocument,options);}export var ClassesStudentQueryDocument=gql(_templateObject12||(_templateObject12=_taggedTemplateLiteral([\"\\n    query classesStudentQuery($user_id: ID!, $organization_id: ID!) {\\n  user(user_id: $user_id) {\\n    membership(organization_id: $organization_id) {\\n      classes {\\n        class_id\\n        class_name\\n        status\\n        schools {\\n          school_id\\n          school_name\\n        }\\n        teachers {\\n          user_id\\n          user_name\\n        }\\n        students {\\n          user_id\\n          user_name\\n        }\\n      }\\n    }\\n  }\\n}\\n    \"])));/**\n * __useClassesStudentQueryQuery__\n *\n * To run a query within a React component, call `useClassesStudentQueryQuery` and pass it any options that fit your needs.\n * When your component renders, `useClassesStudentQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useClassesStudentQueryQuery({\n *   variables: {\n *      user_id: // value for 'user_id'\n *      organization_id: // value for 'organization_id'\n *   },\n * });\n */export function useClassesStudentQueryQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useQuery(ClassesStudentQueryDocument,options);}export function useClassesStudentQueryLazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useLazyQuery(ClassesStudentQueryDocument,options);}export var SchoolByUserQueryDocument=gql(_templateObject13||(_templateObject13=_taggedTemplateLiteral([\"\\n    query schoolByUserQuery($user_id: ID!, $organization_id: ID!) {\\n  user(user_id: $user_id) {\\n    membership(organization_id: $organization_id) {\\n      schoolMemberships {\\n        school {\\n          school_id\\n          school_name\\n          classes {\\n            status\\n            class_id\\n            class_name\\n            teachers {\\n              user_id\\n              user_name\\n            }\\n            students {\\n              user_id\\n              user_name\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n    \"])));/**\n * __useSchoolByUserQueryQuery__\n *\n * To run a query within a React component, call `useSchoolByUserQueryQuery` and pass it any options that fit your needs.\n * When your component renders, `useSchoolByUserQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSchoolByUserQueryQuery({\n *   variables: {\n *      user_id: // value for 'user_id'\n *      organization_id: // value for 'organization_id'\n *   },\n * });\n */export function useSchoolByUserQueryQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useQuery(SchoolByUserQueryDocument,options);}export function useSchoolByUserQueryLazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useLazyQuery(SchoolByUserQueryDocument,options);}export var SchoolByOrgQueryDocument=gql(_templateObject14||(_templateObject14=_taggedTemplateLiteral([\"\\n    query schoolByOrgQuery($organization_id: ID!) {\\n  organization(organization_id: $organization_id) {\\n    schools {\\n      school_id\\n      school_name\\n      classes {\\n        status\\n        class_id\\n        class_name\\n        teachers {\\n          user_id\\n          user_name\\n        }\\n        students {\\n          user_id\\n          user_name\\n        }\\n      }\\n    }\\n  }\\n}\\n    \"])));/**\n * __useSchoolByOrgQueryQuery__\n *\n * To run a query within a React component, call `useSchoolByOrgQueryQuery` and pass it any options that fit your needs.\n * When your component renders, `useSchoolByOrgQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSchoolByOrgQueryQuery({\n *   variables: {\n *      organization_id: // value for 'organization_id'\n *   },\n * });\n */export function useSchoolByOrgQueryQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useQuery(SchoolByOrgQueryDocument,options);}export function useSchoolByOrgQueryLazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useLazyQuery(SchoolByOrgQueryDocument,options);}export var GetProgramsDocument=gql(_templateObject15||(_templateObject15=_taggedTemplateLiteral([\"\\n    query getPrograms($program_id: ID!) {\\n  program(id: $program_id) {\\n    id\\n    name\\n    status\\n    subjects {\\n      id\\n      name\\n      status\\n      categories {\\n        id\\n        name\\n        status\\n        subcategories {\\n          id\\n          name\\n          status\\n        }\\n      }\\n    }\\n    age_ranges {\\n      id\\n      name\\n      status\\n    }\\n    grades {\\n      id\\n      name\\n      status\\n    }\\n  }\\n}\\n    \"])));/**\n * __useGetProgramsQuery__\n *\n * To run a query within a React component, call `useGetProgramsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProgramsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProgramsQuery({\n *   variables: {\n *      program_id: // value for 'program_id'\n *   },\n * });\n */export function useGetProgramsQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useQuery(GetProgramsDocument,options);}export function useGetProgramsLazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useLazyQuery(GetProgramsDocument,options);}export var GetProgramsAndSubjectsDocument=gql(_templateObject16||(_templateObject16=_taggedTemplateLiteral([\"\\n    query getProgramsAndSubjects($count: PageSize!, $cursor: String!, $filter: ProgramFilter!) {\\n  programsConnection(\\n    filter: $filter\\n    directionArgs: {count: $count, cursor: $cursor}\\n    direction: FORWARD\\n  ) {\\n    totalCount\\n    pageInfo {\\n      hasNextPage\\n      endCursor\\n    }\\n    edges {\\n      node {\\n        id\\n        name\\n        status\\n        system\\n        ageRanges {\\n          id\\n          name\\n          status\\n          system\\n        }\\n        grades {\\n          id\\n          name\\n          status\\n          system\\n        }\\n        subjects {\\n          id\\n          name\\n          status\\n          system\\n        }\\n      }\\n    }\\n  }\\n}\\n    \"])));/**\n * __useGetProgramsAndSubjectsQuery__\n *\n * To run a query within a React component, call `useGetProgramsAndSubjectsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProgramsAndSubjectsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProgramsAndSubjectsQuery({\n *   variables: {\n *      count: // value for 'count'\n *      cursor: // value for 'cursor'\n *      filter: // value for 'filter'\n *   },\n * });\n */export function useGetProgramsAndSubjectsQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useQuery(GetProgramsAndSubjectsDocument,options);}export function useGetProgramsAndSubjectsLazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useLazyQuery(GetProgramsAndSubjectsDocument,options);}export var GetSchoolsFilterListDocument=gql(_templateObject17||(_templateObject17=_taggedTemplateLiteral([\"\\n    query getSchoolsFilterList($filter: SchoolFilter, $direction: ConnectionDirection!, $directionArgs: ConnectionsDirectionArgs) {\\n  schoolsConnection(\\n    filter: $filter\\n    direction: $direction\\n    directionArgs: $directionArgs\\n  ) {\\n    totalCount\\n    edges {\\n      cursor\\n      node {\\n        id\\n        name\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n    }\\n  }\\n}\\n    \"])));/**\n * __useGetSchoolsFilterListQuery__\n *\n * To run a query within a React component, call `useGetSchoolsFilterListQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetSchoolsFilterListQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetSchoolsFilterListQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *      direction: // value for 'direction'\n *      directionArgs: // value for 'directionArgs'\n *   },\n * });\n */export function useGetSchoolsFilterListQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useQuery(GetSchoolsFilterListDocument,options);}export function useGetSchoolsFilterListLazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useLazyQuery(GetSchoolsFilterListDocument,options);}export var GetClassFilterListDocument=gql(_templateObject18||(_templateObject18=_taggedTemplateLiteral([\"\\n    query getClassFilterList($filter: ClassFilter, $direction: ConnectionDirection!, $directionArgs: ConnectionsDirectionArgs) {\\n  classesConnection(\\n    filter: $filter\\n    direction: $direction\\n    directionArgs: $directionArgs\\n  ) {\\n    totalCount\\n    edges {\\n      cursor\\n      node {\\n        id\\n        name\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n      hasPreviousPage\\n      startCursor\\n      endCursor\\n    }\\n  }\\n}\\n    \"])));/**\n * __useGetClassFilterListQuery__\n *\n * To run a query within a React component, call `useGetClassFilterListQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetClassFilterListQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetClassFilterListQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *      direction: // value for 'direction'\n *      directionArgs: // value for 'directionArgs'\n *   },\n * });\n */export function useGetClassFilterListQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useQuery(GetClassFilterListDocument,options);}export function useGetClassFilterListLazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useLazyQuery(GetClassFilterListDocument,options);}export var GetUserDocument=gql(_templateObject19||(_templateObject19=_taggedTemplateLiteral([\"\\n    query getUser($filter: UserFilter, $direction: ConnectionDirection!, $directionArgs: ConnectionsDirectionArgs) {\\n  usersConnection(\\n    direction: $direction\\n    filter: $filter\\n    directionArgs: $directionArgs\\n  ) {\\n    totalCount\\n    edges {\\n      node {\\n        id\\n        givenName\\n        familyName\\n        status\\n        roles {\\n          id\\n          name\\n        }\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n      hasPreviousPage\\n      startCursor\\n      endCursor\\n    }\\n  }\\n}\\n    \"])));/**\n * __useGetUserQuery__\n *\n * To run a query within a React component, call `useGetUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUserQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *      direction: // value for 'direction'\n *      directionArgs: // value for 'directionArgs'\n *   },\n * });\n */export function useGetUserQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useQuery(GetUserDocument,options);}export function useGetUserLazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useLazyQuery(GetUserDocument,options);}export var GetClassByInfoDocument=gql(_templateObject20||(_templateObject20=_taggedTemplateLiteral([\"\\n    query getClassByInfo($filter: ClassFilter, $direction: ConnectionDirection!, $studentFilter: UserFilter, $teacherFilter: UserFilter, $studentCursor: String, $studentDirection: ConnectionDirection, $teacherCursor: String, $teacherDirection: ConnectionDirection) {\\n  classesConnection(filter: $filter, direction: $direction) {\\n    edges {\\n      cursor\\n      node {\\n        id\\n        name\\n        studentsConnection(\\n          filter: $studentFilter\\n          cursor: $studentCursor\\n          direction: $studentDirection\\n        ) {\\n          totalCount\\n          edges {\\n            cursor\\n            node {\\n              id\\n              givenName\\n              familyName\\n              status\\n            }\\n          }\\n          pageInfo {\\n            hasNextPage\\n            hasPreviousPage\\n            startCursor\\n            endCursor\\n          }\\n        }\\n        teachersConnection(\\n          filter: $teacherFilter\\n          cursor: $teacherCursor\\n          direction: $teacherDirection\\n        ) {\\n          totalCount\\n          edges {\\n            cursor\\n            node {\\n              id\\n              givenName\\n              familyName\\n              status\\n            }\\n          }\\n          pageInfo {\\n            hasNextPage\\n            hasPreviousPage\\n            startCursor\\n            endCursor\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n    \"])));/**\n * __useGetClassByInfoQuery__\n *\n * To run a query within a React component, call `useGetClassByInfoQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetClassByInfoQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetClassByInfoQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *      direction: // value for 'direction'\n *      studentFilter: // value for 'studentFilter'\n *      teacherFilter: // value for 'teacherFilter'\n *      studentCursor: // value for 'studentCursor'\n *      studentDirection: // value for 'studentDirection'\n *      teacherCursor: // value for 'teacherCursor'\n *      teacherDirection: // value for 'teacherDirection'\n *   },\n * });\n */export function useGetClassByInfoQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useQuery(GetClassByInfoDocument,options);}export function useGetClassByInfoLazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useLazyQuery(GetClassByInfoDocument,options);}export var GetRolesIdDocument=gql(_templateObject21||(_templateObject21=_taggedTemplateLiteral([\"\\n    query getRolesId($filter: RoleFilter, $direction: ConnectionDirection!, $directionArgs: ConnectionsDirectionArgs) {\\n  rolesConnection(\\n    filter: $filter\\n    direction: $direction\\n    directionArgs: $directionArgs\\n  ) {\\n    totalCount\\n    pageInfo {\\n      hasNextPage\\n      hasPreviousPage\\n      startCursor\\n      endCursor\\n    }\\n    edges {\\n      node {\\n        id\\n        name\\n        status\\n        system\\n      }\\n    }\\n  }\\n}\\n    \"])));/**\n * __useGetRolesIdQuery__\n *\n * To run a query within a React component, call `useGetRolesIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetRolesIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetRolesIdQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *      direction: // value for 'direction'\n *      directionArgs: // value for 'directionArgs'\n *   },\n * });\n */export function useGetRolesIdQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useQuery(GetRolesIdDocument,options);}export function useGetRolesIdLazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useLazyQuery(GetRolesIdDocument,options);}export var UserNameByUserIdQueryDocument=gql(_templateObject22||(_templateObject22=_taggedTemplateLiteral([\"\\n    query userNameByUserIdQuery($filter: UserFilter) {\\n  usersConnection(filter: $filter, direction: FORWARD) {\\n    edges {\\n      node {\\n        id\\n        givenName\\n        familyName\\n      }\\n    }\\n  }\\n}\\n    \"])));/**\n * __useUserNameByUserIdQueryQuery__\n *\n * To run a query within a React component, call `useUserNameByUserIdQueryQuery` and pass it any options that fit your needs.\n * When your component renders, `useUserNameByUserIdQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUserNameByUserIdQueryQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *   },\n * });\n */export function useUserNameByUserIdQueryQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useQuery(UserNameByUserIdQueryDocument,options);}export function useUserNameByUserIdQueryLazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useLazyQuery(UserNameByUserIdQueryDocument,options);}export var ClassesTeachersConnectionDocument=gql(_templateObject23||(_templateObject23=_taggedTemplateLiteral([\"\\n    query classesTeachersConnection($cursor: String, $filter: ClassFilter, $teacherFilter: UserFilter, $teacherCursor: String) {\\n  classesConnection(\\n    filter: $filter\\n    directionArgs: {cursor: $cursor}\\n    direction: FORWARD\\n    sort: {order: ASC, field: name}\\n  ) {\\n    totalCount\\n    edges {\\n      node {\\n        id\\n        name\\n        teachersConnection(\\n          filter: $teacherFilter\\n          cursor: $teacherCursor\\n          direction: FORWARD\\n        ) {\\n          totalCount\\n          edges {\\n            cursor\\n            node {\\n              id\\n              givenName\\n              familyName\\n              status\\n            }\\n          }\\n          pageInfo {\\n            hasNextPage\\n            hasPreviousPage\\n            startCursor\\n            endCursor\\n          }\\n        }\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n      hasPreviousPage\\n      startCursor\\n      endCursor\\n    }\\n  }\\n}\\n    \"])));/**\n * __useClassesTeachersConnectionQuery__\n *\n * To run a query within a React component, call `useClassesTeachersConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useClassesTeachersConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useClassesTeachersConnectionQuery({\n *   variables: {\n *      cursor: // value for 'cursor'\n *      filter: // value for 'filter'\n *      teacherFilter: // value for 'teacherFilter'\n *      teacherCursor: // value for 'teacherCursor'\n *   },\n * });\n */export function useClassesTeachersConnectionQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useQuery(ClassesTeachersConnectionDocument,options);}export function useClassesTeachersConnectionLazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useLazyQuery(ClassesTeachersConnectionDocument,options);}export var ClassNodeDocument=gql(_templateObject24||(_templateObject24=_taggedTemplateLiteral([\"\\n    query classNode($classId: ID!, $teacherCursor: String) {\\n  classNode(id: $classId) {\\n    name\\n    teachersConnection(cursor: $teacherCursor) {\\n      totalCount\\n      edges {\\n        node {\\n          id\\n          familyName\\n          givenName\\n          status\\n        }\\n      }\\n      pageInfo {\\n        hasNextPage\\n        hasPreviousPage\\n        startCursor\\n        endCursor\\n      }\\n    }\\n  }\\n}\\n    \"])));/**\n * __useClassNodeQuery__\n *\n * To run a query within a React component, call `useClassNodeQuery` and pass it any options that fit your needs.\n * When your component renders, `useClassNodeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useClassNodeQuery({\n *   variables: {\n *      classId: // value for 'classId'\n *      teacherCursor: // value for 'teacherCursor'\n *   },\n * });\n */export function useClassNodeQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useQuery(ClassNodeDocument,options);}export function useClassNodeLazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useLazyQuery(ClassNodeDocument,options);}export var ClassesBySchoolIdDocument=gql(_templateObject25||(_templateObject25=_taggedTemplateLiteral([\"\\n    query classesBySchoolId($cursor: String, $filter: ClassFilter, $schoolId: ID!) {\\n  schoolNode(id: $schoolId) {\\n    organizationId\\n    classesConnection(filter: $filter, cursor: $cursor, direction: FORWARD) {\\n      totalCount\\n      pageInfo {\\n        endCursor\\n        hasNextPage\\n      }\\n      edges {\\n        node {\\n          id\\n          name\\n        }\\n      }\\n    }\\n  }\\n}\\n    \"])));/**\n * __useClassesBySchoolIdQuery__\n *\n * To run a query within a React component, call `useClassesBySchoolIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useClassesBySchoolIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useClassesBySchoolIdQuery({\n *   variables: {\n *      cursor: // value for 'cursor'\n *      filter: // value for 'filter'\n *      schoolId: // value for 'schoolId'\n *   },\n * });\n */export function useClassesBySchoolIdQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useQuery(ClassesBySchoolIdDocument,options);}export function useClassesBySchoolIdLazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useLazyQuery(ClassesBySchoolIdDocument,options);}export var ClassesListDocument=gql(_templateObject26||(_templateObject26=_taggedTemplateLiteral([\"\\n    query classesList($cursor: String, $filter: ClassFilter) {\\n  classesConnection(\\n    filter: $filter\\n    directionArgs: {cursor: $cursor}\\n    direction: FORWARD\\n  ) {\\n    totalCount\\n    edges {\\n      node {\\n        id\\n        name\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n      endCursor\\n    }\\n  }\\n}\\n    \"])));/**\n * __useClassesListQuery__\n *\n * To run a query within a React component, call `useClassesListQuery` and pass it any options that fit your needs.\n * When your component renders, `useClassesListQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useClassesListQuery({\n *   variables: {\n *      cursor: // value for 'cursor'\n *      filter: // value for 'filter'\n *   },\n * });\n */export function useClassesListQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useQuery(ClassesListDocument,options);}export function useClassesListLazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useLazyQuery(ClassesListDocument,options);}export var SchoolsClassesDocument=gql(_templateObject27||(_templateObject27=_taggedTemplateLiteral([\"\\n    query schoolsClasses($cursor: String, $filter: SchoolFilter) {\\n  schoolsConnection(\\n    filter: $filter\\n    directionArgs: {cursor: $cursor}\\n    direction: FORWARD\\n    sort: {order: ASC, field: name}\\n  ) {\\n    totalCount\\n    edges {\\n      node {\\n        id\\n        name\\n        classesConnection(direction: FORWARD) {\\n          totalCount\\n          edges {\\n            node {\\n              id\\n              name\\n            }\\n          }\\n          pageInfo {\\n            hasNextPage\\n            endCursor\\n          }\\n        }\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n      endCursor\\n    }\\n  }\\n}\\n    \"])));/**\n * __useSchoolsClassesQuery__\n *\n * To run a query within a React component, call `useSchoolsClassesQuery` and pass it any options that fit your needs.\n * When your component renders, `useSchoolsClassesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSchoolsClassesQuery({\n *   variables: {\n *      cursor: // value for 'cursor'\n *      filter: // value for 'filter'\n *   },\n * });\n */export function useSchoolsClassesQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useQuery(SchoolsClassesDocument,options);}export function useSchoolsClassesLazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useLazyQuery(SchoolsClassesDocument,options);}export var ClassesStudentsConnectionDocument=gql(_templateObject28||(_templateObject28=_taggedTemplateLiteral([\"\\n    query classesStudentsConnection($cursor: String, $filter: ClassFilter) {\\n  classesConnection(\\n    filter: $filter\\n    directionArgs: {cursor: $cursor}\\n    direction: FORWARD\\n    sort: {order: ASC, field: name}\\n  ) {\\n    totalCount\\n    edges {\\n      node {\\n        id\\n        name\\n        studentsConnection(direction: FORWARD) {\\n          totalCount\\n          edges {\\n            cursor\\n            node {\\n              id\\n              givenName\\n              familyName\\n              status\\n            }\\n          }\\n          pageInfo {\\n            hasNextPage\\n            hasPreviousPage\\n            startCursor\\n            endCursor\\n          }\\n        }\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n      hasPreviousPage\\n      startCursor\\n      endCursor\\n    }\\n  }\\n}\\n    \"])));/**\n * __useClassesStudentsConnectionQuery__\n *\n * To run a query within a React component, call `useClassesStudentsConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useClassesStudentsConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useClassesStudentsConnectionQuery({\n *   variables: {\n *      cursor: // value for 'cursor'\n *      filter: // value for 'filter'\n *   },\n * });\n */export function useClassesStudentsConnectionQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useQuery(ClassesStudentsConnectionDocument,options);}export function useClassesStudentsConnectionLazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useLazyQuery(ClassesStudentsConnectionDocument,options);}export var ClassNodeStudentsDocument=gql(_templateObject29||(_templateObject29=_taggedTemplateLiteral([\"\\n    query classNodeStudents($classId: ID!, $studentsCursor: String) {\\n  classNode(id: $classId) {\\n    name\\n    studentsConnection(cursor: $studentsCursor) {\\n      totalCount\\n      edges {\\n        node {\\n          id\\n          familyName\\n          givenName\\n          status\\n        }\\n      }\\n      pageInfo {\\n        hasNextPage\\n        hasPreviousPage\\n        startCursor\\n        endCursor\\n      }\\n    }\\n  }\\n}\\n    \"])));/**\n * __useClassNodeStudentsQuery__\n *\n * To run a query within a React component, call `useClassNodeStudentsQuery` and pass it any options that fit your needs.\n * When your component renders, `useClassNodeStudentsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useClassNodeStudentsQuery({\n *   variables: {\n *      classId: // value for 'classId'\n *      studentsCursor: // value for 'studentsCursor'\n *   },\n * });\n */export function useClassNodeStudentsQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useQuery(ClassNodeStudentsDocument,options);}export function useClassNodeStudentsLazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useLazyQuery(ClassNodeStudentsDocument,options);}export var GetUsersByNameDocument=gql(_templateObject30||(_templateObject30=_taggedTemplateLiteral([\"\\n    query getUsersByName($filter: UserFilter, $directionArgs: ConnectionsDirectionArgs) {\\n  usersConnection(\\n    filter: $filter\\n    direction: FORWARD\\n    directionArgs: $directionArgs\\n  ) {\\n    edges {\\n      node {\\n        id\\n        givenName\\n        familyName\\n      }\\n    }\\n    pageInfo {\\n      hasNextPage\\n      endCursor\\n    }\\n  }\\n}\\n    \"])));/**\n * __useGetUsersByNameQuery__\n *\n * To run a query within a React component, call `useGetUsersByNameQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUsersByNameQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUsersByNameQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *      directionArgs: // value for 'directionArgs'\n *   },\n * });\n */export function useGetUsersByNameQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useQuery(GetUsersByNameDocument,options);}export function useGetUsersByNameLazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useLazyQuery(GetUsersByNameDocument,options);}export var GetProgramIdByNameDocument=gql(_templateObject31||(_templateObject31=_taggedTemplateLiteral([\"\\n    query getProgramIdByName($filter: ProgramFilter!) {\\n  programsConnection(filter: $filter, direction: FORWARD) {\\n    edges {\\n      node {\\n        id\\n        name\\n        status\\n        system\\n        subjectsConnection {\\n          edges {\\n            node {\\n              id\\n              name\\n              status\\n              system\\n            }\\n          }\\n        }\\n        ageRangesConnection {\\n          edges {\\n            node {\\n              id\\n              name\\n              status\\n              system\\n            }\\n          }\\n        }\\n        gradesConnection {\\n          edges {\\n            node {\\n              id\\n              name\\n              status\\n              system\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n    \"])));/**\n * __useGetProgramIdByNameQuery__\n *\n * To run a query within a React component, call `useGetProgramIdByNameQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProgramIdByNameQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProgramIdByNameQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *   },\n * });\n */export function useGetProgramIdByNameQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useQuery(GetProgramIdByNameDocument,options);}export function useGetProgramIdByNameLazyQuery(baseOptions){var options=_objectSpread(_objectSpread({},defaultOptions),baseOptions);return Apollo.useLazyQuery(GetProgramIdByNameDocument,options);}","map":{"version":3,"names":["gql","Apollo","defaultOptions","UserIdNameFragmentDoc","ClassIdNameStatusFragmentDoc","ClassesByOrganizationDocument","useClassesByOrganizationQuery","baseOptions","options","useQuery","useClassesByOrganizationLazyQuery","useLazyQuery","ParticipantsByClassDocument","useParticipantsByClassQuery","useParticipantsByClassLazyQuery","QueryMyUserDocument","useQueryMyUserQuery","useQueryMyUserLazyQuery","GetSchoolMembershipsDocument","useGetSchoolMembershipsQuery","useGetSchoolMembershipsLazyQuery","GetClassesTeachingDocument","useGetClassesTeachingQuery","useGetClassesTeachingLazyQuery","GetStudentNameByIdDocument","useGetStudentNameByIdQuery","useGetStudentNameByIdLazyQuery","GetOrganizationsDocument","useGetOrganizationsQuery","useGetOrganizationsLazyQuery","ClassesBySchoolDocument","useClassesBySchoolQuery","useClassesBySchoolLazyQuery","ClassesTeachingQueryDocument","useClassesTeachingQueryQuery","useClassesTeachingQueryLazyQuery","ClassesStudentQueryDocument","useClassesStudentQueryQuery","useClassesStudentQueryLazyQuery","SchoolByUserQueryDocument","useSchoolByUserQueryQuery","useSchoolByUserQueryLazyQuery","SchoolByOrgQueryDocument","useSchoolByOrgQueryQuery","useSchoolByOrgQueryLazyQuery","GetProgramsDocument","useGetProgramsQuery","useGetProgramsLazyQuery","GetProgramsAndSubjectsDocument","useGetProgramsAndSubjectsQuery","useGetProgramsAndSubjectsLazyQuery","GetSchoolsFilterListDocument","useGetSchoolsFilterListQuery","useGetSchoolsFilterListLazyQuery","GetClassFilterListDocument","useGetClassFilterListQuery","useGetClassFilterListLazyQuery","GetUserDocument","useGetUserQuery","useGetUserLazyQuery","GetClassByInfoDocument","useGetClassByInfoQuery","useGetClassByInfoLazyQuery","GetRolesIdDocument","useGetRolesIdQuery","useGetRolesIdLazyQuery","UserNameByUserIdQueryDocument","useUserNameByUserIdQueryQuery","useUserNameByUserIdQueryLazyQuery","ClassesTeachersConnectionDocument","useClassesTeachersConnectionQuery","useClassesTeachersConnectionLazyQuery","ClassNodeDocument","useClassNodeQuery","useClassNodeLazyQuery","ClassesBySchoolIdDocument","useClassesBySchoolIdQuery","useClassesBySchoolIdLazyQuery","ClassesListDocument","useClassesListQuery","useClassesListLazyQuery","SchoolsClassesDocument","useSchoolsClassesQuery","useSchoolsClassesLazyQuery","ClassesStudentsConnectionDocument","useClassesStudentsConnectionQuery","useClassesStudentsConnectionLazyQuery","ClassNodeStudentsDocument","useClassNodeStudentsQuery","useClassNodeStudentsLazyQuery","GetUsersByNameDocument","useGetUsersByNameQuery","useGetUsersByNameLazyQuery","GetProgramIdByNameDocument","useGetProgramIdByNameQuery","useGetProgramIdByNameLazyQuery"],"sources":["/Users/evik/kl/project-2024/klasmart-assessment-frontend/src/api/api-ko.auto.tsx"],"sourcesContent":["import * as Types from './api-ko-schema.auto';\n\nimport { gql } from '@apollo/client';\nimport * as Apollo from '@apollo/client';\nconst defaultOptions =  {}\nexport type ClassesByOrganizationQueryVariables = Types.Exact<{\n  organization_id: Types.Scalars['ID'];\n}>;\n\n\nexport type ClassesByOrganizationQuery = (\n  { __typename?: 'Query' }\n  & { organization?: Types.Maybe<(\n    { __typename?: 'Organization' }\n    & { classes?: Types.Maybe<Array<Types.Maybe<(\n      { __typename?: 'Class' }\n      & Pick<Types.Class, 'class_id' | 'class_name' | 'status'>\n      & { schools?: Types.Maybe<Array<Types.Maybe<(\n        { __typename?: 'School' }\n        & Pick<Types.School, 'school_id' | 'school_name'>\n      )>>>, teachers?: Types.Maybe<Array<Types.Maybe<(\n        { __typename?: 'User' }\n        & Pick<Types.User, 'user_id' | 'user_name'>\n      )>>>, students?: Types.Maybe<Array<Types.Maybe<(\n        { __typename?: 'User' }\n        & Pick<Types.User, 'user_id' | 'user_name'>\n      )>>> }\n    )>>> }\n  )> }\n);\n\nexport type ParticipantsByClassQueryVariables = Types.Exact<{\n  class_id: Types.Scalars['ID'];\n}>;\n\n\nexport type ParticipantsByClassQuery = (\n  { __typename?: 'Query' }\n  & { class?: Types.Maybe<(\n    { __typename?: 'Class' }\n    & { teachers?: Types.Maybe<Array<Types.Maybe<(\n      { __typename?: 'User' }\n      & UserIdNameFragment\n    )>>>, students?: Types.Maybe<Array<Types.Maybe<(\n      { __typename?: 'User' }\n      & UserIdNameFragment\n    )>>> }\n  )> }\n);\n\nexport type QueryMyUserQueryVariables = Types.Exact<{ [key: string]: never; }>;\n\n\nexport type QueryMyUserQuery = (\n  { __typename?: 'Query' }\n  & { myUser?: Types.Maybe<(\n    { __typename?: 'MyUser' }\n    & { node?: Types.Maybe<(\n      { __typename?: 'UserConnectionNode' }\n      & Pick<Types.UserConnectionNode, 'id' | 'givenName' | 'familyName'>\n    )> }\n  )> }\n);\n\nexport type GetSchoolMembershipsQueryVariables = Types.Exact<{\n  userId?: Types.Maybe<Types.UuidFilter>;\n  organizationId?: Types.Maybe<Types.UuidFilter>;\n  cursor?: Types.Maybe<Types.Scalars['String']>;\n}>;\n\n\nexport type GetSchoolMembershipsQuery = (\n  { __typename?: 'Query' }\n  & { schoolsConnection?: Types.Maybe<(\n    { __typename?: 'SchoolsConnectionResponse' }\n    & Pick<Types.SchoolsConnectionResponse, 'totalCount'>\n    & { pageInfo?: Types.Maybe<(\n      { __typename?: 'ConnectionPageInfo' }\n      & Pick<Types.ConnectionPageInfo, 'hasNextPage' | 'endCursor'>\n    )>, edges?: Types.Maybe<Array<Types.Maybe<(\n      { __typename?: 'SchoolsConnectionEdge' }\n      & { node?: Types.Maybe<(\n        { __typename?: 'SchoolConnectionNode' }\n        & Pick<Types.SchoolConnectionNode, 'id' | 'status'>\n      )> }\n    )>>> }\n  )> }\n);\n\nexport type GetClassesTeachingQueryVariables = Types.Exact<{\n  organizationId?: Types.Maybe<Types.UuidFilter>;\n  cursor?: Types.Maybe<Types.Scalars['String']>;\n}>;\n\n\nexport type GetClassesTeachingQuery = (\n  { __typename?: 'Query' }\n  & { myUser?: Types.Maybe<(\n    { __typename?: 'MyUser' }\n    & { node?: Types.Maybe<(\n      { __typename?: 'UserConnectionNode' }\n      & { classesTeachingConnection?: Types.Maybe<(\n        { __typename?: 'ClassesConnectionResponse' }\n        & Pick<Types.ClassesConnectionResponse, 'totalCount'>\n        & { pageInfo?: Types.Maybe<(\n          { __typename?: 'ConnectionPageInfo' }\n          & Pick<Types.ConnectionPageInfo, 'hasNextPage' | 'endCursor'>\n        )>, edges?: Types.Maybe<Array<Types.Maybe<(\n          { __typename?: 'ClassesConnectionEdge' }\n          & { node?: Types.Maybe<(\n            { __typename?: 'ClassConnectionNode' }\n            & Pick<Types.ClassConnectionNode, 'id' | 'status'>\n          )> }\n        )>>> }\n      )> }\n    )> }\n  )> }\n);\n\nexport type GetStudentNameByIdQueryVariables = Types.Exact<{\n  filter?: Types.Maybe<Types.UserFilter>;\n  directionArgs?: Types.Maybe<Types.ConnectionsDirectionArgs>;\n}>;\n\n\nexport type GetStudentNameByIdQuery = (\n  { __typename?: 'Query' }\n  & { usersConnection?: Types.Maybe<(\n    { __typename?: 'UsersConnectionResponse' }\n    & { edges?: Types.Maybe<Array<Types.Maybe<(\n      { __typename?: 'UsersConnectionEdge' }\n      & { node?: Types.Maybe<(\n        { __typename?: 'UserConnectionNode' }\n        & Pick<Types.UserConnectionNode, 'id' | 'givenName' | 'familyName'>\n      )> }\n    )>>>, pageInfo?: Types.Maybe<(\n      { __typename?: 'ConnectionPageInfo' }\n      & Pick<Types.ConnectionPageInfo, 'hasNextPage' | 'endCursor'>\n    )> }\n  )> }\n);\n\nexport type GetOrganizationsQueryVariables = Types.Exact<{\n  direction: Types.ConnectionDirection;\n  cursor?: Types.Maybe<Types.Scalars['String']>;\n  count?: Types.Maybe<Types.Scalars['PageSize']>;\n  sort: Types.OrganizationSortInput;\n  filter: Types.OrganizationFilter;\n}>;\n\n\nexport type GetOrganizationsQuery = (\n  { __typename?: 'Query' }\n  & { organizationsConnection?: Types.Maybe<(\n    { __typename?: 'OrganizationsConnectionResponse' }\n    & Pick<Types.OrganizationsConnectionResponse, 'totalCount'>\n    & { edges?: Types.Maybe<Array<Types.Maybe<(\n      { __typename?: 'OrganizationsConnectionEdge' }\n      & { node?: Types.Maybe<(\n        { __typename?: 'OrganizationConnectionNode' }\n        & Pick<Types.OrganizationConnectionNode, 'id' | 'name'>\n        & { owners?: Types.Maybe<Array<Types.Maybe<(\n          { __typename?: 'UserSummaryNode' }\n          & Pick<Types.UserSummaryNode, 'email'>\n        )>>> }\n      )> }\n    )>>>, pageInfo?: Types.Maybe<(\n      { __typename?: 'ConnectionPageInfo' }\n      & Pick<Types.ConnectionPageInfo, 'hasNextPage' | 'hasPreviousPage' | 'startCursor' | 'endCursor'>\n    )> }\n  )> }\n);\n\nexport type ClassesBySchoolQueryVariables = Types.Exact<{\n  school_id: Types.Scalars['ID'];\n}>;\n\n\nexport type ClassesBySchoolQuery = (\n  { __typename?: 'Query' }\n  & { school?: Types.Maybe<(\n    { __typename?: 'School' }\n    & { classes?: Types.Maybe<Array<Types.Maybe<(\n      { __typename?: 'Class' }\n      & { schools?: Types.Maybe<Array<Types.Maybe<(\n        { __typename?: 'School' }\n        & Pick<Types.School, 'school_id' | 'school_name'>\n      )>>>, teachers?: Types.Maybe<Array<Types.Maybe<(\n        { __typename?: 'User' }\n        & UserIdNameFragment\n      )>>>, students?: Types.Maybe<Array<Types.Maybe<(\n        { __typename?: 'User' }\n        & UserIdNameFragment\n      )>>> }\n      & ClassIdNameStatusFragment\n    )>>> }\n  )> }\n);\n\nexport type ClassesTeachingQueryQueryVariables = Types.Exact<{\n  user_id: Types.Scalars['ID'];\n  organization_id: Types.Scalars['ID'];\n}>;\n\n\nexport type ClassesTeachingQueryQuery = (\n  { __typename?: 'Query' }\n  & { user?: Types.Maybe<(\n    { __typename?: 'User' }\n    & { membership?: Types.Maybe<(\n      { __typename?: 'OrganizationMembership' }\n      & { classesTeaching?: Types.Maybe<Array<Types.Maybe<(\n        { __typename?: 'Class' }\n        & Pick<Types.Class, 'class_id' | 'class_name' | 'status'>\n        & { schools?: Types.Maybe<Array<Types.Maybe<(\n          { __typename?: 'School' }\n          & Pick<Types.School, 'school_id' | 'school_name'>\n        )>>>, teachers?: Types.Maybe<Array<Types.Maybe<(\n          { __typename?: 'User' }\n          & Pick<Types.User, 'user_id' | 'user_name'>\n        )>>>, students?: Types.Maybe<Array<Types.Maybe<(\n          { __typename?: 'User' }\n          & Pick<Types.User, 'user_id' | 'user_name'>\n        )>>> }\n      )>>> }\n    )> }\n  )> }\n);\n\nexport type ClassesStudentQueryQueryVariables = Types.Exact<{\n  user_id: Types.Scalars['ID'];\n  organization_id: Types.Scalars['ID'];\n}>;\n\n\nexport type ClassesStudentQueryQuery = (\n  { __typename?: 'Query' }\n  & { user?: Types.Maybe<(\n    { __typename?: 'User' }\n    & { membership?: Types.Maybe<(\n      { __typename?: 'OrganizationMembership' }\n      & { classes?: Types.Maybe<Array<Types.Maybe<(\n        { __typename?: 'Class' }\n        & Pick<Types.Class, 'class_id' | 'class_name' | 'status'>\n        & { schools?: Types.Maybe<Array<Types.Maybe<(\n          { __typename?: 'School' }\n          & Pick<Types.School, 'school_id' | 'school_name'>\n        )>>>, teachers?: Types.Maybe<Array<Types.Maybe<(\n          { __typename?: 'User' }\n          & Pick<Types.User, 'user_id' | 'user_name'>\n        )>>>, students?: Types.Maybe<Array<Types.Maybe<(\n          { __typename?: 'User' }\n          & Pick<Types.User, 'user_id' | 'user_name'>\n        )>>> }\n      )>>> }\n    )> }\n  )> }\n);\n\nexport type SchoolByUserQueryQueryVariables = Types.Exact<{\n  user_id: Types.Scalars['ID'];\n  organization_id: Types.Scalars['ID'];\n}>;\n\n\nexport type SchoolByUserQueryQuery = (\n  { __typename?: 'Query' }\n  & { user?: Types.Maybe<(\n    { __typename?: 'User' }\n    & { membership?: Types.Maybe<(\n      { __typename?: 'OrganizationMembership' }\n      & { schoolMemberships?: Types.Maybe<Array<Types.Maybe<(\n        { __typename?: 'SchoolMembership' }\n        & { school?: Types.Maybe<(\n          { __typename?: 'School' }\n          & Pick<Types.School, 'school_id' | 'school_name'>\n          & { classes?: Types.Maybe<Array<Types.Maybe<(\n            { __typename?: 'Class' }\n            & Pick<Types.Class, 'status' | 'class_id' | 'class_name'>\n            & { teachers?: Types.Maybe<Array<Types.Maybe<(\n              { __typename?: 'User' }\n              & Pick<Types.User, 'user_id' | 'user_name'>\n            )>>>, students?: Types.Maybe<Array<Types.Maybe<(\n              { __typename?: 'User' }\n              & Pick<Types.User, 'user_id' | 'user_name'>\n            )>>> }\n          )>>> }\n        )> }\n      )>>> }\n    )> }\n  )> }\n);\n\nexport type SchoolByOrgQueryQueryVariables = Types.Exact<{\n  organization_id: Types.Scalars['ID'];\n}>;\n\n\nexport type SchoolByOrgQueryQuery = (\n  { __typename?: 'Query' }\n  & { organization?: Types.Maybe<(\n    { __typename?: 'Organization' }\n    & { schools?: Types.Maybe<Array<Types.Maybe<(\n      { __typename?: 'School' }\n      & Pick<Types.School, 'school_id' | 'school_name'>\n      & { classes?: Types.Maybe<Array<Types.Maybe<(\n        { __typename?: 'Class' }\n        & Pick<Types.Class, 'status' | 'class_id' | 'class_name'>\n        & { teachers?: Types.Maybe<Array<Types.Maybe<(\n          { __typename?: 'User' }\n          & Pick<Types.User, 'user_id' | 'user_name'>\n        )>>>, students?: Types.Maybe<Array<Types.Maybe<(\n          { __typename?: 'User' }\n          & Pick<Types.User, 'user_id' | 'user_name'>\n        )>>> }\n      )>>> }\n    )>>> }\n  )> }\n);\n\nexport type GetProgramsQueryVariables = Types.Exact<{\n  program_id: Types.Scalars['ID'];\n}>;\n\n\nexport type GetProgramsQuery = (\n  { __typename?: 'Query' }\n  & { program?: Types.Maybe<(\n    { __typename?: 'Program' }\n    & Pick<Types.Program, 'id' | 'name' | 'status'>\n    & { subjects?: Types.Maybe<Array<(\n      { __typename?: 'Subject' }\n      & Pick<Types.Subject, 'id' | 'name' | 'status'>\n      & { categories?: Types.Maybe<Array<(\n        { __typename?: 'Category' }\n        & Pick<Types.Category, 'id' | 'name' | 'status'>\n        & { subcategories?: Types.Maybe<Array<(\n          { __typename?: 'Subcategory' }\n          & Pick<Types.Subcategory, 'id' | 'name' | 'status'>\n        )>> }\n      )>> }\n    )>>, age_ranges?: Types.Maybe<Array<(\n      { __typename?: 'AgeRange' }\n      & Pick<Types.AgeRange, 'id' | 'name' | 'status'>\n    )>>, grades?: Types.Maybe<Array<(\n      { __typename?: 'Grade' }\n      & Pick<Types.Grade, 'id' | 'name' | 'status'>\n    )>> }\n  )> }\n);\n\nexport type GetProgramsAndSubjectsQueryVariables = Types.Exact<{\n  count: Types.Scalars['PageSize'];\n  cursor: Types.Scalars['String'];\n  filter: Types.ProgramFilter;\n}>;\n\n\nexport type GetProgramsAndSubjectsQuery = (\n  { __typename?: 'Query' }\n  & { programsConnection?: Types.Maybe<(\n    { __typename?: 'ProgramsConnectionResponse' }\n    & Pick<Types.ProgramsConnectionResponse, 'totalCount'>\n    & { pageInfo?: Types.Maybe<(\n      { __typename?: 'ConnectionPageInfo' }\n      & Pick<Types.ConnectionPageInfo, 'hasNextPage' | 'endCursor'>\n    )>, edges?: Types.Maybe<Array<Types.Maybe<(\n      { __typename?: 'ProgramsConnectionEdge' }\n      & { node?: Types.Maybe<(\n        { __typename?: 'ProgramConnectionNode' }\n        & Pick<Types.ProgramConnectionNode, 'id' | 'name' | 'status' | 'system'>\n        & { ageRanges?: Types.Maybe<Array<(\n          { __typename?: 'AgeRangeConnectionNode' }\n          & Pick<Types.AgeRangeConnectionNode, 'id' | 'name' | 'status' | 'system'>\n        )>>, grades?: Types.Maybe<Array<(\n          { __typename?: 'GradeSummaryNode' }\n          & Pick<Types.GradeSummaryNode, 'id' | 'name' | 'status' | 'system'>\n        )>>, subjects?: Types.Maybe<Array<(\n          { __typename?: 'CoreSubjectConnectionNode' }\n          & Pick<Types.CoreSubjectConnectionNode, 'id' | 'name' | 'status' | 'system'>\n        )>> }\n      )> }\n    )>>> }\n  )> }\n);\n\nexport type GetSchoolsFilterListQueryVariables = Types.Exact<{\n  filter?: Types.Maybe<Types.SchoolFilter>;\n  direction: Types.ConnectionDirection;\n  directionArgs?: Types.Maybe<Types.ConnectionsDirectionArgs>;\n}>;\n\n\nexport type GetSchoolsFilterListQuery = (\n  { __typename?: 'Query' }\n  & { schoolsConnection?: Types.Maybe<(\n    { __typename?: 'SchoolsConnectionResponse' }\n    & Pick<Types.SchoolsConnectionResponse, 'totalCount'>\n    & { edges?: Types.Maybe<Array<Types.Maybe<(\n      { __typename?: 'SchoolsConnectionEdge' }\n      & Pick<Types.SchoolsConnectionEdge, 'cursor'>\n      & { node?: Types.Maybe<(\n        { __typename?: 'SchoolConnectionNode' }\n        & Pick<Types.SchoolConnectionNode, 'id' | 'name'>\n      )> }\n    )>>>, pageInfo?: Types.Maybe<(\n      { __typename?: 'ConnectionPageInfo' }\n      & Pick<Types.ConnectionPageInfo, 'hasNextPage'>\n    )> }\n  )> }\n);\n\nexport type GetClassFilterListQueryVariables = Types.Exact<{\n  filter?: Types.Maybe<Types.ClassFilter>;\n  direction: Types.ConnectionDirection;\n  directionArgs?: Types.Maybe<Types.ConnectionsDirectionArgs>;\n}>;\n\n\nexport type GetClassFilterListQuery = (\n  { __typename?: 'Query' }\n  & { classesConnection?: Types.Maybe<(\n    { __typename?: 'ClassesConnectionResponse' }\n    & Pick<Types.ClassesConnectionResponse, 'totalCount'>\n    & { edges?: Types.Maybe<Array<Types.Maybe<(\n      { __typename?: 'ClassesConnectionEdge' }\n      & Pick<Types.ClassesConnectionEdge, 'cursor'>\n      & { node?: Types.Maybe<(\n        { __typename?: 'ClassConnectionNode' }\n        & Pick<Types.ClassConnectionNode, 'id' | 'name'>\n      )> }\n    )>>>, pageInfo?: Types.Maybe<(\n      { __typename?: 'ConnectionPageInfo' }\n      & Pick<Types.ConnectionPageInfo, 'hasNextPage' | 'hasPreviousPage' | 'startCursor' | 'endCursor'>\n    )> }\n  )> }\n);\n\nexport type GetUserQueryVariables = Types.Exact<{\n  filter?: Types.Maybe<Types.UserFilter>;\n  direction: Types.ConnectionDirection;\n  directionArgs?: Types.Maybe<Types.ConnectionsDirectionArgs>;\n}>;\n\n\nexport type GetUserQuery = (\n  { __typename?: 'Query' }\n  & { usersConnection?: Types.Maybe<(\n    { __typename?: 'UsersConnectionResponse' }\n    & Pick<Types.UsersConnectionResponse, 'totalCount'>\n    & { edges?: Types.Maybe<Array<Types.Maybe<(\n      { __typename?: 'UsersConnectionEdge' }\n      & { node?: Types.Maybe<(\n        { __typename?: 'UserConnectionNode' }\n        & Pick<Types.UserConnectionNode, 'id' | 'givenName' | 'familyName' | 'status'>\n        & { roles?: Types.Maybe<Array<(\n          { __typename?: 'RoleSummaryNode' }\n          & Pick<Types.RoleSummaryNode, 'id' | 'name'>\n        )>> }\n      )> }\n    )>>>, pageInfo?: Types.Maybe<(\n      { __typename?: 'ConnectionPageInfo' }\n      & Pick<Types.ConnectionPageInfo, 'hasNextPage' | 'hasPreviousPage' | 'startCursor' | 'endCursor'>\n    )> }\n  )> }\n);\n\nexport type UserIdNameFragment = (\n  { __typename?: 'User' }\n  & Pick<Types.User, 'user_id' | 'user_name' | 'family_name' | 'given_name'>\n);\n\nexport type ClassIdNameStatusFragment = (\n  { __typename?: 'Class' }\n  & Pick<Types.Class, 'class_id' | 'class_name' | 'status'>\n);\n\nexport type GetClassByInfoQueryVariables = Types.Exact<{\n  filter?: Types.Maybe<Types.ClassFilter>;\n  direction: Types.ConnectionDirection;\n  studentFilter?: Types.Maybe<Types.UserFilter>;\n  teacherFilter?: Types.Maybe<Types.UserFilter>;\n  studentCursor?: Types.Maybe<Types.Scalars['String']>;\n  studentDirection?: Types.Maybe<Types.ConnectionDirection>;\n  teacherCursor?: Types.Maybe<Types.Scalars['String']>;\n  teacherDirection?: Types.Maybe<Types.ConnectionDirection>;\n}>;\n\n\nexport type GetClassByInfoQuery = (\n  { __typename?: 'Query' }\n  & { classesConnection?: Types.Maybe<(\n    { __typename?: 'ClassesConnectionResponse' }\n    & { edges?: Types.Maybe<Array<Types.Maybe<(\n      { __typename?: 'ClassesConnectionEdge' }\n      & Pick<Types.ClassesConnectionEdge, 'cursor'>\n      & { node?: Types.Maybe<(\n        { __typename?: 'ClassConnectionNode' }\n        & Pick<Types.ClassConnectionNode, 'id' | 'name'>\n        & { studentsConnection?: Types.Maybe<(\n          { __typename?: 'UsersConnectionResponse' }\n          & Pick<Types.UsersConnectionResponse, 'totalCount'>\n          & { edges?: Types.Maybe<Array<Types.Maybe<(\n            { __typename?: 'UsersConnectionEdge' }\n            & Pick<Types.UsersConnectionEdge, 'cursor'>\n            & { node?: Types.Maybe<(\n              { __typename?: 'UserConnectionNode' }\n              & Pick<Types.UserConnectionNode, 'id' | 'givenName' | 'familyName' | 'status'>\n            )> }\n          )>>>, pageInfo?: Types.Maybe<(\n            { __typename?: 'ConnectionPageInfo' }\n            & Pick<Types.ConnectionPageInfo, 'hasNextPage' | 'hasPreviousPage' | 'startCursor' | 'endCursor'>\n          )> }\n        )>, teachersConnection?: Types.Maybe<(\n          { __typename?: 'UsersConnectionResponse' }\n          & Pick<Types.UsersConnectionResponse, 'totalCount'>\n          & { edges?: Types.Maybe<Array<Types.Maybe<(\n            { __typename?: 'UsersConnectionEdge' }\n            & Pick<Types.UsersConnectionEdge, 'cursor'>\n            & { node?: Types.Maybe<(\n              { __typename?: 'UserConnectionNode' }\n              & Pick<Types.UserConnectionNode, 'id' | 'givenName' | 'familyName' | 'status'>\n            )> }\n          )>>>, pageInfo?: Types.Maybe<(\n            { __typename?: 'ConnectionPageInfo' }\n            & Pick<Types.ConnectionPageInfo, 'hasNextPage' | 'hasPreviousPage' | 'startCursor' | 'endCursor'>\n          )> }\n        )> }\n      )> }\n    )>>> }\n  )> }\n);\n\nexport type GetRolesIdQueryVariables = Types.Exact<{\n  filter?: Types.Maybe<Types.RoleFilter>;\n  direction: Types.ConnectionDirection;\n  directionArgs?: Types.Maybe<Types.ConnectionsDirectionArgs>;\n}>;\n\n\nexport type GetRolesIdQuery = (\n  { __typename?: 'Query' }\n  & { rolesConnection?: Types.Maybe<(\n    { __typename?: 'RolesConnectionResponse' }\n    & Pick<Types.RolesConnectionResponse, 'totalCount'>\n    & { pageInfo?: Types.Maybe<(\n      { __typename?: 'ConnectionPageInfo' }\n      & Pick<Types.ConnectionPageInfo, 'hasNextPage' | 'hasPreviousPage' | 'startCursor' | 'endCursor'>\n    )>, edges?: Types.Maybe<Array<Types.Maybe<(\n      { __typename?: 'RolesConnectionEdge' }\n      & { node?: Types.Maybe<(\n        { __typename?: 'RoleConnectionNode' }\n        & Pick<Types.RoleConnectionNode, 'id' | 'name' | 'status' | 'system'>\n      )> }\n    )>>> }\n  )> }\n);\n\nexport type UserNameByUserIdQueryQueryVariables = Types.Exact<{\n  filter?: Types.Maybe<Types.UserFilter>;\n}>;\n\n\nexport type UserNameByUserIdQueryQuery = (\n  { __typename?: 'Query' }\n  & { usersConnection?: Types.Maybe<(\n    { __typename?: 'UsersConnectionResponse' }\n    & { edges?: Types.Maybe<Array<Types.Maybe<(\n      { __typename?: 'UsersConnectionEdge' }\n      & { node?: Types.Maybe<(\n        { __typename?: 'UserConnectionNode' }\n        & Pick<Types.UserConnectionNode, 'id' | 'givenName' | 'familyName'>\n      )> }\n    )>>> }\n  )> }\n);\n\nexport type ClassesTeachersConnectionQueryVariables = Types.Exact<{\n  cursor?: Types.Maybe<Types.Scalars['String']>;\n  filter?: Types.Maybe<Types.ClassFilter>;\n  teacherFilter?: Types.Maybe<Types.UserFilter>;\n  teacherCursor?: Types.Maybe<Types.Scalars['String']>;\n}>;\n\n\nexport type ClassesTeachersConnectionQuery = (\n  { __typename?: 'Query' }\n  & { classesConnection?: Types.Maybe<(\n    { __typename?: 'ClassesConnectionResponse' }\n    & Pick<Types.ClassesConnectionResponse, 'totalCount'>\n    & { edges?: Types.Maybe<Array<Types.Maybe<(\n      { __typename?: 'ClassesConnectionEdge' }\n      & { node?: Types.Maybe<(\n        { __typename?: 'ClassConnectionNode' }\n        & Pick<Types.ClassConnectionNode, 'id' | 'name'>\n        & { teachersConnection?: Types.Maybe<(\n          { __typename?: 'UsersConnectionResponse' }\n          & Pick<Types.UsersConnectionResponse, 'totalCount'>\n          & { edges?: Types.Maybe<Array<Types.Maybe<(\n            { __typename?: 'UsersConnectionEdge' }\n            & Pick<Types.UsersConnectionEdge, 'cursor'>\n            & { node?: Types.Maybe<(\n              { __typename?: 'UserConnectionNode' }\n              & Pick<Types.UserConnectionNode, 'id' | 'givenName' | 'familyName' | 'status'>\n            )> }\n          )>>>, pageInfo?: Types.Maybe<(\n            { __typename?: 'ConnectionPageInfo' }\n            & Pick<Types.ConnectionPageInfo, 'hasNextPage' | 'hasPreviousPage' | 'startCursor' | 'endCursor'>\n          )> }\n        )> }\n      )> }\n    )>>>, pageInfo?: Types.Maybe<(\n      { __typename?: 'ConnectionPageInfo' }\n      & Pick<Types.ConnectionPageInfo, 'hasNextPage' | 'hasPreviousPage' | 'startCursor' | 'endCursor'>\n    )> }\n  )> }\n);\n\nexport type ClassNodeQueryVariables = Types.Exact<{\n  classId: Types.Scalars['ID'];\n  teacherCursor?: Types.Maybe<Types.Scalars['String']>;\n}>;\n\n\nexport type ClassNodeQuery = (\n  { __typename?: 'Query' }\n  & { classNode?: Types.Maybe<(\n    { __typename?: 'ClassConnectionNode' }\n    & Pick<Types.ClassConnectionNode, 'name'>\n    & { teachersConnection?: Types.Maybe<(\n      { __typename?: 'UsersConnectionResponse' }\n      & Pick<Types.UsersConnectionResponse, 'totalCount'>\n      & { edges?: Types.Maybe<Array<Types.Maybe<(\n        { __typename?: 'UsersConnectionEdge' }\n        & { node?: Types.Maybe<(\n          { __typename?: 'UserConnectionNode' }\n          & Pick<Types.UserConnectionNode, 'id' | 'familyName' | 'givenName' | 'status'>\n        )> }\n      )>>>, pageInfo?: Types.Maybe<(\n        { __typename?: 'ConnectionPageInfo' }\n        & Pick<Types.ConnectionPageInfo, 'hasNextPage' | 'hasPreviousPage' | 'startCursor' | 'endCursor'>\n      )> }\n    )> }\n  )> }\n);\n\nexport type ClassesBySchoolIdQueryVariables = Types.Exact<{\n  cursor?: Types.Maybe<Types.Scalars['String']>;\n  filter?: Types.Maybe<Types.ClassFilter>;\n  schoolId: Types.Scalars['ID'];\n}>;\n\n\nexport type ClassesBySchoolIdQuery = (\n  { __typename?: 'Query' }\n  & { schoolNode?: Types.Maybe<(\n    { __typename?: 'SchoolConnectionNode' }\n    & Pick<Types.SchoolConnectionNode, 'organizationId'>\n    & { classesConnection?: Types.Maybe<(\n      { __typename?: 'ClassesConnectionResponse' }\n      & Pick<Types.ClassesConnectionResponse, 'totalCount'>\n      & { pageInfo?: Types.Maybe<(\n        { __typename?: 'ConnectionPageInfo' }\n        & Pick<Types.ConnectionPageInfo, 'endCursor' | 'hasNextPage'>\n      )>, edges?: Types.Maybe<Array<Types.Maybe<(\n        { __typename?: 'ClassesConnectionEdge' }\n        & { node?: Types.Maybe<(\n          { __typename?: 'ClassConnectionNode' }\n          & Pick<Types.ClassConnectionNode, 'id' | 'name'>\n        )> }\n      )>>> }\n    )> }\n  )> }\n);\n\nexport type ClassesListQueryVariables = Types.Exact<{\n  cursor?: Types.Maybe<Types.Scalars['String']>;\n  filter?: Types.Maybe<Types.ClassFilter>;\n}>;\n\n\nexport type ClassesListQuery = (\n  { __typename?: 'Query' }\n  & { classesConnection?: Types.Maybe<(\n    { __typename?: 'ClassesConnectionResponse' }\n    & Pick<Types.ClassesConnectionResponse, 'totalCount'>\n    & { edges?: Types.Maybe<Array<Types.Maybe<(\n      { __typename?: 'ClassesConnectionEdge' }\n      & { node?: Types.Maybe<(\n        { __typename?: 'ClassConnectionNode' }\n        & Pick<Types.ClassConnectionNode, 'id' | 'name'>\n      )> }\n    )>>>, pageInfo?: Types.Maybe<(\n      { __typename?: 'ConnectionPageInfo' }\n      & Pick<Types.ConnectionPageInfo, 'hasNextPage' | 'endCursor'>\n    )> }\n  )> }\n);\n\nexport type SchoolsClassesQueryVariables = Types.Exact<{\n  cursor?: Types.Maybe<Types.Scalars['String']>;\n  filter?: Types.Maybe<Types.SchoolFilter>;\n}>;\n\n\nexport type SchoolsClassesQuery = (\n  { __typename?: 'Query' }\n  & { schoolsConnection?: Types.Maybe<(\n    { __typename?: 'SchoolsConnectionResponse' }\n    & Pick<Types.SchoolsConnectionResponse, 'totalCount'>\n    & { edges?: Types.Maybe<Array<Types.Maybe<(\n      { __typename?: 'SchoolsConnectionEdge' }\n      & { node?: Types.Maybe<(\n        { __typename?: 'SchoolConnectionNode' }\n        & Pick<Types.SchoolConnectionNode, 'id' | 'name'>\n        & { classesConnection?: Types.Maybe<(\n          { __typename?: 'ClassesConnectionResponse' }\n          & Pick<Types.ClassesConnectionResponse, 'totalCount'>\n          & { edges?: Types.Maybe<Array<Types.Maybe<(\n            { __typename?: 'ClassesConnectionEdge' }\n            & { node?: Types.Maybe<(\n              { __typename?: 'ClassConnectionNode' }\n              & Pick<Types.ClassConnectionNode, 'id' | 'name'>\n            )> }\n          )>>>, pageInfo?: Types.Maybe<(\n            { __typename?: 'ConnectionPageInfo' }\n            & Pick<Types.ConnectionPageInfo, 'hasNextPage' | 'endCursor'>\n          )> }\n        )> }\n      )> }\n    )>>>, pageInfo?: Types.Maybe<(\n      { __typename?: 'ConnectionPageInfo' }\n      & Pick<Types.ConnectionPageInfo, 'hasNextPage' | 'endCursor'>\n    )> }\n  )> }\n);\n\nexport type ClassesStudentsConnectionQueryVariables = Types.Exact<{\n  cursor?: Types.Maybe<Types.Scalars['String']>;\n  filter?: Types.Maybe<Types.ClassFilter>;\n}>;\n\n\nexport type ClassesStudentsConnectionQuery = (\n  { __typename?: 'Query' }\n  & { classesConnection?: Types.Maybe<(\n    { __typename?: 'ClassesConnectionResponse' }\n    & Pick<Types.ClassesConnectionResponse, 'totalCount'>\n    & { edges?: Types.Maybe<Array<Types.Maybe<(\n      { __typename?: 'ClassesConnectionEdge' }\n      & { node?: Types.Maybe<(\n        { __typename?: 'ClassConnectionNode' }\n        & Pick<Types.ClassConnectionNode, 'id' | 'name'>\n        & { studentsConnection?: Types.Maybe<(\n          { __typename?: 'UsersConnectionResponse' }\n          & Pick<Types.UsersConnectionResponse, 'totalCount'>\n          & { edges?: Types.Maybe<Array<Types.Maybe<(\n            { __typename?: 'UsersConnectionEdge' }\n            & Pick<Types.UsersConnectionEdge, 'cursor'>\n            & { node?: Types.Maybe<(\n              { __typename?: 'UserConnectionNode' }\n              & Pick<Types.UserConnectionNode, 'id' | 'givenName' | 'familyName' | 'status'>\n            )> }\n          )>>>, pageInfo?: Types.Maybe<(\n            { __typename?: 'ConnectionPageInfo' }\n            & Pick<Types.ConnectionPageInfo, 'hasNextPage' | 'hasPreviousPage' | 'startCursor' | 'endCursor'>\n          )> }\n        )> }\n      )> }\n    )>>>, pageInfo?: Types.Maybe<(\n      { __typename?: 'ConnectionPageInfo' }\n      & Pick<Types.ConnectionPageInfo, 'hasNextPage' | 'hasPreviousPage' | 'startCursor' | 'endCursor'>\n    )> }\n  )> }\n);\n\nexport type ClassNodeStudentsQueryVariables = Types.Exact<{\n  classId: Types.Scalars['ID'];\n  studentsCursor?: Types.Maybe<Types.Scalars['String']>;\n}>;\n\n\nexport type ClassNodeStudentsQuery = (\n  { __typename?: 'Query' }\n  & { classNode?: Types.Maybe<(\n    { __typename?: 'ClassConnectionNode' }\n    & Pick<Types.ClassConnectionNode, 'name'>\n    & { studentsConnection?: Types.Maybe<(\n      { __typename?: 'UsersConnectionResponse' }\n      & Pick<Types.UsersConnectionResponse, 'totalCount'>\n      & { edges?: Types.Maybe<Array<Types.Maybe<(\n        { __typename?: 'UsersConnectionEdge' }\n        & { node?: Types.Maybe<(\n          { __typename?: 'UserConnectionNode' }\n          & Pick<Types.UserConnectionNode, 'id' | 'familyName' | 'givenName' | 'status'>\n        )> }\n      )>>>, pageInfo?: Types.Maybe<(\n        { __typename?: 'ConnectionPageInfo' }\n        & Pick<Types.ConnectionPageInfo, 'hasNextPage' | 'hasPreviousPage' | 'startCursor' | 'endCursor'>\n      )> }\n    )> }\n  )> }\n);\n\nexport type GetUsersByNameQueryVariables = Types.Exact<{\n  filter?: Types.Maybe<Types.UserFilter>;\n  directionArgs?: Types.Maybe<Types.ConnectionsDirectionArgs>;\n}>;\n\n\nexport type GetUsersByNameQuery = (\n  { __typename?: 'Query' }\n  & { usersConnection?: Types.Maybe<(\n    { __typename?: 'UsersConnectionResponse' }\n    & { edges?: Types.Maybe<Array<Types.Maybe<(\n      { __typename?: 'UsersConnectionEdge' }\n      & { node?: Types.Maybe<(\n        { __typename?: 'UserConnectionNode' }\n        & Pick<Types.UserConnectionNode, 'id' | 'givenName' | 'familyName'>\n      )> }\n    )>>>, pageInfo?: Types.Maybe<(\n      { __typename?: 'ConnectionPageInfo' }\n      & Pick<Types.ConnectionPageInfo, 'hasNextPage' | 'endCursor'>\n    )> }\n  )> }\n);\n\nexport type GetProgramIdByNameQueryVariables = Types.Exact<{\n  filter: Types.ProgramFilter;\n}>;\n\n\nexport type GetProgramIdByNameQuery = (\n  { __typename?: 'Query' }\n  & { programsConnection?: Types.Maybe<(\n    { __typename?: 'ProgramsConnectionResponse' }\n    & { edges?: Types.Maybe<Array<Types.Maybe<(\n      { __typename?: 'ProgramsConnectionEdge' }\n      & { node?: Types.Maybe<(\n        { __typename?: 'ProgramConnectionNode' }\n        & Pick<Types.ProgramConnectionNode, 'id' | 'name' | 'status' | 'system'>\n        & { subjectsConnection?: Types.Maybe<(\n          { __typename?: 'SubjectsConnectionResponse' }\n          & { edges?: Types.Maybe<Array<Types.Maybe<(\n            { __typename?: 'SubjectsConnectionEdge' }\n            & { node?: Types.Maybe<(\n              { __typename?: 'SubjectConnectionNode' }\n              & Pick<Types.SubjectConnectionNode, 'id' | 'name' | 'status' | 'system'>\n            )> }\n          )>>> }\n        )>, ageRangesConnection?: Types.Maybe<(\n          { __typename?: 'AgeRangesConnectionResponse' }\n          & { edges?: Types.Maybe<Array<Types.Maybe<(\n            { __typename?: 'AgeRangesConnectionEdge' }\n            & { node?: Types.Maybe<(\n              { __typename?: 'AgeRangeConnectionNode' }\n              & Pick<Types.AgeRangeConnectionNode, 'id' | 'name' | 'status' | 'system'>\n            )> }\n          )>>> }\n        )>, gradesConnection?: Types.Maybe<(\n          { __typename?: 'GradesConnectionResponse' }\n          & { edges?: Types.Maybe<Array<Types.Maybe<(\n            { __typename?: 'GradesConnectionEdge' }\n            & { node?: Types.Maybe<(\n              { __typename?: 'GradeConnectionNode' }\n              & Pick<Types.GradeConnectionNode, 'id' | 'name' | 'status' | 'system'>\n            )> }\n          )>>> }\n        )> }\n      )> }\n    )>>> }\n  )> }\n);\n\nexport const UserIdNameFragmentDoc = gql`\n    fragment userIdName on User {\n  user_id\n  user_name\n  family_name\n  given_name\n}\n    `;\nexport const ClassIdNameStatusFragmentDoc = gql`\n    fragment classIdNameStatus on Class {\n  class_id\n  class_name\n  status\n}\n    `;\nexport const ClassesByOrganizationDocument = gql`\n    query classesByOrganization($organization_id: ID!) {\n  organization(organization_id: $organization_id) {\n    classes {\n      class_id\n      class_name\n      status\n      schools {\n        school_id\n        school_name\n      }\n      teachers {\n        user_id\n        user_name\n      }\n      students {\n        user_id\n        user_name\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useClassesByOrganizationQuery__\n *\n * To run a query within a React component, call `useClassesByOrganizationQuery` and pass it any options that fit your needs.\n * When your component renders, `useClassesByOrganizationQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useClassesByOrganizationQuery({\n *   variables: {\n *      organization_id: // value for 'organization_id'\n *   },\n * });\n */\nexport function useClassesByOrganizationQuery(baseOptions: Apollo.QueryHookOptions<ClassesByOrganizationQuery, ClassesByOrganizationQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<ClassesByOrganizationQuery, ClassesByOrganizationQueryVariables>(ClassesByOrganizationDocument, options);\n      }\nexport function useClassesByOrganizationLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ClassesByOrganizationQuery, ClassesByOrganizationQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<ClassesByOrganizationQuery, ClassesByOrganizationQueryVariables>(ClassesByOrganizationDocument, options);\n        }\nexport type ClassesByOrganizationQueryHookResult = ReturnType<typeof useClassesByOrganizationQuery>;\nexport type ClassesByOrganizationLazyQueryHookResult = ReturnType<typeof useClassesByOrganizationLazyQuery>;\nexport type ClassesByOrganizationQueryResult = Apollo.QueryResult<ClassesByOrganizationQuery, ClassesByOrganizationQueryVariables>;\nexport const ParticipantsByClassDocument = gql`\n    query participantsByClass($class_id: ID!) {\n  class(class_id: $class_id) {\n    teachers {\n      ...userIdName\n    }\n    students {\n      ...userIdName\n    }\n  }\n}\n    ${UserIdNameFragmentDoc}`;\n\n/**\n * __useParticipantsByClassQuery__\n *\n * To run a query within a React component, call `useParticipantsByClassQuery` and pass it any options that fit your needs.\n * When your component renders, `useParticipantsByClassQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useParticipantsByClassQuery({\n *   variables: {\n *      class_id: // value for 'class_id'\n *   },\n * });\n */\nexport function useParticipantsByClassQuery(baseOptions: Apollo.QueryHookOptions<ParticipantsByClassQuery, ParticipantsByClassQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<ParticipantsByClassQuery, ParticipantsByClassQueryVariables>(ParticipantsByClassDocument, options);\n      }\nexport function useParticipantsByClassLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ParticipantsByClassQuery, ParticipantsByClassQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<ParticipantsByClassQuery, ParticipantsByClassQueryVariables>(ParticipantsByClassDocument, options);\n        }\nexport type ParticipantsByClassQueryHookResult = ReturnType<typeof useParticipantsByClassQuery>;\nexport type ParticipantsByClassLazyQueryHookResult = ReturnType<typeof useParticipantsByClassLazyQuery>;\nexport type ParticipantsByClassQueryResult = Apollo.QueryResult<ParticipantsByClassQuery, ParticipantsByClassQueryVariables>;\nexport const QueryMyUserDocument = gql`\n    query queryMyUser {\n  myUser {\n    node {\n      id\n      givenName\n      familyName\n    }\n  }\n}\n    `;\n\n/**\n * __useQueryMyUserQuery__\n *\n * To run a query within a React component, call `useQueryMyUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useQueryMyUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useQueryMyUserQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useQueryMyUserQuery(baseOptions?: Apollo.QueryHookOptions<QueryMyUserQuery, QueryMyUserQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<QueryMyUserQuery, QueryMyUserQueryVariables>(QueryMyUserDocument, options);\n      }\nexport function useQueryMyUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<QueryMyUserQuery, QueryMyUserQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<QueryMyUserQuery, QueryMyUserQueryVariables>(QueryMyUserDocument, options);\n        }\nexport type QueryMyUserQueryHookResult = ReturnType<typeof useQueryMyUserQuery>;\nexport type QueryMyUserLazyQueryHookResult = ReturnType<typeof useQueryMyUserLazyQuery>;\nexport type QueryMyUserQueryResult = Apollo.QueryResult<QueryMyUserQuery, QueryMyUserQueryVariables>;\nexport const GetSchoolMembershipsDocument = gql`\n    query getSchoolMemberships($userId: UUIDFilter, $organizationId: UUIDFilter, $cursor: String) {\n  schoolsConnection(\n    filter: {userId: $userId, organizationId: $organizationId}\n    direction: FORWARD\n    directionArgs: {cursor: $cursor}\n  ) {\n    totalCount\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n    edges {\n      node {\n        id\n        status\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGetSchoolMembershipsQuery__\n *\n * To run a query within a React component, call `useGetSchoolMembershipsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetSchoolMembershipsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetSchoolMembershipsQuery({\n *   variables: {\n *      userId: // value for 'userId'\n *      organizationId: // value for 'organizationId'\n *      cursor: // value for 'cursor'\n *   },\n * });\n */\nexport function useGetSchoolMembershipsQuery(baseOptions?: Apollo.QueryHookOptions<GetSchoolMembershipsQuery, GetSchoolMembershipsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetSchoolMembershipsQuery, GetSchoolMembershipsQueryVariables>(GetSchoolMembershipsDocument, options);\n      }\nexport function useGetSchoolMembershipsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetSchoolMembershipsQuery, GetSchoolMembershipsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetSchoolMembershipsQuery, GetSchoolMembershipsQueryVariables>(GetSchoolMembershipsDocument, options);\n        }\nexport type GetSchoolMembershipsQueryHookResult = ReturnType<typeof useGetSchoolMembershipsQuery>;\nexport type GetSchoolMembershipsLazyQueryHookResult = ReturnType<typeof useGetSchoolMembershipsLazyQuery>;\nexport type GetSchoolMembershipsQueryResult = Apollo.QueryResult<GetSchoolMembershipsQuery, GetSchoolMembershipsQueryVariables>;\nexport const GetClassesTeachingDocument = gql`\n    query getClassesTeaching($organizationId: UUIDFilter, $cursor: String) {\n  myUser {\n    node {\n      classesTeachingConnection(\n        filter: {organizationId: $organizationId}\n        cursor: $cursor\n      ) {\n        totalCount\n        pageInfo {\n          hasNextPage\n          endCursor\n        }\n        edges {\n          node {\n            id\n            status\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGetClassesTeachingQuery__\n *\n * To run a query within a React component, call `useGetClassesTeachingQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetClassesTeachingQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetClassesTeachingQuery({\n *   variables: {\n *      organizationId: // value for 'organizationId'\n *      cursor: // value for 'cursor'\n *   },\n * });\n */\nexport function useGetClassesTeachingQuery(baseOptions?: Apollo.QueryHookOptions<GetClassesTeachingQuery, GetClassesTeachingQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetClassesTeachingQuery, GetClassesTeachingQueryVariables>(GetClassesTeachingDocument, options);\n      }\nexport function useGetClassesTeachingLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetClassesTeachingQuery, GetClassesTeachingQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetClassesTeachingQuery, GetClassesTeachingQueryVariables>(GetClassesTeachingDocument, options);\n        }\nexport type GetClassesTeachingQueryHookResult = ReturnType<typeof useGetClassesTeachingQuery>;\nexport type GetClassesTeachingLazyQueryHookResult = ReturnType<typeof useGetClassesTeachingLazyQuery>;\nexport type GetClassesTeachingQueryResult = Apollo.QueryResult<GetClassesTeachingQuery, GetClassesTeachingQueryVariables>;\nexport const GetStudentNameByIdDocument = gql`\n    query getStudentNameById($filter: UserFilter, $directionArgs: ConnectionsDirectionArgs) {\n  usersConnection(\n    filter: $filter\n    direction: FORWARD\n    directionArgs: $directionArgs\n  ) {\n    edges {\n      node {\n        id\n        givenName\n        familyName\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useGetStudentNameByIdQuery__\n *\n * To run a query within a React component, call `useGetStudentNameByIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetStudentNameByIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetStudentNameByIdQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *      directionArgs: // value for 'directionArgs'\n *   },\n * });\n */\nexport function useGetStudentNameByIdQuery(baseOptions?: Apollo.QueryHookOptions<GetStudentNameByIdQuery, GetStudentNameByIdQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetStudentNameByIdQuery, GetStudentNameByIdQueryVariables>(GetStudentNameByIdDocument, options);\n      }\nexport function useGetStudentNameByIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetStudentNameByIdQuery, GetStudentNameByIdQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetStudentNameByIdQuery, GetStudentNameByIdQueryVariables>(GetStudentNameByIdDocument, options);\n        }\nexport type GetStudentNameByIdQueryHookResult = ReturnType<typeof useGetStudentNameByIdQuery>;\nexport type GetStudentNameByIdLazyQueryHookResult = ReturnType<typeof useGetStudentNameByIdLazyQuery>;\nexport type GetStudentNameByIdQueryResult = Apollo.QueryResult<GetStudentNameByIdQuery, GetStudentNameByIdQueryVariables>;\nexport const GetOrganizationsDocument = gql`\n    query getOrganizations($direction: ConnectionDirection!, $cursor: String, $count: PageSize, $sort: OrganizationSortInput!, $filter: OrganizationFilter!) {\n  organizationsConnection(\n    direction: $direction\n    filter: $filter\n    directionArgs: {count: $count, cursor: $cursor}\n    sort: $sort\n  ) {\n    totalCount\n    edges {\n      node {\n        id\n        name\n        owners {\n          email\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useGetOrganizationsQuery__\n *\n * To run a query within a React component, call `useGetOrganizationsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetOrganizationsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetOrganizationsQuery({\n *   variables: {\n *      direction: // value for 'direction'\n *      cursor: // value for 'cursor'\n *      count: // value for 'count'\n *      sort: // value for 'sort'\n *      filter: // value for 'filter'\n *   },\n * });\n */\nexport function useGetOrganizationsQuery(baseOptions: Apollo.QueryHookOptions<GetOrganizationsQuery, GetOrganizationsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetOrganizationsQuery, GetOrganizationsQueryVariables>(GetOrganizationsDocument, options);\n      }\nexport function useGetOrganizationsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetOrganizationsQuery, GetOrganizationsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetOrganizationsQuery, GetOrganizationsQueryVariables>(GetOrganizationsDocument, options);\n        }\nexport type GetOrganizationsQueryHookResult = ReturnType<typeof useGetOrganizationsQuery>;\nexport type GetOrganizationsLazyQueryHookResult = ReturnType<typeof useGetOrganizationsLazyQuery>;\nexport type GetOrganizationsQueryResult = Apollo.QueryResult<GetOrganizationsQuery, GetOrganizationsQueryVariables>;\nexport const ClassesBySchoolDocument = gql`\n    query classesBySchool($school_id: ID!) {\n  school(school_id: $school_id) {\n    classes {\n      ...classIdNameStatus\n      schools {\n        school_id\n        school_name\n      }\n      teachers {\n        ...userIdName\n      }\n      students {\n        ...userIdName\n      }\n    }\n  }\n}\n    ${ClassIdNameStatusFragmentDoc}\n${UserIdNameFragmentDoc}`;\n\n/**\n * __useClassesBySchoolQuery__\n *\n * To run a query within a React component, call `useClassesBySchoolQuery` and pass it any options that fit your needs.\n * When your component renders, `useClassesBySchoolQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useClassesBySchoolQuery({\n *   variables: {\n *      school_id: // value for 'school_id'\n *   },\n * });\n */\nexport function useClassesBySchoolQuery(baseOptions: Apollo.QueryHookOptions<ClassesBySchoolQuery, ClassesBySchoolQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<ClassesBySchoolQuery, ClassesBySchoolQueryVariables>(ClassesBySchoolDocument, options);\n      }\nexport function useClassesBySchoolLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ClassesBySchoolQuery, ClassesBySchoolQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<ClassesBySchoolQuery, ClassesBySchoolQueryVariables>(ClassesBySchoolDocument, options);\n        }\nexport type ClassesBySchoolQueryHookResult = ReturnType<typeof useClassesBySchoolQuery>;\nexport type ClassesBySchoolLazyQueryHookResult = ReturnType<typeof useClassesBySchoolLazyQuery>;\nexport type ClassesBySchoolQueryResult = Apollo.QueryResult<ClassesBySchoolQuery, ClassesBySchoolQueryVariables>;\nexport const ClassesTeachingQueryDocument = gql`\n    query classesTeachingQuery($user_id: ID!, $organization_id: ID!) {\n  user(user_id: $user_id) {\n    membership(organization_id: $organization_id) {\n      classesTeaching {\n        class_id\n        class_name\n        status\n        schools {\n          school_id\n          school_name\n        }\n        teachers {\n          user_id\n          user_name\n        }\n        students {\n          user_id\n          user_name\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useClassesTeachingQueryQuery__\n *\n * To run a query within a React component, call `useClassesTeachingQueryQuery` and pass it any options that fit your needs.\n * When your component renders, `useClassesTeachingQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useClassesTeachingQueryQuery({\n *   variables: {\n *      user_id: // value for 'user_id'\n *      organization_id: // value for 'organization_id'\n *   },\n * });\n */\nexport function useClassesTeachingQueryQuery(baseOptions: Apollo.QueryHookOptions<ClassesTeachingQueryQuery, ClassesTeachingQueryQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<ClassesTeachingQueryQuery, ClassesTeachingQueryQueryVariables>(ClassesTeachingQueryDocument, options);\n      }\nexport function useClassesTeachingQueryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ClassesTeachingQueryQuery, ClassesTeachingQueryQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<ClassesTeachingQueryQuery, ClassesTeachingQueryQueryVariables>(ClassesTeachingQueryDocument, options);\n        }\nexport type ClassesTeachingQueryQueryHookResult = ReturnType<typeof useClassesTeachingQueryQuery>;\nexport type ClassesTeachingQueryLazyQueryHookResult = ReturnType<typeof useClassesTeachingQueryLazyQuery>;\nexport type ClassesTeachingQueryQueryResult = Apollo.QueryResult<ClassesTeachingQueryQuery, ClassesTeachingQueryQueryVariables>;\nexport const ClassesStudentQueryDocument = gql`\n    query classesStudentQuery($user_id: ID!, $organization_id: ID!) {\n  user(user_id: $user_id) {\n    membership(organization_id: $organization_id) {\n      classes {\n        class_id\n        class_name\n        status\n        schools {\n          school_id\n          school_name\n        }\n        teachers {\n          user_id\n          user_name\n        }\n        students {\n          user_id\n          user_name\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useClassesStudentQueryQuery__\n *\n * To run a query within a React component, call `useClassesStudentQueryQuery` and pass it any options that fit your needs.\n * When your component renders, `useClassesStudentQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useClassesStudentQueryQuery({\n *   variables: {\n *      user_id: // value for 'user_id'\n *      organization_id: // value for 'organization_id'\n *   },\n * });\n */\nexport function useClassesStudentQueryQuery(baseOptions: Apollo.QueryHookOptions<ClassesStudentQueryQuery, ClassesStudentQueryQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<ClassesStudentQueryQuery, ClassesStudentQueryQueryVariables>(ClassesStudentQueryDocument, options);\n      }\nexport function useClassesStudentQueryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ClassesStudentQueryQuery, ClassesStudentQueryQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<ClassesStudentQueryQuery, ClassesStudentQueryQueryVariables>(ClassesStudentQueryDocument, options);\n        }\nexport type ClassesStudentQueryQueryHookResult = ReturnType<typeof useClassesStudentQueryQuery>;\nexport type ClassesStudentQueryLazyQueryHookResult = ReturnType<typeof useClassesStudentQueryLazyQuery>;\nexport type ClassesStudentQueryQueryResult = Apollo.QueryResult<ClassesStudentQueryQuery, ClassesStudentQueryQueryVariables>;\nexport const SchoolByUserQueryDocument = gql`\n    query schoolByUserQuery($user_id: ID!, $organization_id: ID!) {\n  user(user_id: $user_id) {\n    membership(organization_id: $organization_id) {\n      schoolMemberships {\n        school {\n          school_id\n          school_name\n          classes {\n            status\n            class_id\n            class_name\n            teachers {\n              user_id\n              user_name\n            }\n            students {\n              user_id\n              user_name\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useSchoolByUserQueryQuery__\n *\n * To run a query within a React component, call `useSchoolByUserQueryQuery` and pass it any options that fit your needs.\n * When your component renders, `useSchoolByUserQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSchoolByUserQueryQuery({\n *   variables: {\n *      user_id: // value for 'user_id'\n *      organization_id: // value for 'organization_id'\n *   },\n * });\n */\nexport function useSchoolByUserQueryQuery(baseOptions: Apollo.QueryHookOptions<SchoolByUserQueryQuery, SchoolByUserQueryQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<SchoolByUserQueryQuery, SchoolByUserQueryQueryVariables>(SchoolByUserQueryDocument, options);\n      }\nexport function useSchoolByUserQueryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SchoolByUserQueryQuery, SchoolByUserQueryQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<SchoolByUserQueryQuery, SchoolByUserQueryQueryVariables>(SchoolByUserQueryDocument, options);\n        }\nexport type SchoolByUserQueryQueryHookResult = ReturnType<typeof useSchoolByUserQueryQuery>;\nexport type SchoolByUserQueryLazyQueryHookResult = ReturnType<typeof useSchoolByUserQueryLazyQuery>;\nexport type SchoolByUserQueryQueryResult = Apollo.QueryResult<SchoolByUserQueryQuery, SchoolByUserQueryQueryVariables>;\nexport const SchoolByOrgQueryDocument = gql`\n    query schoolByOrgQuery($organization_id: ID!) {\n  organization(organization_id: $organization_id) {\n    schools {\n      school_id\n      school_name\n      classes {\n        status\n        class_id\n        class_name\n        teachers {\n          user_id\n          user_name\n        }\n        students {\n          user_id\n          user_name\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useSchoolByOrgQueryQuery__\n *\n * To run a query within a React component, call `useSchoolByOrgQueryQuery` and pass it any options that fit your needs.\n * When your component renders, `useSchoolByOrgQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSchoolByOrgQueryQuery({\n *   variables: {\n *      organization_id: // value for 'organization_id'\n *   },\n * });\n */\nexport function useSchoolByOrgQueryQuery(baseOptions: Apollo.QueryHookOptions<SchoolByOrgQueryQuery, SchoolByOrgQueryQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<SchoolByOrgQueryQuery, SchoolByOrgQueryQueryVariables>(SchoolByOrgQueryDocument, options);\n      }\nexport function useSchoolByOrgQueryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SchoolByOrgQueryQuery, SchoolByOrgQueryQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<SchoolByOrgQueryQuery, SchoolByOrgQueryQueryVariables>(SchoolByOrgQueryDocument, options);\n        }\nexport type SchoolByOrgQueryQueryHookResult = ReturnType<typeof useSchoolByOrgQueryQuery>;\nexport type SchoolByOrgQueryLazyQueryHookResult = ReturnType<typeof useSchoolByOrgQueryLazyQuery>;\nexport type SchoolByOrgQueryQueryResult = Apollo.QueryResult<SchoolByOrgQueryQuery, SchoolByOrgQueryQueryVariables>;\nexport const GetProgramsDocument = gql`\n    query getPrograms($program_id: ID!) {\n  program(id: $program_id) {\n    id\n    name\n    status\n    subjects {\n      id\n      name\n      status\n      categories {\n        id\n        name\n        status\n        subcategories {\n          id\n          name\n          status\n        }\n      }\n    }\n    age_ranges {\n      id\n      name\n      status\n    }\n    grades {\n      id\n      name\n      status\n    }\n  }\n}\n    `;\n\n/**\n * __useGetProgramsQuery__\n *\n * To run a query within a React component, call `useGetProgramsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProgramsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProgramsQuery({\n *   variables: {\n *      program_id: // value for 'program_id'\n *   },\n * });\n */\nexport function useGetProgramsQuery(baseOptions: Apollo.QueryHookOptions<GetProgramsQuery, GetProgramsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetProgramsQuery, GetProgramsQueryVariables>(GetProgramsDocument, options);\n      }\nexport function useGetProgramsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetProgramsQuery, GetProgramsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetProgramsQuery, GetProgramsQueryVariables>(GetProgramsDocument, options);\n        }\nexport type GetProgramsQueryHookResult = ReturnType<typeof useGetProgramsQuery>;\nexport type GetProgramsLazyQueryHookResult = ReturnType<typeof useGetProgramsLazyQuery>;\nexport type GetProgramsQueryResult = Apollo.QueryResult<GetProgramsQuery, GetProgramsQueryVariables>;\nexport const GetProgramsAndSubjectsDocument = gql`\n    query getProgramsAndSubjects($count: PageSize!, $cursor: String!, $filter: ProgramFilter!) {\n  programsConnection(\n    filter: $filter\n    directionArgs: {count: $count, cursor: $cursor}\n    direction: FORWARD\n  ) {\n    totalCount\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n    edges {\n      node {\n        id\n        name\n        status\n        system\n        ageRanges {\n          id\n          name\n          status\n          system\n        }\n        grades {\n          id\n          name\n          status\n          system\n        }\n        subjects {\n          id\n          name\n          status\n          system\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGetProgramsAndSubjectsQuery__\n *\n * To run a query within a React component, call `useGetProgramsAndSubjectsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProgramsAndSubjectsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProgramsAndSubjectsQuery({\n *   variables: {\n *      count: // value for 'count'\n *      cursor: // value for 'cursor'\n *      filter: // value for 'filter'\n *   },\n * });\n */\nexport function useGetProgramsAndSubjectsQuery(baseOptions: Apollo.QueryHookOptions<GetProgramsAndSubjectsQuery, GetProgramsAndSubjectsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetProgramsAndSubjectsQuery, GetProgramsAndSubjectsQueryVariables>(GetProgramsAndSubjectsDocument, options);\n      }\nexport function useGetProgramsAndSubjectsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetProgramsAndSubjectsQuery, GetProgramsAndSubjectsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetProgramsAndSubjectsQuery, GetProgramsAndSubjectsQueryVariables>(GetProgramsAndSubjectsDocument, options);\n        }\nexport type GetProgramsAndSubjectsQueryHookResult = ReturnType<typeof useGetProgramsAndSubjectsQuery>;\nexport type GetProgramsAndSubjectsLazyQueryHookResult = ReturnType<typeof useGetProgramsAndSubjectsLazyQuery>;\nexport type GetProgramsAndSubjectsQueryResult = Apollo.QueryResult<GetProgramsAndSubjectsQuery, GetProgramsAndSubjectsQueryVariables>;\nexport const GetSchoolsFilterListDocument = gql`\n    query getSchoolsFilterList($filter: SchoolFilter, $direction: ConnectionDirection!, $directionArgs: ConnectionsDirectionArgs) {\n  schoolsConnection(\n    filter: $filter\n    direction: $direction\n    directionArgs: $directionArgs\n  ) {\n    totalCount\n    edges {\n      cursor\n      node {\n        id\n        name\n      }\n    }\n    pageInfo {\n      hasNextPage\n    }\n  }\n}\n    `;\n\n/**\n * __useGetSchoolsFilterListQuery__\n *\n * To run a query within a React component, call `useGetSchoolsFilterListQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetSchoolsFilterListQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetSchoolsFilterListQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *      direction: // value for 'direction'\n *      directionArgs: // value for 'directionArgs'\n *   },\n * });\n */\nexport function useGetSchoolsFilterListQuery(baseOptions: Apollo.QueryHookOptions<GetSchoolsFilterListQuery, GetSchoolsFilterListQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetSchoolsFilterListQuery, GetSchoolsFilterListQueryVariables>(GetSchoolsFilterListDocument, options);\n      }\nexport function useGetSchoolsFilterListLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetSchoolsFilterListQuery, GetSchoolsFilterListQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetSchoolsFilterListQuery, GetSchoolsFilterListQueryVariables>(GetSchoolsFilterListDocument, options);\n        }\nexport type GetSchoolsFilterListQueryHookResult = ReturnType<typeof useGetSchoolsFilterListQuery>;\nexport type GetSchoolsFilterListLazyQueryHookResult = ReturnType<typeof useGetSchoolsFilterListLazyQuery>;\nexport type GetSchoolsFilterListQueryResult = Apollo.QueryResult<GetSchoolsFilterListQuery, GetSchoolsFilterListQueryVariables>;\nexport const GetClassFilterListDocument = gql`\n    query getClassFilterList($filter: ClassFilter, $direction: ConnectionDirection!, $directionArgs: ConnectionsDirectionArgs) {\n  classesConnection(\n    filter: $filter\n    direction: $direction\n    directionArgs: $directionArgs\n  ) {\n    totalCount\n    edges {\n      cursor\n      node {\n        id\n        name\n      }\n    }\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useGetClassFilterListQuery__\n *\n * To run a query within a React component, call `useGetClassFilterListQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetClassFilterListQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetClassFilterListQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *      direction: // value for 'direction'\n *      directionArgs: // value for 'directionArgs'\n *   },\n * });\n */\nexport function useGetClassFilterListQuery(baseOptions: Apollo.QueryHookOptions<GetClassFilterListQuery, GetClassFilterListQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetClassFilterListQuery, GetClassFilterListQueryVariables>(GetClassFilterListDocument, options);\n      }\nexport function useGetClassFilterListLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetClassFilterListQuery, GetClassFilterListQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetClassFilterListQuery, GetClassFilterListQueryVariables>(GetClassFilterListDocument, options);\n        }\nexport type GetClassFilterListQueryHookResult = ReturnType<typeof useGetClassFilterListQuery>;\nexport type GetClassFilterListLazyQueryHookResult = ReturnType<typeof useGetClassFilterListLazyQuery>;\nexport type GetClassFilterListQueryResult = Apollo.QueryResult<GetClassFilterListQuery, GetClassFilterListQueryVariables>;\nexport const GetUserDocument = gql`\n    query getUser($filter: UserFilter, $direction: ConnectionDirection!, $directionArgs: ConnectionsDirectionArgs) {\n  usersConnection(\n    direction: $direction\n    filter: $filter\n    directionArgs: $directionArgs\n  ) {\n    totalCount\n    edges {\n      node {\n        id\n        givenName\n        familyName\n        status\n        roles {\n          id\n          name\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useGetUserQuery__\n *\n * To run a query within a React component, call `useGetUserQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUserQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUserQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *      direction: // value for 'direction'\n *      directionArgs: // value for 'directionArgs'\n *   },\n * });\n */\nexport function useGetUserQuery(baseOptions: Apollo.QueryHookOptions<GetUserQuery, GetUserQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetUserQuery, GetUserQueryVariables>(GetUserDocument, options);\n      }\nexport function useGetUserLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUserQuery, GetUserQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetUserQuery, GetUserQueryVariables>(GetUserDocument, options);\n        }\nexport type GetUserQueryHookResult = ReturnType<typeof useGetUserQuery>;\nexport type GetUserLazyQueryHookResult = ReturnType<typeof useGetUserLazyQuery>;\nexport type GetUserQueryResult = Apollo.QueryResult<GetUserQuery, GetUserQueryVariables>;\nexport const GetClassByInfoDocument = gql`\n    query getClassByInfo($filter: ClassFilter, $direction: ConnectionDirection!, $studentFilter: UserFilter, $teacherFilter: UserFilter, $studentCursor: String, $studentDirection: ConnectionDirection, $teacherCursor: String, $teacherDirection: ConnectionDirection) {\n  classesConnection(filter: $filter, direction: $direction) {\n    edges {\n      cursor\n      node {\n        id\n        name\n        studentsConnection(\n          filter: $studentFilter\n          cursor: $studentCursor\n          direction: $studentDirection\n        ) {\n          totalCount\n          edges {\n            cursor\n            node {\n              id\n              givenName\n              familyName\n              status\n            }\n          }\n          pageInfo {\n            hasNextPage\n            hasPreviousPage\n            startCursor\n            endCursor\n          }\n        }\n        teachersConnection(\n          filter: $teacherFilter\n          cursor: $teacherCursor\n          direction: $teacherDirection\n        ) {\n          totalCount\n          edges {\n            cursor\n            node {\n              id\n              givenName\n              familyName\n              status\n            }\n          }\n          pageInfo {\n            hasNextPage\n            hasPreviousPage\n            startCursor\n            endCursor\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGetClassByInfoQuery__\n *\n * To run a query within a React component, call `useGetClassByInfoQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetClassByInfoQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetClassByInfoQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *      direction: // value for 'direction'\n *      studentFilter: // value for 'studentFilter'\n *      teacherFilter: // value for 'teacherFilter'\n *      studentCursor: // value for 'studentCursor'\n *      studentDirection: // value for 'studentDirection'\n *      teacherCursor: // value for 'teacherCursor'\n *      teacherDirection: // value for 'teacherDirection'\n *   },\n * });\n */\nexport function useGetClassByInfoQuery(baseOptions: Apollo.QueryHookOptions<GetClassByInfoQuery, GetClassByInfoQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetClassByInfoQuery, GetClassByInfoQueryVariables>(GetClassByInfoDocument, options);\n      }\nexport function useGetClassByInfoLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetClassByInfoQuery, GetClassByInfoQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetClassByInfoQuery, GetClassByInfoQueryVariables>(GetClassByInfoDocument, options);\n        }\nexport type GetClassByInfoQueryHookResult = ReturnType<typeof useGetClassByInfoQuery>;\nexport type GetClassByInfoLazyQueryHookResult = ReturnType<typeof useGetClassByInfoLazyQuery>;\nexport type GetClassByInfoQueryResult = Apollo.QueryResult<GetClassByInfoQuery, GetClassByInfoQueryVariables>;\nexport const GetRolesIdDocument = gql`\n    query getRolesId($filter: RoleFilter, $direction: ConnectionDirection!, $directionArgs: ConnectionsDirectionArgs) {\n  rolesConnection(\n    filter: $filter\n    direction: $direction\n    directionArgs: $directionArgs\n  ) {\n    totalCount\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n    edges {\n      node {\n        id\n        name\n        status\n        system\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGetRolesIdQuery__\n *\n * To run a query within a React component, call `useGetRolesIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetRolesIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetRolesIdQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *      direction: // value for 'direction'\n *      directionArgs: // value for 'directionArgs'\n *   },\n * });\n */\nexport function useGetRolesIdQuery(baseOptions: Apollo.QueryHookOptions<GetRolesIdQuery, GetRolesIdQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetRolesIdQuery, GetRolesIdQueryVariables>(GetRolesIdDocument, options);\n      }\nexport function useGetRolesIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetRolesIdQuery, GetRolesIdQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetRolesIdQuery, GetRolesIdQueryVariables>(GetRolesIdDocument, options);\n        }\nexport type GetRolesIdQueryHookResult = ReturnType<typeof useGetRolesIdQuery>;\nexport type GetRolesIdLazyQueryHookResult = ReturnType<typeof useGetRolesIdLazyQuery>;\nexport type GetRolesIdQueryResult = Apollo.QueryResult<GetRolesIdQuery, GetRolesIdQueryVariables>;\nexport const UserNameByUserIdQueryDocument = gql`\n    query userNameByUserIdQuery($filter: UserFilter) {\n  usersConnection(filter: $filter, direction: FORWARD) {\n    edges {\n      node {\n        id\n        givenName\n        familyName\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useUserNameByUserIdQueryQuery__\n *\n * To run a query within a React component, call `useUserNameByUserIdQueryQuery` and pass it any options that fit your needs.\n * When your component renders, `useUserNameByUserIdQueryQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useUserNameByUserIdQueryQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *   },\n * });\n */\nexport function useUserNameByUserIdQueryQuery(baseOptions?: Apollo.QueryHookOptions<UserNameByUserIdQueryQuery, UserNameByUserIdQueryQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<UserNameByUserIdQueryQuery, UserNameByUserIdQueryQueryVariables>(UserNameByUserIdQueryDocument, options);\n      }\nexport function useUserNameByUserIdQueryLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<UserNameByUserIdQueryQuery, UserNameByUserIdQueryQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<UserNameByUserIdQueryQuery, UserNameByUserIdQueryQueryVariables>(UserNameByUserIdQueryDocument, options);\n        }\nexport type UserNameByUserIdQueryQueryHookResult = ReturnType<typeof useUserNameByUserIdQueryQuery>;\nexport type UserNameByUserIdQueryLazyQueryHookResult = ReturnType<typeof useUserNameByUserIdQueryLazyQuery>;\nexport type UserNameByUserIdQueryQueryResult = Apollo.QueryResult<UserNameByUserIdQueryQuery, UserNameByUserIdQueryQueryVariables>;\nexport const ClassesTeachersConnectionDocument = gql`\n    query classesTeachersConnection($cursor: String, $filter: ClassFilter, $teacherFilter: UserFilter, $teacherCursor: String) {\n  classesConnection(\n    filter: $filter\n    directionArgs: {cursor: $cursor}\n    direction: FORWARD\n    sort: {order: ASC, field: name}\n  ) {\n    totalCount\n    edges {\n      node {\n        id\n        name\n        teachersConnection(\n          filter: $teacherFilter\n          cursor: $teacherCursor\n          direction: FORWARD\n        ) {\n          totalCount\n          edges {\n            cursor\n            node {\n              id\n              givenName\n              familyName\n              status\n            }\n          }\n          pageInfo {\n            hasNextPage\n            hasPreviousPage\n            startCursor\n            endCursor\n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useClassesTeachersConnectionQuery__\n *\n * To run a query within a React component, call `useClassesTeachersConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useClassesTeachersConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useClassesTeachersConnectionQuery({\n *   variables: {\n *      cursor: // value for 'cursor'\n *      filter: // value for 'filter'\n *      teacherFilter: // value for 'teacherFilter'\n *      teacherCursor: // value for 'teacherCursor'\n *   },\n * });\n */\nexport function useClassesTeachersConnectionQuery(baseOptions?: Apollo.QueryHookOptions<ClassesTeachersConnectionQuery, ClassesTeachersConnectionQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<ClassesTeachersConnectionQuery, ClassesTeachersConnectionQueryVariables>(ClassesTeachersConnectionDocument, options);\n      }\nexport function useClassesTeachersConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ClassesTeachersConnectionQuery, ClassesTeachersConnectionQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<ClassesTeachersConnectionQuery, ClassesTeachersConnectionQueryVariables>(ClassesTeachersConnectionDocument, options);\n        }\nexport type ClassesTeachersConnectionQueryHookResult = ReturnType<typeof useClassesTeachersConnectionQuery>;\nexport type ClassesTeachersConnectionLazyQueryHookResult = ReturnType<typeof useClassesTeachersConnectionLazyQuery>;\nexport type ClassesTeachersConnectionQueryResult = Apollo.QueryResult<ClassesTeachersConnectionQuery, ClassesTeachersConnectionQueryVariables>;\nexport const ClassNodeDocument = gql`\n    query classNode($classId: ID!, $teacherCursor: String) {\n  classNode(id: $classId) {\n    name\n    teachersConnection(cursor: $teacherCursor) {\n      totalCount\n      edges {\n        node {\n          id\n          familyName\n          givenName\n          status\n        }\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useClassNodeQuery__\n *\n * To run a query within a React component, call `useClassNodeQuery` and pass it any options that fit your needs.\n * When your component renders, `useClassNodeQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useClassNodeQuery({\n *   variables: {\n *      classId: // value for 'classId'\n *      teacherCursor: // value for 'teacherCursor'\n *   },\n * });\n */\nexport function useClassNodeQuery(baseOptions: Apollo.QueryHookOptions<ClassNodeQuery, ClassNodeQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<ClassNodeQuery, ClassNodeQueryVariables>(ClassNodeDocument, options);\n      }\nexport function useClassNodeLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ClassNodeQuery, ClassNodeQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<ClassNodeQuery, ClassNodeQueryVariables>(ClassNodeDocument, options);\n        }\nexport type ClassNodeQueryHookResult = ReturnType<typeof useClassNodeQuery>;\nexport type ClassNodeLazyQueryHookResult = ReturnType<typeof useClassNodeLazyQuery>;\nexport type ClassNodeQueryResult = Apollo.QueryResult<ClassNodeQuery, ClassNodeQueryVariables>;\nexport const ClassesBySchoolIdDocument = gql`\n    query classesBySchoolId($cursor: String, $filter: ClassFilter, $schoolId: ID!) {\n  schoolNode(id: $schoolId) {\n    organizationId\n    classesConnection(filter: $filter, cursor: $cursor, direction: FORWARD) {\n      totalCount\n      pageInfo {\n        endCursor\n        hasNextPage\n      }\n      edges {\n        node {\n          id\n          name\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useClassesBySchoolIdQuery__\n *\n * To run a query within a React component, call `useClassesBySchoolIdQuery` and pass it any options that fit your needs.\n * When your component renders, `useClassesBySchoolIdQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useClassesBySchoolIdQuery({\n *   variables: {\n *      cursor: // value for 'cursor'\n *      filter: // value for 'filter'\n *      schoolId: // value for 'schoolId'\n *   },\n * });\n */\nexport function useClassesBySchoolIdQuery(baseOptions: Apollo.QueryHookOptions<ClassesBySchoolIdQuery, ClassesBySchoolIdQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<ClassesBySchoolIdQuery, ClassesBySchoolIdQueryVariables>(ClassesBySchoolIdDocument, options);\n      }\nexport function useClassesBySchoolIdLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ClassesBySchoolIdQuery, ClassesBySchoolIdQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<ClassesBySchoolIdQuery, ClassesBySchoolIdQueryVariables>(ClassesBySchoolIdDocument, options);\n        }\nexport type ClassesBySchoolIdQueryHookResult = ReturnType<typeof useClassesBySchoolIdQuery>;\nexport type ClassesBySchoolIdLazyQueryHookResult = ReturnType<typeof useClassesBySchoolIdLazyQuery>;\nexport type ClassesBySchoolIdQueryResult = Apollo.QueryResult<ClassesBySchoolIdQuery, ClassesBySchoolIdQueryVariables>;\nexport const ClassesListDocument = gql`\n    query classesList($cursor: String, $filter: ClassFilter) {\n  classesConnection(\n    filter: $filter\n    directionArgs: {cursor: $cursor}\n    direction: FORWARD\n  ) {\n    totalCount\n    edges {\n      node {\n        id\n        name\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useClassesListQuery__\n *\n * To run a query within a React component, call `useClassesListQuery` and pass it any options that fit your needs.\n * When your component renders, `useClassesListQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useClassesListQuery({\n *   variables: {\n *      cursor: // value for 'cursor'\n *      filter: // value for 'filter'\n *   },\n * });\n */\nexport function useClassesListQuery(baseOptions?: Apollo.QueryHookOptions<ClassesListQuery, ClassesListQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<ClassesListQuery, ClassesListQueryVariables>(ClassesListDocument, options);\n      }\nexport function useClassesListLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ClassesListQuery, ClassesListQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<ClassesListQuery, ClassesListQueryVariables>(ClassesListDocument, options);\n        }\nexport type ClassesListQueryHookResult = ReturnType<typeof useClassesListQuery>;\nexport type ClassesListLazyQueryHookResult = ReturnType<typeof useClassesListLazyQuery>;\nexport type ClassesListQueryResult = Apollo.QueryResult<ClassesListQuery, ClassesListQueryVariables>;\nexport const SchoolsClassesDocument = gql`\n    query schoolsClasses($cursor: String, $filter: SchoolFilter) {\n  schoolsConnection(\n    filter: $filter\n    directionArgs: {cursor: $cursor}\n    direction: FORWARD\n    sort: {order: ASC, field: name}\n  ) {\n    totalCount\n    edges {\n      node {\n        id\n        name\n        classesConnection(direction: FORWARD) {\n          totalCount\n          edges {\n            node {\n              id\n              name\n            }\n          }\n          pageInfo {\n            hasNextPage\n            endCursor\n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useSchoolsClassesQuery__\n *\n * To run a query within a React component, call `useSchoolsClassesQuery` and pass it any options that fit your needs.\n * When your component renders, `useSchoolsClassesQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useSchoolsClassesQuery({\n *   variables: {\n *      cursor: // value for 'cursor'\n *      filter: // value for 'filter'\n *   },\n * });\n */\nexport function useSchoolsClassesQuery(baseOptions?: Apollo.QueryHookOptions<SchoolsClassesQuery, SchoolsClassesQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<SchoolsClassesQuery, SchoolsClassesQueryVariables>(SchoolsClassesDocument, options);\n      }\nexport function useSchoolsClassesLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<SchoolsClassesQuery, SchoolsClassesQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<SchoolsClassesQuery, SchoolsClassesQueryVariables>(SchoolsClassesDocument, options);\n        }\nexport type SchoolsClassesQueryHookResult = ReturnType<typeof useSchoolsClassesQuery>;\nexport type SchoolsClassesLazyQueryHookResult = ReturnType<typeof useSchoolsClassesLazyQuery>;\nexport type SchoolsClassesQueryResult = Apollo.QueryResult<SchoolsClassesQuery, SchoolsClassesQueryVariables>;\nexport const ClassesStudentsConnectionDocument = gql`\n    query classesStudentsConnection($cursor: String, $filter: ClassFilter) {\n  classesConnection(\n    filter: $filter\n    directionArgs: {cursor: $cursor}\n    direction: FORWARD\n    sort: {order: ASC, field: name}\n  ) {\n    totalCount\n    edges {\n      node {\n        id\n        name\n        studentsConnection(direction: FORWARD) {\n          totalCount\n          edges {\n            cursor\n            node {\n              id\n              givenName\n              familyName\n              status\n            }\n          }\n          pageInfo {\n            hasNextPage\n            hasPreviousPage\n            startCursor\n            endCursor\n          }\n        }\n      }\n    }\n    pageInfo {\n      hasNextPage\n      hasPreviousPage\n      startCursor\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useClassesStudentsConnectionQuery__\n *\n * To run a query within a React component, call `useClassesStudentsConnectionQuery` and pass it any options that fit your needs.\n * When your component renders, `useClassesStudentsConnectionQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useClassesStudentsConnectionQuery({\n *   variables: {\n *      cursor: // value for 'cursor'\n *      filter: // value for 'filter'\n *   },\n * });\n */\nexport function useClassesStudentsConnectionQuery(baseOptions?: Apollo.QueryHookOptions<ClassesStudentsConnectionQuery, ClassesStudentsConnectionQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<ClassesStudentsConnectionQuery, ClassesStudentsConnectionQueryVariables>(ClassesStudentsConnectionDocument, options);\n      }\nexport function useClassesStudentsConnectionLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ClassesStudentsConnectionQuery, ClassesStudentsConnectionQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<ClassesStudentsConnectionQuery, ClassesStudentsConnectionQueryVariables>(ClassesStudentsConnectionDocument, options);\n        }\nexport type ClassesStudentsConnectionQueryHookResult = ReturnType<typeof useClassesStudentsConnectionQuery>;\nexport type ClassesStudentsConnectionLazyQueryHookResult = ReturnType<typeof useClassesStudentsConnectionLazyQuery>;\nexport type ClassesStudentsConnectionQueryResult = Apollo.QueryResult<ClassesStudentsConnectionQuery, ClassesStudentsConnectionQueryVariables>;\nexport const ClassNodeStudentsDocument = gql`\n    query classNodeStudents($classId: ID!, $studentsCursor: String) {\n  classNode(id: $classId) {\n    name\n    studentsConnection(cursor: $studentsCursor) {\n      totalCount\n      edges {\n        node {\n          id\n          familyName\n          givenName\n          status\n        }\n      }\n      pageInfo {\n        hasNextPage\n        hasPreviousPage\n        startCursor\n        endCursor\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useClassNodeStudentsQuery__\n *\n * To run a query within a React component, call `useClassNodeStudentsQuery` and pass it any options that fit your needs.\n * When your component renders, `useClassNodeStudentsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useClassNodeStudentsQuery({\n *   variables: {\n *      classId: // value for 'classId'\n *      studentsCursor: // value for 'studentsCursor'\n *   },\n * });\n */\nexport function useClassNodeStudentsQuery(baseOptions: Apollo.QueryHookOptions<ClassNodeStudentsQuery, ClassNodeStudentsQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<ClassNodeStudentsQuery, ClassNodeStudentsQueryVariables>(ClassNodeStudentsDocument, options);\n      }\nexport function useClassNodeStudentsLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<ClassNodeStudentsQuery, ClassNodeStudentsQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<ClassNodeStudentsQuery, ClassNodeStudentsQueryVariables>(ClassNodeStudentsDocument, options);\n        }\nexport type ClassNodeStudentsQueryHookResult = ReturnType<typeof useClassNodeStudentsQuery>;\nexport type ClassNodeStudentsLazyQueryHookResult = ReturnType<typeof useClassNodeStudentsLazyQuery>;\nexport type ClassNodeStudentsQueryResult = Apollo.QueryResult<ClassNodeStudentsQuery, ClassNodeStudentsQueryVariables>;\nexport const GetUsersByNameDocument = gql`\n    query getUsersByName($filter: UserFilter, $directionArgs: ConnectionsDirectionArgs) {\n  usersConnection(\n    filter: $filter\n    direction: FORWARD\n    directionArgs: $directionArgs\n  ) {\n    edges {\n      node {\n        id\n        givenName\n        familyName\n      }\n    }\n    pageInfo {\n      hasNextPage\n      endCursor\n    }\n  }\n}\n    `;\n\n/**\n * __useGetUsersByNameQuery__\n *\n * To run a query within a React component, call `useGetUsersByNameQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetUsersByNameQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetUsersByNameQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *      directionArgs: // value for 'directionArgs'\n *   },\n * });\n */\nexport function useGetUsersByNameQuery(baseOptions?: Apollo.QueryHookOptions<GetUsersByNameQuery, GetUsersByNameQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetUsersByNameQuery, GetUsersByNameQueryVariables>(GetUsersByNameDocument, options);\n      }\nexport function useGetUsersByNameLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetUsersByNameQuery, GetUsersByNameQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetUsersByNameQuery, GetUsersByNameQueryVariables>(GetUsersByNameDocument, options);\n        }\nexport type GetUsersByNameQueryHookResult = ReturnType<typeof useGetUsersByNameQuery>;\nexport type GetUsersByNameLazyQueryHookResult = ReturnType<typeof useGetUsersByNameLazyQuery>;\nexport type GetUsersByNameQueryResult = Apollo.QueryResult<GetUsersByNameQuery, GetUsersByNameQueryVariables>;\nexport const GetProgramIdByNameDocument = gql`\n    query getProgramIdByName($filter: ProgramFilter!) {\n  programsConnection(filter: $filter, direction: FORWARD) {\n    edges {\n      node {\n        id\n        name\n        status\n        system\n        subjectsConnection {\n          edges {\n            node {\n              id\n              name\n              status\n              system\n            }\n          }\n        }\n        ageRangesConnection {\n          edges {\n            node {\n              id\n              name\n              status\n              system\n            }\n          }\n        }\n        gradesConnection {\n          edges {\n            node {\n              id\n              name\n              status\n              system\n            }\n          }\n        }\n      }\n    }\n  }\n}\n    `;\n\n/**\n * __useGetProgramIdByNameQuery__\n *\n * To run a query within a React component, call `useGetProgramIdByNameQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetProgramIdByNameQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetProgramIdByNameQuery({\n *   variables: {\n *      filter: // value for 'filter'\n *   },\n * });\n */\nexport function useGetProgramIdByNameQuery(baseOptions: Apollo.QueryHookOptions<GetProgramIdByNameQuery, GetProgramIdByNameQueryVariables>) {\n        const options = {...defaultOptions, ...baseOptions}\n        return Apollo.useQuery<GetProgramIdByNameQuery, GetProgramIdByNameQueryVariables>(GetProgramIdByNameDocument, options);\n      }\nexport function useGetProgramIdByNameLazyQuery(baseOptions?: Apollo.LazyQueryHookOptions<GetProgramIdByNameQuery, GetProgramIdByNameQueryVariables>) {\n          const options = {...defaultOptions, ...baseOptions}\n          return Apollo.useLazyQuery<GetProgramIdByNameQuery, GetProgramIdByNameQueryVariables>(GetProgramIdByNameDocument, options);\n        }\nexport type GetProgramIdByNameQueryHookResult = ReturnType<typeof useGetProgramIdByNameQuery>;\nexport type GetProgramIdByNameLazyQueryHookResult = ReturnType<typeof useGetProgramIdByNameLazyQuery>;\nexport type GetProgramIdByNameQueryResult = Apollo.QueryResult<GetProgramIdByNameQuery, GetProgramIdByNameQueryVariables>;"],"mappings":"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"},"metadata":{},"sourceType":"module"}