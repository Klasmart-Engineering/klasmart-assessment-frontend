{"ast":null,"code":"export function isUTF8(bytes){var i=0;while(i<bytes.length){if(// ASCII\nbytes[i]===0x09||bytes[i]===0x0A||bytes[i]===0x0D||0x20<=bytes[i]&&bytes[i]<=0x7E){i+=1;continue;}if(// non-overlong 2-byte\n0xC2<=bytes[i]&&bytes[i]<=0xDF&&0x80<=bytes[i+1]&&bytes[i+1]<=0xBF){i+=2;continue;}if(// excluding overlongs\nbytes[i]===0xE0&&0xA0<=bytes[i+1]&&bytes[i+1]<=0xBF&&0x80<=bytes[i+2]&&bytes[i+2]<=0xBF||// straight 3-byte\n(0xE1<=bytes[i]&&bytes[i]<=0xEC||bytes[i]===0xEE||bytes[i]===0xEF)&&0x80<=bytes[i+1]&&bytes[i+1]<=0xBF&&0x80<=bytes[i+2]&&bytes[i+2]<=0xBF||// excluding surrogates\nbytes[i]===0xED&&0x80<=bytes[i+1]&&bytes[i+1]<=0x9F&&0x80<=bytes[i+2]&&bytes[i+2]<=0xBF){i+=3;continue;}if(// planes 1-3\nbytes[i]===0xF0&&0x90<=bytes[i+1]&&bytes[i+1]<=0xBF&&0x80<=bytes[i+2]&&bytes[i+2]<=0xBF&&0x80<=bytes[i+3]&&bytes[i+3]<=0xBF||// planes 4-15\n0xF1<=bytes[i]&&bytes[i]<=0xF3&&0x80<=bytes[i+1]&&bytes[i+1]<=0xBF&&0x80<=bytes[i+2]&&bytes[i+2]<=0xBF&&0x80<=bytes[i+3]&&bytes[i+3]<=0xBF||// plane 16\nbytes[i]===0xF4&&0x80<=bytes[i+1]&&bytes[i+1]<=0x8F&&0x80<=bytes[i+2]&&bytes[i+2]<=0xBF&&0x80<=bytes[i+3]&&bytes[i+3]<=0xBF){i+=4;continue;}return false;}return true;}// 只处理逗号列分隔符\nvar COLUMN_DELIMITER=',';export function csvToArray(csv){var table=[];var row=[];var cell='';var openQuote=false;var i=0;var pushCell=function pushCell(){row.push(cell);cell='';};var pushRow=function pushRow(){pushCell();table.push(row);row=[];};// 处理行分隔符和列分隔符\nvar handleSeparator=function handleSeparator(idx){var c=csv.charAt(idx);if(c===COLUMN_DELIMITER){pushCell();}else if(c==='\\r'){if(csv.charAt(idx+1)==='\\n'){i++;}pushRow();}else if(c==='\\n'){pushRow();}else{return false;}return true;};while(i<csv.length){var c=csv.charAt(i);var next=csv.charAt(i+1);if(!openQuote&&!cell&&c==='\"'){// 遇到单元第一个字符为双引号时假设整个单元都是被双引号括起来\nopenQuote=true;}else if(openQuote){// 双引号还未成对的时候\nif(c!=='\"'){// 如非双引号，直接添加进单元内容\ncell+=c;}else if(next==='\"'){// 处理双引号转义\ncell+=c;i++;}else{// 确认单元结束\nopenQuote=false;if(!handleSeparator(++i)){throw new Error('Wrong CSV format!');}}}else if(!handleSeparator(i)){// 没有双引号包起来时，如非行列分隔符，一律直接加入单元内容\ncell+=c;}i++;}if(cell){pushRow();}if(row.length){pushRow();}return table;}","map":{"version":3,"names":["isUTF8","bytes","i","length","COLUMN_DELIMITER","csvToArray","csv","table","row","cell","openQuote","pushCell","push","pushRow","handleSeparator","idx","c","charAt","next","Error"],"sources":["/Users/evik/kl/project-2024/klasmart-assessment-frontend/src/components/UploadCSV/handledata.ts"],"sourcesContent":["export function isUTF8(bytes: Uint8Array) {\n  var i = 0;\n  while (i < bytes.length) {\n      if ((// ASCII\n          bytes[i] === 0x09 ||\n          bytes[i] === 0x0A ||\n          bytes[i] === 0x0D ||\n          (0x20 <= bytes[i] && bytes[i] <= 0x7E)\n      )\n      ) {\n          i += 1;\n          continue;\n      }\n\n      if ((// non-overlong 2-byte\n          (0xC2 <= bytes[i] && bytes[i] <= 0xDF) &&\n          (0x80 <= bytes[i + 1] && bytes[i + 1] <= 0xBF)\n      )\n      ) {\n          i += 2;\n          continue;\n      }\n\n      if ((// excluding overlongs\n          bytes[i] === 0xE0 &&\n          (0xA0 <= bytes[i + 1] && bytes[i + 1] <= 0xBF) &&\n          (0x80 <= bytes[i + 2] && bytes[i + 2] <= 0xBF)\n      ) ||\n          (// straight 3-byte\n              ((0xE1 <= bytes[i] && bytes[i] <= 0xEC) ||\n                  bytes[i] === 0xEE ||\n                  bytes[i] === 0xEF) &&\n              (0x80 <= bytes[i + 1] && bytes[i + 1] <= 0xBF) &&\n              (0x80 <= bytes[i + 2] && bytes[i + 2] <= 0xBF)\n          ) ||\n          (// excluding surrogates\n              bytes[i] === 0xED &&\n              (0x80 <= bytes[i + 1] && bytes[i + 1] <= 0x9F) &&\n              (0x80 <= bytes[i + 2] && bytes[i + 2] <= 0xBF)\n          )\n      ) {\n          i += 3;\n          continue;\n      }\n\n      if ((// planes 1-3\n          bytes[i] === 0xF0 &&\n          (0x90 <= bytes[i + 1] && bytes[i + 1] <= 0xBF) &&\n          (0x80 <= bytes[i + 2] && bytes[i + 2] <= 0xBF) &&\n          (0x80 <= bytes[i + 3] && bytes[i + 3] <= 0xBF)\n      ) ||\n          (// planes 4-15\n              (0xF1 <= bytes[i] && bytes[i] <= 0xF3) &&\n              (0x80 <= bytes[i + 1] && bytes[i + 1] <= 0xBF) &&\n              (0x80 <= bytes[i + 2] && bytes[i + 2] <= 0xBF) &&\n              (0x80 <= bytes[i + 3] && bytes[i + 3] <= 0xBF)\n          ) ||\n          (// plane 16\n              bytes[i] === 0xF4 &&\n              (0x80 <= bytes[i + 1] && bytes[i + 1] <= 0x8F) &&\n              (0x80 <= bytes[i + 2] && bytes[i + 2] <= 0xBF) &&\n              (0x80 <= bytes[i + 3] && bytes[i + 3] <= 0xBF)\n          )\n      ) {\n          i += 4;\n          continue;\n      }\n      return false;\n  }\n  return true;\n}\n\n// 只处理逗号列分隔符\nconst COLUMN_DELIMITER = ',';\n\nexport function csvToArray(csv: string): string[][] {\n  const table = [] as string[][];\n  let row: string[] = [];\n  let cell = '';\n  let openQuote = false;\n  let i = 0;\n  \n  const pushCell = () => {\n    row.push(cell);\n    cell = '';\n  };\n  \n  const pushRow = () => {\n    pushCell();\n    table.push(row);\n    row = [];\n  }\n  // 处理行分隔符和列分隔符\n  const handleSeparator = (idx: number) => {\n    const c = csv.charAt(idx);\n    if (c === COLUMN_DELIMITER) {\n      pushCell();\n    } else if (c === '\\r') {\n      if (csv.charAt(idx + 1) === '\\n') {\n        i++;\n      }\n      pushRow();\n    } else if (c === '\\n') {\n      pushRow();\n    } else {\n      return false;\n    }\n    return true;\n  }\n  \n  while (i < csv.length) {\n    const c = csv.charAt(i);\n    const next = csv.charAt(i + 1);\n    if (!openQuote && !cell && c === '\"') {\n      // 遇到单元第一个字符为双引号时假设整个单元都是被双引号括起来\n        openQuote = true;\n    } else if (openQuote) {\n      // 双引号还未成对的时候\n      if (c !== '\"') {\n        // 如非双引号，直接添加进单元内容\n        cell += c;\n      } else if (next === '\"') {\n        // 处理双引号转义\n        cell += c;\n        i++;\n      } else {\n        // 确认单元结束\n        openQuote = false\n        if (!handleSeparator(++i)){\n          throw new Error('Wrong CSV format!');\n        }\n      }\n    } else if (!handleSeparator(i)) {\n      // 没有双引号包起来时，如非行列分隔符，一律直接加入单元内容\n      cell += c;\n    }\n    i++;\n  }\n  if (cell) {\n    pushRow();\n  }\n  if(row.length) {\n    pushRow();\n  }\n  return table;\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}