{"ast":null,"code":"export function buildRetryFunction(retryOptions) {\n  var _a = retryOptions || {},\n      retryIf = _a.retryIf,\n      _b = _a.max,\n      max = _b === void 0 ? 5 : _b;\n\n  return function retryFunction(count, operation, error) {\n    if (count >= max) return false;\n    return retryIf ? retryIf(error, operation) : !!error;\n  };\n}","map":{"version":3,"mappings":"AAgCA,OAAM,SAAUA,kBAAV,CACJC,YADI,EAC+B;EAE7B,SAAuBA,YAAY,IAAK,EAAxC;EAAA,IAAEC,OAAO,aAAT;EAAA,IAAWC,WAAX;EAAA,IAAWC,GAAG,mBAAG,CAAH,GAAID,EAAlB;;EACN,OAAO,SAASE,aAAT,CAAuBC,KAAvB,EAA8BC,SAA9B,EAAyCC,KAAzC,EAA8C;IACnD,IAAIF,KAAK,IAAIF,GAAb,EAAkB,OAAO,KAAP;IAClB,OAAOF,OAAO,GAAGA,OAAO,CAACM,KAAD,EAAQD,SAAR,CAAV,GAA+B,CAAC,CAACC,KAA/C;EACD,CAHD;AAID","names":["buildRetryFunction","retryOptions","retryIf","_b","max","retryFunction","count","operation","error"],"sources":["/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/@apollo/src/link/retry/retryFunction.ts"],"sourcesContent":["import { Operation } from '../core';\n\n/**\n * Advanced mode: a function that determines both whether a particular\n * response should be retried.\n */\nexport interface RetryFunction {\n  (count: number, operation: Operation, error: any): boolean | Promise<boolean>;\n}\n\nexport interface RetryFunctionOptions {\n  /**\n   * The max number of times to try a single operation before giving up.\n   *\n   * Note that this INCLUDES the initial request as part of the count.\n   * E.g. maxTries of 1 indicates no retrying should occur.\n   *\n   * Defaults to 5.  Pass Infinity for infinite retries.\n   */\n  max?: number;\n\n  /**\n   * Predicate function that determines whether a particular error should\n   * trigger a retry.\n   *\n   * For example, you may want to not retry 4xx class HTTP errors.\n   *\n   * By default, all errors are retried.\n   */\n  retryIf?: (error: any, operation: Operation) => boolean | Promise<boolean>;\n}\n\nexport function buildRetryFunction(\n  retryOptions?: RetryFunctionOptions,\n): RetryFunction {\n  const { retryIf, max = 5 } = retryOptions || ({} as RetryFunctionOptions);\n  return function retryFunction(count, operation, error) {\n    if (count >= max) return false;\n    return retryIf ? retryIf(error, operation) : !!error;\n  };\n}\n"]},"metadata":{},"sourceType":"module"}