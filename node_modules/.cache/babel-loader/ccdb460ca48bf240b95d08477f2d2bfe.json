{"ast":null,"code":"import { useMemo, useRef, useCallback, useEffect } from 'react';\nimport lodashDebounce from 'lodash.debounce';\n\nvar createCallback = function createCallback(debounce, handleOnScroll, options) {\n  if (debounce) {\n    return lodashDebounce(handleOnScroll, debounce, options);\n  } else {\n    return handleOnScroll;\n  }\n};\n\nfunction useBottomScrollListener(onBottom, options) {\n  var _useMemo = useMemo(function () {\n    var _options$offset, _options$debounce, _options$debounceOpti, _options$triggerOnNoS;\n\n    return {\n      offset: (_options$offset = options === null || options === void 0 ? void 0 : options.offset) != null ? _options$offset : 0,\n      debounce: (_options$debounce = options === null || options === void 0 ? void 0 : options.debounce) != null ? _options$debounce : 200,\n      debounceOptions: (_options$debounceOpti = options === null || options === void 0 ? void 0 : options.debounceOptions) != null ? _options$debounceOpti : {\n        leading: true\n      },\n      triggerOnNoScroll: (_options$triggerOnNoS = options === null || options === void 0 ? void 0 : options.triggerOnNoScroll) != null ? _options$triggerOnNoS : false\n    };\n  }, [options === null || options === void 0 ? void 0 : options.offset, options === null || options === void 0 ? void 0 : options.debounce, options === null || options === void 0 ? void 0 : options.debounceOptions, options === null || options === void 0 ? void 0 : options.triggerOnNoScroll]),\n      offset = _useMemo.offset,\n      triggerOnNoScroll = _useMemo.triggerOnNoScroll,\n      debounce = _useMemo.debounce,\n      debounceOptions = _useMemo.debounceOptions;\n\n  var debouncedOnBottom = useMemo(function () {\n    return createCallback(debounce, onBottom, debounceOptions);\n  }, [debounce, onBottom]);\n  var containerRef = useRef(null);\n  var handleOnScroll = useCallback(function () {\n    if (containerRef.current != null) {\n      var scrollNode = containerRef.current;\n      var scrollContainerBottomPosition = Math.round(scrollNode.scrollTop + scrollNode.clientHeight);\n      var scrollPosition = Math.round(scrollNode.scrollHeight - offset);\n\n      if (scrollPosition <= scrollContainerBottomPosition) {\n        debouncedOnBottom();\n      }\n    } else {\n      var _scrollNode = document.scrollingElement || document.documentElement;\n\n      var _scrollContainerBottomPosition = Math.round(_scrollNode.scrollTop + window.innerHeight);\n\n      var _scrollPosition = Math.round(_scrollNode.scrollHeight - offset);\n\n      if (_scrollPosition <= _scrollContainerBottomPosition) {\n        debouncedOnBottom();\n      }\n    }\n  }, [offset, onBottom, containerRef.current]);\n  useEffect(function () {\n    var ref = containerRef.current;\n\n    if (ref != null) {\n      ref.addEventListener('scroll', handleOnScroll);\n    } else {\n      window.addEventListener('scroll', handleOnScroll);\n    }\n\n    if (triggerOnNoScroll) {\n      handleOnScroll();\n    }\n\n    return function () {\n      if (ref != null) {\n        ref.removeEventListener('scroll', handleOnScroll);\n      } else {\n        window.removeEventListener('scroll', handleOnScroll);\n      }\n    };\n  }, [handleOnScroll, debounce]);\n  return containerRef;\n}\n\nvar BottomScrollListener = function BottomScrollListener(_ref) {\n  var children = _ref.children,\n      onBottom = _ref.onBottom,\n      offset = _ref.offset,\n      debounce = _ref.debounce,\n      debounceOptions = _ref.debounceOptions,\n      triggerOnNoScroll = _ref.triggerOnNoScroll;\n  var optionalScrollContainerRef = useBottomScrollListener(onBottom, {\n    offset: offset,\n    debounce: debounce,\n    debounceOptions: debounceOptions,\n    triggerOnNoScroll: triggerOnNoScroll\n  });\n  if (!children) return null;else if (typeof children === 'function') return children(optionalScrollContainerRef);else return children;\n};\n\nexport { BottomScrollListener, useBottomScrollListener };","map":{"version":3,"mappings":"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","names":["createCallback","debounce","handleOnScroll","options","lodashDebounce","useBottomScrollListener","onBottom","useMemo","offset","debounceOptions","leading","triggerOnNoScroll","debouncedOnBottom","containerRef","useRef","useCallback","current","scrollNode","scrollContainerBottomPosition","Math","round","scrollTop","clientHeight","scrollPosition","scrollHeight","document","scrollingElement","documentElement","window","innerHeight","useEffect","ref","addEventListener","removeEventListener","BottomScrollListener","children","optionalScrollContainerRef"],"sources":["/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-bottom-scroll-listener/src/hook/index.tsx","/Users/evik/kl/project-2024/klasmart-assessment-frontend/node_modules/react-bottom-scroll-listener/src/component/index.tsx"],"sourcesContent":["import { useCallback, useEffect, useRef, useMemo, RefObject } from 'react';\nimport lodashDebounce from 'lodash.debounce';\n\nexport type DebounceOptions = Parameters<typeof lodashDebounce>[2];\n\nconst createCallback = (debounce: number, handleOnScroll: () => void, options: DebounceOptions): (() => void) => {\n  if (debounce) {\n    return lodashDebounce(handleOnScroll, debounce, options);\n  } else {\n    return handleOnScroll;\n  }\n};\n\n/**\n * @description\n *  A react hook that invokes a callback when user scrolls to the bottom\n *\n * @param onBottom Required callback that will be invoked when scrolled to bottom\n * @param {Object} options - Optional parameters\n * @param {number} [options.offset=0] - Offset from bottom of page in pixels. E.g. 300 will trigger onBottom 300px from the bottom of the page\n * @param {number} [options.debounce=200] - Optional debounce in milliseconds, defaults to 200ms\n * @param {DebounceOptions} [options.debounceOptions={leading=true}] - Options passed to lodash.debounce, see https://lodash.com/docs/4.17.15#debounce\n * @param {boolean} [options.triggerOnNoScroll=false] - Triggers the onBottom callback when the page has no scrollbar\n * @returns {RefObject} ref - If passed to a element as a ref, e.g. a div it will register scrolling to the bottom of that div instead of document viewport\n */\nfunction useBottomScrollListener<T extends HTMLElement>(\n  onBottom: () => void,\n  options?: {\n    offset?: number;\n    debounce?: number;\n    debounceOptions?: DebounceOptions;\n    triggerOnNoScroll?: boolean;\n  },\n): RefObject<T> {\n  const { offset, triggerOnNoScroll, debounce, debounceOptions } = useMemo(\n    () => ({\n      offset: options?.offset ?? 0,\n      debounce: options?.debounce ?? 200,\n      debounceOptions: options?.debounceOptions ?? { leading: true },\n      triggerOnNoScroll: options?.triggerOnNoScroll ?? false,\n    }),\n    [options?.offset, options?.debounce, options?.debounceOptions, options?.triggerOnNoScroll],\n  );\n\n  const debouncedOnBottom = useMemo(() => createCallback(debounce, onBottom, debounceOptions), [debounce, onBottom]);\n  const containerRef = useRef<T>(null);\n  const handleOnScroll = useCallback(() => {\n    if (containerRef.current != null) {\n      const scrollNode: T = containerRef.current;\n      const scrollContainerBottomPosition = Math.round(scrollNode.scrollTop + scrollNode.clientHeight);\n      const scrollPosition = Math.round(scrollNode.scrollHeight - offset);\n\n      if (scrollPosition <= scrollContainerBottomPosition) {\n        debouncedOnBottom();\n      }\n    } else {\n      const scrollNode: Element = document.scrollingElement || document.documentElement;\n      const scrollContainerBottomPosition = Math.round(scrollNode.scrollTop + window.innerHeight);\n      const scrollPosition = Math.round(scrollNode.scrollHeight - offset);\n\n      if (scrollPosition <= scrollContainerBottomPosition) {\n        debouncedOnBottom();\n      }\n    }\n    // ref dependency needed for the tests, doesn't matter for normal execution\n  }, [offset, onBottom, containerRef.current]);\n\n  useEffect((): (() => void) => {\n    const ref: T | null = containerRef.current;\n    if (ref != null) {\n      ref.addEventListener('scroll', handleOnScroll);\n    } else {\n      window.addEventListener('scroll', handleOnScroll);\n    }\n\n    if (triggerOnNoScroll) {\n      handleOnScroll();\n    }\n\n    return () => {\n      if (ref != null) {\n        ref.removeEventListener('scroll', handleOnScroll);\n      } else {\n        window.removeEventListener('scroll', handleOnScroll);\n      }\n    };\n  }, [handleOnScroll, debounce]);\n\n  return containerRef;\n}\n\nexport default useBottomScrollListener;\n","import { MutableRefObject } from 'react';\nimport useBottomScrollListener, { DebounceOptions } from '../hook';\n\nexport interface BottomScrollListenerProps {\n  /**\n   * Required callback that will be invoked when scrolled to bottom\n   */\n  onBottom: () => void;\n\n  /**\n   * Offset from bottom of page in pixels. E.g. 300 will trigger onBottom 300px from the bottom of the page\n   */\n  offset?: number;\n\n  /**\n   * Optional debounce in milliseconds, defaults to 200ms\n   */\n  debounce?: number;\n\n  /**\n   * Options passed to lodash.debounce, see https://lodash.com/docs/4.17.15#debounce\n   */\n  debounceOptions?: DebounceOptions;\n\n  /**\n   * Triggers the onBottom callback when the page has no scrollbar, defaults to false\n   */\n  triggerOnNoScroll?: boolean;\n\n  /**\n   *   Optional children to be rendered.\n   *\n   *   If children passed is a function, that function will be passed a React.RefObject<HTMLElement>\n   *   that ref shall be passed to a child tag that will be used for the scrolling container.\n   * */\n  children?:\n    | JSX.Element\n    | (<T>(ref: ((instance: T | null) => void) | MutableRefObject<T | null> | null) => JSX.Element);\n}\n\n/**\n * A simple React component that lets you listen for when you have scrolled to the bottom.\n *\n * @param {BottomScrollListenerProps} props\n */\nconst BottomScrollListener = ({\n  children,\n  onBottom,\n  offset,\n  debounce,\n  debounceOptions,\n  triggerOnNoScroll,\n}: BottomScrollListenerProps): JSX.Element | null => {\n  const optionalScrollContainerRef = useBottomScrollListener(onBottom, {\n    offset,\n    debounce,\n    debounceOptions,\n    triggerOnNoScroll,\n  });\n\n  if (!children) return null;\n  else if (typeof children === 'function') return children(optionalScrollContainerRef);\n  else return children;\n};\n\nexport default BottomScrollListener;\n"]},"metadata":{},"sourceType":"module"}