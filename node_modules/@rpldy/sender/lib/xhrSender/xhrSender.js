"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.SUCCESS_CODES = void 0;

var _shared = require("@rpldy/shared");

var _consts = require("../consts");

var _prepareFormData = _interopRequireDefault(require("./prepareFormData"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var SUCCESS_CODES = [200, 201, 202, 203, 204];
exports.SUCCESS_CODES = SUCCESS_CODES;

var getRequestData = function getRequestData(items, options) {
  var data;

  if (options.sendWithFormData) {
    _shared.logger.debugLog("uploady.sender: sending ".concat(items.length, " item(s) as form data"));

    data = (0, _prepareFormData["default"])(items, options);
  } else {
    if (items.length > 1) {
      throw new Error("XHR Sender - Request without form data can only contain 1 item. received ".concat(items.length));
    }

    var item = items[0];

    _shared.logger.debugLog("uploady.sender: sending item ".concat(item.id, " as request body"));

    data = item.file || item.url;
  }

  return data;
};

var makeRequest = function makeRequest(items, url, options, onProgress) {
  var requestData = getRequestData(items, options);
  var pXhr = (0, _shared.request)(url, requestData, _objectSpread(_objectSpread({}, (0, _shared.pick)(options, ["method", "headers", "withCredentials"])), {}, {
    preSend: function preSend(req) {
      req.upload.onprogress = function (e) {
        if (e.lengthComputable && onProgress) {
          onProgress(e, items.slice());
        }
      };
    }
  }));
  return {
    url: url,
    count: items.length,
    pXhr: pXhr,
    // $FlowFixMe -
    xhr: pXhr.xhr,
    aborted: false
  };
};

var parseResponseJson = function parseResponseJson(response, headers, options) {
  var parsed = response;
  var ct = headers && headers["content-type"];

  if (options.forceJsonResponse || ct && ~ct.indexOf("json")) {
    try {
      parsed = JSON.parse(response);
    } catch (_unused) {//silent fail
    }
  }

  return parsed;
};

var processResponse = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(sendRequest, options) {
    var state, response, status, xhr, resHeaders;
    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            status = 0;
            _context.prev = 1;
            _context.next = 4;
            return sendRequest.pXhr;

          case 4:
            xhr = _context.sent;

            _shared.logger.debugLog("uploady.sender: received upload response ", xhr);

            state = ~SUCCESS_CODES.indexOf(xhr.status) ? _shared.FILE_STATES.FINISHED : _shared.FILE_STATES.ERROR;
            status = xhr.status;
            resHeaders = (0, _shared.parseResponseHeaders)(xhr);
            response = {
              data: parseResponseJson(xhr.response, resHeaders, options),
              headers: resHeaders
            };
            _context.next = 15;
            break;

          case 12:
            _context.prev = 12;
            _context.t0 = _context["catch"](1);

            if (sendRequest.aborted) {
              state = _shared.FILE_STATES.ABORTED;
              response = "aborted";
            } else {
              _shared.logger.debugLog("uploady.sender: upload failed: ", _context.t0);

              state = _shared.FILE_STATES.ERROR;
              response = _context.t0;
            }

          case 15:
            return _context.abrupt("return", {
              status: status,
              state: state,
              response: response
            });

          case 16:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[1, 12]]);
  }));

  return function processResponse(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

var abortRequest = function abortRequest(sendRequest) {
  var abortCalled = false;
  var aborted = sendRequest.aborted,
      xhr = sendRequest.xhr;

  if (!aborted && xhr.readyState && xhr.readyState !== 4) {
    _shared.logger.debugLog("uploady.sender: cancelling request with ".concat(sendRequest.count, " items to: ").concat(sendRequest.url));

    xhr.abort();
    sendRequest.aborted = true;
    abortCalled = true;
  }

  return abortCalled;
};

var _default = function _default(items, url, options, onProgress) {
  _shared.logger.debugLog("uploady.sender: sending file: ", {
    items: items,
    url: url,
    options: options
  });

  var sendRequest = makeRequest(items, url, options, onProgress);
  return {
    request: processResponse(sendRequest, options),
    abort: function abort() {
      return abortRequest(sendRequest);
    },
    senderType: _consts.XHR_SENDER_TYPE
  };
};

exports["default"] = _default;