"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _lifeEvents = _interopRequireDefault(require("@rpldy/life-events"));

var _shared = require("@rpldy/shared");

var _batch = _interopRequireDefault(require("./batch"));

var _processor = _interopRequireDefault(require("./processor"));

var _consts = require("./consts");

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var EVENT_NAMES = Object.values(_consts.UPLOADER_EVENTS);
var EXT_OUTSIDE_ENHANCER_TIME = "Uploady - uploader extensions can only be registered by enhancers",
    EXT_ALREADY_EXISTS = "Uploady - uploader extension by this name [%s] already exists";
var counter = 0;

var _default = function _default(options) {
  counter += 1;
  var uploaderId = "uploader-".concat(counter);
  var enhancerTime = false;
  var pendingBatches = [],
      extensions = {};

  _shared.logger.debugLog("uploady.uploader: creating new instance (".concat(uploaderId, ")"), {
    options: options,
    counter: counter
  });

  var uploaderOptions = (0, _utils.getMandatoryOptions)(options);

  var update = function update(updateOptions) {
    //TODO: updating concurrent and maxConcurrent means we need to update the processor - not supported yet!
    uploaderOptions = (0, _shared.merge)({}, uploaderOptions, updateOptions); //need deep merge for destination

    return uploader;
  };

  var add = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(files, addOptions) {
      var processOptions, batch, isCancelled;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              processOptions = (0, _shared.merge)({}, uploaderOptions, addOptions);
              batch = (0, _batch["default"])(files, uploader.id, processOptions);

              if (!batch.items.length) {
                _context.next = 9;
                break;
              }

              _context.next = 5;
              return cancellable(_consts.UPLOADER_EVENTS.BATCH_ADD, batch, processOptions);

            case 5:
              isCancelled = _context.sent;

              if (!isCancelled) {
                _shared.logger.debugLog("uploady.uploader [".concat(uploader.id, "]: new items added - auto upload = ").concat(String(processOptions.autoUpload)), batch.items);

                if (processOptions.autoUpload) {
                  processor.process(batch, processOptions);
                } else {
                  pendingBatches.push({
                    batch: batch,
                    uploadOptions: processOptions
                  });
                }
              } else {
                batch.state = _shared.BATCH_STATES.CANCELLED;
                trigger(_consts.UPLOADER_EVENTS.BATCH_CANCEL, batch);
              }

              _context.next = 10;
              break;

            case 9:
              _shared.logger.debugLog("uploady.uploader: no items to add. batch ".concat(batch.id, " is empty. check fileFilter if this isn't intended"));

            case 10:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function add(_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }();

  var abort = function abort(id) {
    processor.abort(id);
  };

  var abortBatch = function abortBatch(id) {
    processor.abortBatch(id);
  };

  var getPending = function getPending() {
    return pendingBatches.slice();
  };

  var clearPending = function clearPending() {
    pendingBatches.splice(0);
  };
  /**
   * Tells the uploader to process batches that weren't auto-uploaded
   */


  var upload = function upload() {
    pendingBatches.splice(0).forEach(function (_ref2) {
      var batch = _ref2.batch,
          uploadOptions = _ref2.uploadOptions;
      return processor.process(batch, uploadOptions);
    });
  };

  var getOptions = function getOptions() {
    return (0, _shared.clone)(uploaderOptions);
  };

  var registerExtension = function registerExtension(name, methods) {
    (0, _shared.invariant)(enhancerTime, EXT_OUTSIDE_ENHANCER_TIME);
    (0, _shared.invariant)(!extensions[name], EXT_ALREADY_EXISTS, name);

    _shared.logger.debugLog("uploady.uploader: registering extension: ".concat(name.toString()), methods);

    extensions[name] = methods;
  };

  var getExtension = function getExtension(name) {
    return extensions[name];
  };

  var _addLife = (0, _lifeEvents["default"])({
    id: uploaderId,
    update: update,
    add: add,
    upload: upload,
    abort: abort,
    abortBatch: abortBatch,
    getOptions: getOptions,
    getPending: getPending,
    clearPending: clearPending,
    registerExtension: registerExtension,
    getExtension: getExtension
  }, EVENT_NAMES, {
    canAddEvents: false,
    canRemoveEvents: false
  }),
      trigger = _addLife.trigger,
      uploader = _addLife.target;

  var cancellable = (0, _shared.triggerCancellable)(trigger);

  if (uploaderOptions.enhancer) {
    enhancerTime = true;
    var enhanced = uploaderOptions.enhancer(uploader, trigger);
    enhancerTime = false; //graceful handling for enhancer forgetting to return uploader

    uploader = enhanced || uploader;
  }

  var processor = (0, _processor["default"])(trigger, uploaderOptions, uploader.id);
  return (0, _shared.devFreeze)(uploader);
};

exports["default"] = _default;