"use strict";

function _typeof(obj) { "@babel/helpers - typeof"; if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _shared = require("@rpldy/shared");

var _simpleState = _interopRequireWildcard(require("@rpldy/simple-state"));

var _consts = require("../consts");

var _processQueueNext = _interopRequireDefault(require("./processQueueNext"));

var abortMethods = _interopRequireWildcard(require("./abort"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { "default": obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && Symbol.iterator in Object(iter)) return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

var _default = function _default(options, cancellable, trigger, sender, uploaderId) {
  var _createState = (0, _simpleState["default"])({
    itemQueue: [],
    currentBatch: null,
    batches: {},
    items: {},
    activeIds: [],
    aborts: {}
  }),
      state = _createState.state,
      update = _createState.update;

  var unWrapAndTrigger = function unWrapAndTrigger(name) {
    for (var _len = arguments.length, data = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      data[_key - 1] = arguments[_key];
    }

    return trigger.apply(void 0, [name].concat(_toConsumableArray(data.map(function (d) {
      return (0, _simpleState.unwrap)(d);
    }))));
  };

  var unWrapAndCancellable = function unWrapAndCancellable(name) {
    for (var _len2 = arguments.length, data = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      data[_key2 - 1] = arguments[_key2];
    }

    return cancellable.apply(void 0, [name].concat(_toConsumableArray(data.map(function (d) {
      return (0, _simpleState.unwrap)(d);
    }))));
  };

  var getState = function getState() {
    return state;
  };

  var updateState = function updateState(updater) {
    update(updater);
  };

  var add = function add(item) {
    if (state.items[item.id]) {
      throw new Error("Uploader queue conflict - item ".concat(item.id, " already exists (recycled: ").concat(String(item.recycled), ")"));
    }

    updateState(function (state) {
      state.items[item.id] = item;
      state.itemQueue.push(item.id);
    });
  };

  var uploadBatch = function uploadBatch(batch, batchOptions) {
    updateState(function (state) {
      state.batches[batch.id] = {
        batch: batch,
        batchOptions: batchOptions
      };
    });
    batch.items.forEach(add);
    (0, _processQueueNext["default"])(queueState);
  };

  var handleItemProgress = function handleItemProgress(item, completed, loaded) {
    if (state.items[item.id]) {
      updateState(function (state) {
        var stateItem = state.items[item.id];
        stateItem.loaded = loaded;
        stateItem.completed = completed;
      }); //trigger item progress event for the outside

      unWrapAndTrigger(_consts.UPLOADER_EVENTS.ITEM_PROGRESS, getState().items[item.id]);
    }
  };

  sender.on(_consts.SENDER_EVENTS.ITEM_PROGRESS, handleItemProgress);
  sender.on(_consts.SENDER_EVENTS.BATCH_PROGRESS, function (batch) {
    var _state$batches$batch$;

    var batchItems = (_state$batches$batch$ = state.batches[batch.id]) === null || _state$batches$batch$ === void 0 ? void 0 : _state$batches$batch$.batch.items;

    if (batchItems) {
      var _batchItems$reduce = batchItems.reduce(function (res, item) {
        res[0] += item.completed;
        res[1] += item.loaded;
        return res;
      }, [0, 0]),
          _batchItems$reduce2 = _slicedToArray(_batchItems$reduce, 2),
          completed = _batchItems$reduce2[0],
          loaded = _batchItems$reduce2[1];

      updateState(function (state) {
        var stateBatch = state.batches[batch.id].batch; //average of completed percentage for batch items

        stateBatch.completed = completed / batchItems.length; //sum of loaded bytes for batch items

        stateBatch.loaded = loaded;
      });
      unWrapAndTrigger(_consts.UPLOADER_EVENTS.BATCH_PROGRESS, state.batches[batch.id].batch);
    }
  });
  var queueState = {
    getOptions: function getOptions() {
      return options;
    },
    getCurrentActiveCount: function getCurrentActiveCount() {
      return state.activeIds.length;
    },
    getState: getState,
    updateState: updateState,
    trigger: unWrapAndTrigger,
    cancellable: unWrapAndCancellable,
    sender: sender,
    handleItemProgress: handleItemProgress
  };

  if (_shared.logger.isDebugOn()) {
    window["__rpldy_".concat(uploaderId, "_queue_state")] = queueState;
  }

  var abortItem = function abortItem(id) {
    return abortMethods.abortItem(queueState, id, _processQueueNext["default"]);
  };

  var abortBatch = function abortBatch(id) {
    abortMethods.abortBatch(queueState, id, _processQueueNext["default"]);
  };

  var abortAll = function abortAll() {
    abortMethods.abortAll(queueState, _processQueueNext["default"]);
  };

  return {
    updateState: updateState,
    getState: queueState.getState,
    uploadBatch: uploadBatch,
    abortItem: abortItem,
    abortBatch: abortBatch,
    abortAll: abortAll
  };
};

exports["default"] = _default;