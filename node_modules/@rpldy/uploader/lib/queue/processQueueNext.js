"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.getNextIdGroup = exports.findNextItemIndex = void 0;

var _shared = require("@rpldy/shared");

var _processBatchItems = _interopRequireDefault(require("./processBatchItems"));

var _batchHelpers = require("./batchHelpers");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var getIsItemInActiveRequest = function getIsItemInActiveRequest(queue, itemId) {
  return !!~queue.getState().activeIds // $FlowFixMe - no flat
  .flat().indexOf(itemId);
};

var getIsItemReady = function getIsItemReady(item) {
  return item.state === _shared.FILE_STATES.ADDED;
};

var findNextItemIndex = function findNextItemIndex(queue) {
  var state = queue.getState(),
      itemQueue = state.itemQueue,
      items = state.items;
  var index = 0,
      nextId = itemQueue[index]; //find item that isnt already in an active request and belongs to a "ready" batch

  while (nextId && (getIsItemInActiveRequest(queue, nextId) || !(0, _batchHelpers.getIsItemBatchReady)(queue, nextId) || !getIsItemReady(items[nextId]))) {
    index += 1;
    nextId = itemQueue[index];
  }

  return nextId ? index : -1;
};

exports.findNextItemIndex = findNextItemIndex;

var getNextIdGroup = function getNextIdGroup(queue) {
  var itemQueue = queue.getState().itemQueue;
  var nextItemIndex = findNextItemIndex(queue);
  var nextId = itemQueue[nextItemIndex],
      nextGroup;

  if (nextId) {
    var batchData = (0, _batchHelpers.getBatchDataFromItemId)(queue, nextId);
    var batchId = batchData.batch.id,
        groupMax = batchData.batchOptions.maxGroupSize || 0;

    if (batchData.batchOptions.grouped && groupMax > 1) {
      nextGroup = [];
      var nextBelongsToSameBatch = true; //dont group files from different batches

      while (nextGroup.length < groupMax && nextBelongsToSameBatch) {
        nextGroup.push(nextId);
        nextId = itemQueue[nextItemIndex + nextGroup.length];
        nextBelongsToSameBatch = nextId && (0, _batchHelpers.isItemBelongsToBatch)(queue, nextId, batchId);
      }
    } else {
      nextGroup = [nextId];
    }
  }

  return nextGroup;
};

exports.getNextIdGroup = getNextIdGroup;

var processNext = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(queue) {
    var ids, currentCount, _queue$getOptions, _queue$getOptions$con, concurrent, _queue$getOptions$max, maxConcurrent, cancelled, allowBatch;

    return regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            ids = getNextIdGroup(queue);

            if (!ids) {
              _context.next = 13;
              break;
            }

            currentCount = queue.getCurrentActiveCount(), _queue$getOptions = queue.getOptions(), _queue$getOptions$con = _queue$getOptions.concurrent, concurrent = _queue$getOptions$con === void 0 ? 0 : _queue$getOptions$con, _queue$getOptions$max = _queue$getOptions.maxConcurrent, maxConcurrent = _queue$getOptions$max === void 0 ? 0 : _queue$getOptions$max;

            if (!(!currentCount || concurrent && currentCount < maxConcurrent)) {
              _context.next = 13;
              break;
            }

            _shared.logger.debugLog("uploader.processor: Processing next upload - ", {
              ids: ids,
              state: queue.getState(),
              currentCount: currentCount
            });

            cancelled = false;

            if (!(0, _batchHelpers.isNewBatchStarting)(queue, ids[0])) {
              _context.next = 12;
              break;
            }

            _context.next = 9;
            return (0, _batchHelpers.loadNewBatchForItem)(queue, ids[0]);

          case 9:
            allowBatch = _context.sent;
            cancelled = !allowBatch;

            if (cancelled) {
              (0, _batchHelpers.cancelBatchForItem)(queue, ids[0]);
              processNext(queue);
            }

          case 12:
            if (!cancelled) {
              (0, _processBatchItems["default"])(queue, ids, processNext);
            }

          case 13:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));

  return function processNext(_x) {
    return _ref.apply(this, arguments);
  };
}();

var _default = processNext;
exports["default"] = _default;