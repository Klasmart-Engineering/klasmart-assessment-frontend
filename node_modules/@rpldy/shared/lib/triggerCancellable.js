"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var _default = function _default(trigger, event) {
  var doTrigger = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(event) {
      var cancelled,
          _len2,
          args,
          _key2,
          results,
          resolved,
          _args = arguments;

      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              cancelled = false;

              for (_len2 = _args.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = _args[_key2];
              }

              results = trigger.apply(void 0, [event].concat(args));

              if (!(results && results.length)) {
                _context.next = 8;
                break;
              }

              _context.next = 6;
              return Promise.all(results);

            case 6:
              resolved = _context.sent;
              cancelled = !!~resolved.findIndex(function (r) {
                return r === false;
              });

            case 8:
              return _context.abrupt("return", cancelled);

            case 9:
            case "end":
              return _context.stop();
          }
        }
      }, _callee);
    }));

    return function doTrigger(_x) {
      return _ref.apply(this, arguments);
    };
  }();

  for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    args[_key - 2] = arguments[_key];
  }

  return event ? doTrigger.apply(void 0, [event].concat(args)) : doTrigger;
};

exports["default"] = _default;