"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.createContextApi = void 0;

var _react = _interopRequireDefault(require("react"));

var _shared = require("@rpldy/shared");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var UploadyContext = /*#__PURE__*/_react["default"].createContext(null);

var NO_INPUT_ERROR_MSG = "Uploady - Context. File input isn't available";

var createContextApi = function createContextApi(uploader, internalInputRef) {
  var fileInputRef, showFileUploadOptions;

  if (internalInputRef) {
    fileInputRef = internalInputRef;
  } else {
    _shared.logger.debugLog("Uploady context - didn't receive input field ref - waiting for external ref");
  }

  var getInputField = function getInputField() {
    var _fileInputRef;

    return (_fileInputRef = fileInputRef) === null || _fileInputRef === void 0 ? void 0 : _fileInputRef.current;
  };

  var setExternalFileInput = function setExternalFileInput(extRef) {
    fileInputRef = extRef;
  };

  var showFileUpload = function showFileUpload(addOptions) {
    var input = getInputField();
    (0, _shared.invariant)(input, NO_INPUT_ERROR_MSG); //allow components like upload button to override options

    showFileUploadOptions = addOptions;
    input.removeEventListener("change", onFileInputChange);
    input.addEventListener("change", onFileInputChange); //clear the input value so same file can be uploaded again

    input.value = "";
    input.click();
  };

  var onFileInputChange = function onFileInputChange() {
    var input = getInputField();
    (0, _shared.invariant)(input, NO_INPUT_ERROR_MSG);
    input.removeEventListener("change", onFileInputChange);
    var addOptions = showFileUploadOptions;
    showFileUploadOptions = null;
    upload(input.files, addOptions);
  };

  var upload = function upload(files, addOptions) {
    uploader.add(files, addOptions);
  };

  var processPending = function processPending() {
    uploader.upload();
  };

  var setOptions = function setOptions(options) {
    uploader.update(options);
  };

  var getOptions = function getOptions() {
    return uploader.getOptions();
  };

  var getExtension = function getExtension(name) {
    return uploader.getExtension(name);
  };

  var abort = function abort(itemId) {
    uploader.abort(itemId);
  };

  var abortBatch = function abortBatch(batchId) {
    uploader.abortBatch(batchId);
  };

  var on = function on(name, cb) {
    return uploader.on(name, cb);
  };

  var once = function once(name, cb) {
    return uploader.once(name, cb);
  };

  var off = function off(name, cb) {
    return uploader.off(name, cb);
  };

  var hasUploader = function hasUploader() {
    return !!uploader;
  };

  return {
    hasUploader: hasUploader,
    setExternalFileInput: setExternalFileInput,
    showFileUpload: showFileUpload,
    upload: upload,
    processPending: processPending,
    setOptions: setOptions,
    getOptions: getOptions,
    getExtension: getExtension,
    abort: abort,
    abortBatch: abortBatch,
    on: on,
    once: once,
    off: off
  };
};

exports.createContextApi = createContextApi;
var _default = UploadyContext;
exports["default"] = _default;