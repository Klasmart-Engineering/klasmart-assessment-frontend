{"version":3,"file":"static/js/839.0f04ffc1.chunk.js","mappings":"8QAkCe,SAASA,IACtB,IAGwB,EAHlBC,GAASC,EAAAA,EAAAA,qBAAoBC,EAAAA,aAC7BC,GAAsBF,EAAAA,EAAAA,qBAAoBG,EAAAA,0BAC5CC,EAAyB,GAC1BF,IACDE,EAAc,UAAGF,EAAoBG,UAAvB,YAMhB,OAJAC,IAAAA,WAAgB,WACVP,GAAQQ,EAAAA,EAAAA,QAAqBC,EAAAA,EAAAA,GAAiBT,EAAOU,MAAM,EAAG,IAAM,OACpEL,GAAgBM,EAAAA,EAAAA,UAAeC,EAAAA,EAAAA,GAAkBP,MACpD,CAACA,EAAgBL,KACb,SAACa,EAAA,EAAD,IAlCTC,EAAAA,EAAAA,GAAiCC,EAAAA,EAAAA,eAAwB,SAACC,GACxD,GAAKA,EAAL,CACA,IAAQC,EAA8BD,EAA9BC,MAAOC,EAAuBF,EAAvBE,IAAKC,EAAkBH,EAAlBG,KAAMC,EAAYJ,EAAZI,QAGpBC,EAAUC,QAAOC,EAAAA,EAAAA,GAAEN,EAAuBE,QAAQK,IAAcN,GAAO,IACzEG,IAASD,EAAUA,EAAQC,GAAWV,EAAAA,EAAAA,UAAec,EAAAA,EAAAA,IAASJ,SAGpEP,EAAAA,EAAAA,GAAgCC,EAAAA,EAAAA,MAAe,SAACC,GAC9C,GAAKA,EAAL,CACA,IAAQC,EAAUD,EAAVC,MACFI,EAAUC,QAAOC,EAAAA,EAAAA,GAAEN,IAA0B,IAC/CI,GAASV,EAAAA,EAAAA,UAAee,EAAAA,EAAAA,IAAQL,QAGtCP,EAAAA,EAAAA,GAAqCC,EAAAA,EAAAA,cAAuB,SAACC,GAC3D,GAAKA,EAAL,CACA,IAAQC,EAAeD,EAAfC,MAAOC,EAAQF,EAARE,IACTG,EAAUC,QAAOC,EAAAA,EAAAA,GAAEN,IAA0BC,GAAO,IACtDG,GAASV,EAAAA,EAAAA,UAAec,EAAAA,EAAAA,IAASJ,QCnBnBM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,4DCjBP,WAC1B,IAAMC,EAAoBC,SAASC,KAAKC,YACxCF,SAASC,KAAKC,YAAc,SAAqBC,GAC/C,MACqD,YAAnD,OAAEA,QAAF,IAAEA,OAAF,EAAEA,EAAqCC,UAErC,oGADF,OAAED,QAAF,IAAEA,OAAF,EAAEA,EAA2CE,KAGtCF,EAEFJ,EAAkBO,KAAKN,SAASC,KAAME,ICHjDI,GAEAC,IAAAA,QACE,SAAC,EAAAC,oBAAD,CAAqBC,aAAcC,0BAAnC,UACE,SAAC7C,EAAD,MAEFkC,SAASY,eAAT,SF8GI,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAACC","sources":["main.tsx","serviceWorker.ts","setupPolyfill.ts","bootstrap.tsx"],"sourcesContent":["import { apiEmitter, ApiErrorEventData, ApiEvent, ApiInfoEventData, GraphQLErrorEventData } from \"@api/emitter\";\nimport { currentOrganizationState, localeState, useGlobalStateValue } from \"@kl-engineering/frontend-state\";\nimport { LangRecordId, shouldBeLangName } from \"@locale/lang/type\";\nimport { localeManager, t } from \"@locale/LocaleManager\";\nimport { setOrganizationId } from \"@reducers/common\";\nimport { store } from \"@reducers/index\";\nimport { actError, actInfo } from \"@reducers/notify\";\nimport React from \"react\";\nimport App from \"./App\";\nimport \"./index.css\";\n\napiEmitter.on<ApiErrorEventData>(ApiEvent.ResponseError, (e) => {\n  if (!e) return;\n  const { label, msg, data, onError } = e;\n  // 韩国方面说： 他们会在容器外部处理未登录， 不需要通知\n  // if (label === UNAUTHORIZED_LABEL) sendIframeMessage({ type: 'unauthorized', payload: null });\n  const message = String(t(label as LangRecordId, data || undefined) || msg || \"\");\n  if (message) onError ? onError(message) : store.dispatch(actError(message));\n});\n\napiEmitter.on<ApiInfoEventData>(ApiEvent.Info, (e) => {\n  if (!e) return;\n  const { label } = e;\n  const message = String(t(label as LangRecordId) || \"\");\n  if (message) store.dispatch(actInfo(message));\n});\n\napiEmitter.on<GraphQLErrorEventData>(ApiEvent.GraphQLError, (e) => {\n  if (!e) return;\n  const { label, msg } = e;\n  const message = String(t(label as LangRecordId) || msg || \"\");\n  if (message) store.dispatch(actError(message));\n});\n\nexport default function Main() {\n  const locale = useGlobalStateValue(localeState);\n  const currentOrganization = useGlobalStateValue(currentOrganizationState);\n  let organizationId: string = \"\";\n  if(currentOrganization) {\n    organizationId = currentOrganization.id ?? ``;\n  }\n  React.useEffect(() => {\n    if (locale) localeManager.toggle(shouldBeLangName(locale.slice(0, 2) || \"en\"));\n    if (organizationId) store.dispatch(setOrganizationId(organizationId));\n  }, [organizationId, locale]);\n  return <App />;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\"This web app is being served cache-first by a service worker. To learn more, visit https://bit.ly/CRA-PWA\");\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\"New content is available and will be used when all tabs for this page are closed. See https://bit.ly/CRA-PWA.\");\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (response.status === 404 || (contentType != null && contentType.indexOf(\"javascript\") === -1)) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\");\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","export const livePolyfill = () => {\n  const originAppendChild = document.head.appendChild;\n  document.head.appendChild = function appendChild(element) {\n    if (\n      ((element as unknown) as HTMLElement)?.tagName === \"SCRIPT\" &&\n      ((element as unknown) as HTMLScriptElement)?.src ===\n        \"https://cdnjs.cloudflare.com/ajax/libs/iframe-resizer/3.5.8/iframeResizer.contentWindow.min.js\"\n    ) {\n      return element;\n    }\n    return originAppendChild.call(document.head, element);\n  } as typeof originAppendChild;\n};\n","import { GlobalStateProvider } from \"@kl-engineering/frontend-state\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Main from \"./main\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { livePolyfill } from \"./setupPolyfill\";\n\nlivePolyfill();\n\nReactDOM.render(\n  <GlobalStateProvider cookieDomain={process.env.REACT_APP_BASE_DOMAIN || \"\"}>\n    <Main />\n  </GlobalStateProvider>,\n  document.getElementById(`root`)\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"names":["Main","locale","useGlobalStateValue","localeState","currentOrganization","currentOrganizationState","organizationId","id","React","localeManager","shouldBeLangName","slice","store","setOrganizationId","App","apiEmitter","ApiEvent","e","label","msg","data","onError","message","String","t","undefined","actError","actInfo","Boolean","window","location","hostname","match","originAppendChild","document","head","appendChild","element","tagName","src","call","livePolyfill","ReactDOM","GlobalStateProvider","cookieDomain","process","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"sourceRoot":""}